import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';
import 'package:cupertino_range_slider/cupertino_range_slider.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_datetime_picker/flutter_datetime_picker.dart';
import 'package:flutter_plot/flutter_plot.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:intl/intl.dart';
import 'package:liquid_progress_indicator/liquid_progress_indicator.dart';
import 'package:path_provider/path_provider.dart';
import 'package:screen/screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:usb_serial/transaction.dart';
import 'package:usb_serial/usb_serial.dart';
import 'package:ventilator/bottombar/CommonDialog.dart';
import 'package:ventilator/database/ADatabaseHelper.dart';
import 'package:ventilator/database/CounterDatabaseHelper.dart';
import 'package:ventilator/database/DatabaseHelper.dart';
import 'package:ventilator/database/VentilatorOMode.dart';
import 'package:ventilator/graphs/Oscilloscope.dart';
import 'package:ventilator/graphs/OscilloscopeBig.dart';
import 'package:ventilator/viewlog/ViewLogPatientList.dart';
import 'package:ventilator/activity/About.dart';
import 'package:ventilator/activity/NewTreatmentScreen.dart';

class Dashboard extends StatefulWidget {
  @override
  _CheckPageState createState() => _CheckPageState();
}

class _CheckPageState extends State<Dashboard> {
  static const shutdownChannel = const MethodChannel("shutdown");
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  // GlobalKey<GraphWidgetInternalState> widgetKey = GlobalKey();

  Uint16List ulCrc16Table = Uint16List.fromList([
    0x0000,
    0xCC01,
    0xD801,
    0x1400,
    0xF001,
    0x3C00,
    0x2800,
    0xE401,
    0xA001,
    0x6C00,
    0x7800,
    0xB401,
    0x5000,
    0x9C01,
    0x8801,
    0x4400
  ]);
  double ptemp3, ntemp3;
  bool _isTab10 = true;
  bool getOpertingMode = false;
  List<double> pressurePoints = [0.0, 0.0];
  List<double> flowPoints = [0.0, 0.0];
  List<double> flowiPoints = [0.0, 0.0];
  List<double> flowePoints = [0.0, 0.0];
  List<double> volumePoints = [0.0, 0.0];
  List<double> pressurePointsPsv = [];
  int packetCounter = 0;
  List<double> flowPointsPsv = [];
  List<double> volumePointsPsv = [];
  Oscilloscope scopeOne, scopeOne1, scopeOne2;
  OscilloscopeBig mscopeOne,
      sscopeOne,
      mscopeOne1,
      mscopeOne2,
      sscopeOne1,
      sscopeOne2;

  UsbPort _port;
  String _status = "Idle";
  List<Widget> _ports = [];
  StreamSubscription<String> _subscription;
  Transaction<String> _transaction;
  SharedPreferences preferences;
  int _deviceId;
  double batteryPercentageValue = 0.0;
  double _progress = 50;
  Timer _timer, _timer1, _timer2, _timer3;
  Timer _timera1, _timera2, _timera3, _timera4;
  List<int> list = [];

  double radians = 0, radians1 = 0;
  int paw, mvValuea = 0, rrtotalValue = 0, lastmvValue = 0;
  int progressValuePressure = 6;
  int lencheck = 0;
  TextEditingController _textController = TextEditingController();
  int inspiratoryPressureR,
      expiratoryPressureR,
      fio2R,
      mixingTankPressureR,
      o2ipPressureR,
      turbineSpeedR,
      operatinModeR,
      alarmCodeR,
      alarmActivePriorityR,
      airipPressureR,
      inspirationflowR = 0,
      exhalationflowR,
      o2Valve,
      airiPValveStatusR,
      internalTemperatureR;
  int rrValue,
      peepValue,
      pcValue,
      psValue,
      vtValue,
      pipValue = 0,
      peepDisplayValue = 0,
      fio2Value,
      itrigValue,
      atimeValue,
      tipsvValue,
      ibytValue,
      vteValuea,
      leakMeanValue,
      vtiMeanValue,
      vteMeanValue,
      pawMeanValue,
      rateMeanValue;
  double tempPressure, temp1Volume, temp3Flow;
  double tempfPressure, temp1fVolume, temp3fFlow;
  int ieValue;
  double peepHeight = 280, psHeight = 280;
  String modeName = "", dateandTime;
  double tiValue = 0, teValue = 0;

  double mode1rrval = 12,
      mode1ieval = 2,
      mode1peepval = 10,
      mode1psval = 35,
      mode1fio2val = 21,
      mode1tival = 50;

  bool _iso2High = true, _isgraphFullScreen = true;

  bool modeEnable = false,
      audioEnable = true,
      usbConnected = false,
      modesEnabled = false,
      alarmEnabled = false,
      selfTestingEnabled = false,
      callibrationEnabled = false,
      selfTestingButtonEnabled = false,
      newTreatEnabled = false,
      monitorEnabled = false,
      pccmvEnabled = false,
      hfnoEnabled = false,
      vccmvEnabled = false,
      pacvEnabled = true,
      vacvEnabled = false,
      psimvEnabled = false,
      vsimvEnabled = false,
      psvEnabled = false,
      prvcEnabled = false,
      autoEnabled = false,
      cpapEnabled = false,
      cbipapEnabled = false,
      alarmsSetting1 = true,
      editbbEnabled = false,
      alarmsSetting2 = false,
      assistmodePressureOn = false,
      assistmodeCpapOn = true,
      assistmodeBpapOn = false,
      _parameterChangeEnabled = false,
      oxygenSettingsEnabled = false,
      _modeChangeEnabled = false,
      assistmodeVolumeOn = false;

  bool pacvItrig = false,
      pacvRr = true,
      pacvIe = false,
      pacvPeep = false,
      pacvPc = false,
      pacvPplateau = false,
      pacvFlow = false,
      pacvFio2 = false,
      pacvFlowRamp = false;

  int pacvItrigValue = 3,
      pacvRrValue = 20,
      pacvIeValue = 51,
      pacvPeepValue = 10,
      pacvPcValue = 25,
      pacvPplateauValue = 20,
      pacvFlowValue = 100,
      pacvFio2Value = 21,
      pacvFlowRampValue = 3;

  int pacvmaxValue = 60, pacvminValue = 1, pacvdefaultValue = 20;
  String pacvparameterName = "RR", pacvparameterUnits = "bpm";

  bool vacvItrig = false,
      vacvRr = true,
      vacvIe = false,
      vacvPeep = false,
      vacvVt = false,
      vacvPplateau = false,
      vacvPcMax = false,
      vacvFio2 = false,
      vacvFlow = false;

  int vacvItrigValue = 3,
      vacvRrValue = 20,
      vacvIeValue = 51,
      vacvPeepValue = 10,
      vacvVtValue = 300,
      vacvPplateauValue = 20,
      vacvPcMaxValue = 100,
      vacvFio2Value = 21,
      vacvFlowValue = 100;

  int vacvmaxValue = 60, vacvminValue = 1, vacvdefaultValue = 20;
  String vacvparameterName = "RR", vacvparameterUnits = "bpm";

  bool prvcItrig = false,
      prvcRr = true,
      prvcIe = false,
      prvcPeep = false,
      prvcVt = false,
      prvcPlateau = false,
      prvcPcMax = false,
      prvcFio2 = false,
      prvcFlow = false;

  int prvcItrigValue = 3,
      prvcRrValue = 20,
      prvcIeValue = 51,
      prvcPeepValue = 10,
      prvcVtValue = 300,
      prvcPlateauValue = 20,
      prvcPcMaxValue = 60,
      prvcFio2Value = 21,
      prvcFlowValue = 100;

  int prvcmaxValue = 30, prvcminValue = 1, prvcdefaultValue = 20;
  String prvcparameterName = "RR", prvcparameterUnits = "bpm";

  bool hfnoFlow = true, hfnoFio2 = false;
  int hfnoFlowValue = 5, hfnoFio2Value = 21;

  String hfnoparameterName = "Flow", hfnoparameterUnits = "lpm";
  int hfnomaxValue = 100, hfnominValue = 1;

  bool psvItrig = false,
      psvPeep = false,
      psvIe = false,
      psvPs = true,
      psvTi = false,
      psvPlateau = false,
      psvFlow = false,
      psvFio2 = false,
      psvAtime = false,
      psvEtrig = false,
      psvBackupRr = false,
      psvMinTe = false,
      psvPc = false,
      psvVt = false;

  int psvItrigValue = 3,
      psvPeepValue = 10,
      psvIeValue = 51,
      psvPsValue = 25,
      psvTiValue = 6,
      psvPlateauValue = 20,
      psvFlowValue = 100,
      psvFio2Value = 21,
      psvAtimeValue = 10,
      psvEtrigValue = 10,
      psvBackupRrValue = 20,
      psvMinTeValue = 1,
      psvPcValue = 25,
      psvVtValue = 300;

  int psvmaxValue = 60, psvminValue = 0, psvdefaultValue = 25;
  String psvparameterName = "PS", psvparameterUnits = "cmH\u2082O  Below PEEP";
  int y = 0, m = 0, d = 0;

  bool psimvItrig = false,
      psimvRr = true,
      psimvIe = false,
      psimvPeep = false,
      psimvPc = false,
      psimvPs = false,
      psimvPplateau = false,
      psimvVtMax = false,
      psimvFio2 = false,
      psimvFlow = false;

  int psimvItrigValue = 3,
      psimvRrValue = 20,
      psimvPsValue = 25,
      psimvIeValue = 51,
      psimvPeepValue = 10,
      psimvPcValue = 25,
      psimvPplateauValue = 20,
      psimvVtMaxValue = 2400,
      psimvFio2Value = 21,
      psimvFlowValue = 100;

  int psimvmaxValue = 30, psimvminValue = 1, psimvdefaultValue = 20;
  String psimvparameterName = "RR", psimvparameterUnits = "bpm";

  bool autoItrig = false,
      autoPeep = false,
      autoIe = false,
      autoPs = true,
      autoTi = false,
      autoVtMin = false,
      autoVtMax = false,
      autoFio2 = false,
      autoAtime = false,
      autoEtrig = false,
      autoBackupRr = false,
      autoPcMax = false,
      autoMinTe = false,
      autoPc = false,
      autoVt = false;

  int autoItrigValue = 3,
      autoPeepValue = 10,
      autoIeValue = 51,
      autoautoalue = 25,
      autoTiValue = 1,
      autoVtMinValue = 0,
      autoVtMaxValue = 2400,
      autoFio2Value = 21,
      autoAtimeValue = 10,
      autoEtrigValue = 10,
      autoBackupRrValue = 20,
      autoPcMaxValue = 100,
      autoMinTeValue = 1,
      autoPcValue = 25,
      autoVtValue = 300;

  int automaxValue = 60, autominValue = 0, autodefaultValue = 25;
  String autoparameterName = "PS",
      autoparameterUnits = "cmH\u2082O  Below PEEP";

  bool vsimvItrig = false,
      vsimvRr = true,
      vsimvIe = false,
      vsimvPeep = false,
      vsimvVt = false,
      vsimvPs = false,
      vsimvPlateau = false,
      vsimvPcMax = false,
      vsimvFio2 = false,
      vsimvFlow = false;

  int vsimvItrigValue = 3,
      vsimvRrValue = 20,
      vsimvIeValue = 51,
      vsimvPeepValue = 10,
      vsimvVtValue = 300,
      vsimvPsValue = 25,
      vsimvPlateauValue = 20,
      vsimvPcMaxValue = 100,
      vsimvFio2Value = 21,
      vsimvFlowValue = 100;

  int vsimvmaxValue = 30, vsimvminValue = 1, vsimvdefaultValue = 20;
  String vsimvparameterName = "RR", vsimvparameterUnits = "bpm";

  bool prvcApnea = true;
  int prvcApneaValue = 30;

  // int prvcmaxValue = 60, prvcminValue = 1, prvcdefaultValue = 30;
  // String prvcparameterName = "Apnea", prvcparameterUnits = "s";

  bool pccmvRR = true, pccmvRRChanged = false;
  bool pccmvIe = false, pccmvIeChanged = false;
  bool pccmvPeep = false, pccmvPeepChanged = false;
  bool pccmvPc = false, pccmvPcChanged = false;
  bool pccmvFio2 = false, pccmvFio2Changed = false;
  bool pccmvVtmin = false, pccmvVtminChanged = false;
  bool pccmvPplateau = false, pccmvPplateauChanged = false;
  bool pccmvFlow = false, pccmvFlowChanged = false;
  bool pccmvTih = false, pccmvValueChanged = false;

  int pccmvRRValue = 20,
      pccmvIeValue = 51,
      pccmvPeepValue = 10,
      pccmvPcValue = 25,
      pccmvFio2Value = 21,
      pccmvVtminValue = 0,
      pccmvPplateauValue = 20,
      pccmvTihValue = 50,
      pccmvRRValueTemp = 20,
      pccmvIeValueTemp = 51,
      pccmvPeepValueTemp = 10,
      pccmvPcValueTemp = 30,
      pccmvFio2ValueTemp = 21,
      pccmvVtminValueTemp = 100,
      pccmvTihValueTemp = 50;
  int pccmvFlowValue = 100;

  int pccmvmaxValue = 60, pccmvminValue = 1, pccmvdefaultValue = 12;
  String pccmvparameterName = "RR", pccmvparameterUnits = "bpm";

  bool vccmvRR = true;
  bool vccmvIe = false;
  bool vccmvPeep = false;
  bool vccmvPplateau = false;
  bool vccmvPcMax = false;
  bool vccmvFio2 = false;
  bool vccmvVt = false;
  bool vccmvFlow = false;
  bool vccmvTih = false;

  int vccmvRRValue = 20,
      vccmvIeValue = 51,
      vccmvPeepValue = 10,
      vccmvPplateauValue = 20,
      vccmvPcMaxValue = 100,
      vccmvFio2Value = 21,
      vccmvVtValue = 300,
      vccmvTihValue = 50;
  int vccmvFlowValue = 100;

  int vccmvmaxValue = 60, vccmvminValue = 1, vccmvdefaultValue = 20;
  String vccmvparameterName = "RR", vccmvparameterUnits = "bpm";

  bool cpappItrig = false,
      cpappPeep = true,
      cpappFio2 = false,
      cpappAtime = false,
      cpappBackupRr = false,
      cpappEtrig = false,
      cpappPc = false;

  int cpappItrigValue = 3,
      cpappPeepValue = 10,
      cpappcpappalue = 25,
      cpappFio2Value = 21,
      cpappBackupRrValue = 20,
      cpappAtimeValue = 10,
      cpappPcValue = 25;

  int cpappmaxValue = 25, cpappminValue = 0, cpappdefaultValue = 10;
  String cpappparameterName = "CPAP", cpappparameterUnits = "cmH\u2082O";

  int bipapmaxValue = 30;
  int bipapminValue = 0;
  String bipapparameterName = "EPAP";
  String bipapparameterUnits = "";
  bool bipapEpap = true;
  bool bipapItrig = false;
  bool bipapFio2 = false;
  bool bipapIpap = false;

  int bipapEpapValue = 10,
      bipapItrigValue = 3,
      bipapfio2Value = 21,
      bipapIpapValue = 25;

  List<int> listCheckLength = new List();
  TextEditingController _osensorRange = TextEditingController();
  // TextEditingController _osensorLife = TextEditingController();
  String _odate;
  String _osensorType, _osensorLife;
  List<String> _sensorTypes = ['ITG', 'Honeywell'];
  String alarmMessage = "";
  List<int> modeWriteList = [];
  List<int> writePlay = [];
  int lungImage = 0;
  double pressurePointsYAxisMax = 100.0;
  int fio2DisplayParameter = 0,
      mapDisplayValue = 0,
      ieDisplayValue = 0,
      cdisplayParameter = 0,
      rrDisplayValue = 0;
  String ioreDisplayParamter = "I/E",
      amsDisplayParamter = "",
      displayApneaTime = "";
  bool playOnEnabled = false, powerOnEnabled = false, _playButtonbool;
  var dbHelper = DatabaseHelper();
  var dbHelpera = ADatabaseHelper();
  var dbCounter = CounterDatabaseHelper();
  String lastRecordTime;
  String priorityNo, alarmActive;
  double pplateauDisplay;
  int tempDisplay = 0,
      respiratoryFlag = 0,
      leakVolumeDisplay = 0,
      peakFlowDisplay = 0,
      spontaneousDisplay = 0;
  int missedCounter = 0, totalCounter = 0;
  int minRrtotal = 1,
      maxRrtotal = 70,
      minvte = 0,
      maxvte = 2400,
      minppeak = 0,
      maxppeak = 100,
      minpeep = 0,
      maxpeep = 40,
      minfio2 = 21,
      maxfio2 = 100,
      maxmv = 25,
      minmv = 0,
      maxlv = 100,
      minlv = 0;
  int faultBatteryStatus = 0;

  bool inhalationFlag = true;
  bool inhalationFlagP = true;

  double prePressureValue = 0.0;
  double currentPressureValue = 0.0;
  double presVolumeValue = 0.0;
  double currentVolumeValue = 0.0;
  double presFlowValue = 0.0;
  double currentFlowValue = 0.0;

  int alarmmaxValue = 100, alarmminValue = 1;
  String alarmparameterName = "RR Total";

  bool alarmRR = false,
      alarmVte = false,
      alarmPpeak = false,
      alarmpeep = false,
      alarmFio2 = false,
      alarmmv = false,
      alarmlv = false;

  bool alarmRRchanged = false,
      alarmVtechanged = false,
      alarmPpeakchanged = false,
      alarmpeepchanged = false,
      alarmFio2changed = false,
      alarmConfirmed = true,
      alarmvchanged = false,
      alarmlvchanged = false;

  String patientId,
      patientName,
      patientGender,
      patientAge,
      patientHeight,
      patientWeight;

  bool newTreatmentEnabled = false, powerButtonEnabled = false;
  bool isplaying = false,
      _buttonPressed = false,
      _buttonPressedE = false,
      respiratoryEnable = false,
      insExpButtonEnable = false;
  int previousCode = 101,
      presentCode,
      vteMinValue = 0,
      alarmPrevCounter = 101,
      alarmCounter;
  int cc = 0;
  String checkTempData;
  int powerIndication = 0, batteryPercentage, batteryStatus = 0;
  String sendBattery;
  List<int> listTemp = [];
  bool testingText = false;
  String textText = "Selftest starting..";
  String selfTexttext = "";
  int timerCount = 17;
  var o2pressuresensor = 0,
      mtpressuresensor = 0,
      exhalationflowsensor = 0,
      inhalationflowsensor = 0,
      exhalationpressure = 0,
      inhalationpressure = 0,
      o2sensor = 0,
      inhalationvalve = 0,
      exhalationvalve = 0,
      ventvalue = 0,
      safetyvalue1 = 0,
      safetyvalue2 = 0,
      mainpower = 0,
      battery = 0,
      communication = 0,
      compressor = 0,
      blender = 0,
      checkOfffset = 0,
      exitSelfTest = 0;
  var checkO2CalibrationValue;
  List<int> finalListSend = [];
  List<int> acknowledgeData = [];
  int acknowReceivedValue;
  int ackPacket;
  bool invasiveEnabled = true;
  bool noninvasiveEnabled = false;
  bool lockEnabled = true;
  List<int> savedList = [];
  bool turnoffSendingboolI = false;
  bool turnoffSendingboolE = false;
  String alarmDisplayError = "";
  bool alarmDisplayErrorEnabled = false;
  bool playpauseButtonEnabled = false;

  bool _setValuesonClick = true;
  bool _isdatasendSuccess = true;
  // int faultBatteryStatus = 0;

  int receivedItrig = 0,
      receivedpeep = 0,
      receivedps = 0,
      receivedfio2 = 0,
      receivedapneaTime = 0,
      receivedi = 0,
      receivede = 0,
      receivedti = 0,
      receivedbackuprr = 0,
      receivedvvttmin = 0,
      receivedvtmax = 0,
      receivedminte = 0,
      receivedpc = 0,
      receivedrr = 0,
      receivedvt = 0,
      receivedpcmin = 0,
      receivedpcmax = 0,
      receivedo2pressure = 0,
      receivedtankpressure = 0,
      receivedinhalationblowercommand = 0,
      receivedexhalatioblowercommand = 0,
      dreceivedfio2 = 0,
      receivedvti = 0,
      receivedvte = 0,
      receivedflatprop = 0,
      receivedo2voltage = 0,
      receivedthold = 0,
      receivedoperatingModeR = 0;

  String assistStatus = "OFF";
  var batteryforceCharge = 0;
  bool batterChargingScreen = false;
  bool _pipDataScreen = false;
  double postiveNumber, negativeNumber;
  bool bpostive = false, bnegative = true;
  bool pItrig = true;
  bool pControl = true;
  int check1 = 0, check2 = 0;
  bool _getPointsData = false;
  bool _isLoopGraph = false;

  List<Widget> _temporarySetValue = [];
  List<double> _pressureList = [];
  List<double> _volumeList = [];
  List<double> _flowList = [];
  bool breathCycle = false;
  bool breathCycle1 = false;

  List<double> tempList = [];
  List<double> temp1List = [];
  List<double> temp3List = [];
  List<double> l1 = [];
  List<double> l2 = [];
  bool _firstLoop = true, _secondLoop = false, _thirdLoop = false;
  int pressureMax = 0, volumeMax = 0, flowIMax = 0, flowEMax = 0;
  int selfTestCounter = 0;

  Future<bool> _connectTo(device) async {
    list.clear();

    // pressurePoints.clear();
    // volumePoints.clear();
    // flowPointsPsv.clear();

    if (_subscription != null) {
      _subscription.cancel();
      _subscription = null;
    }

    if (_transaction != null) {
      _transaction.dispose();
      _transaction = null;
    }

    if (_port != null) {
      _port.close();
      _port = null;
    }

    if (device == null) {
      _deviceId = null;
      setState(() {
        _status = "Disconnected";
      });
    }

    _port = await device.create();
    if (!await _port.open()) {
      setState(() {
        _status = "Failed to open port";
      });
    }

    _deviceId = device.deviceId;
    await _port.setDTR(false);
    await _port.setRTS(false);
    await _port.setPortParameters(
        57600, UsbPort.DATABITS_8, UsbPort.STOPBITS_1, UsbPort.PARITY_NONE);

    Transaction<Uint8List> transaction =
        Transaction.terminated(_port.inputStream, Uint8List.fromList([127]));

    transaction.stream.listen((event) async {
      // Fluttertoast.showToast(msg: event.toString());
      await serializeEventData(event);
    });
    setState(() {
      _status = "Connected";
    });
  }

  _getPorts() async {
    countergetPorts = countergetPorts + 1;
    setState(() {
      countergetPorts = countergetPorts + 1;
      if (countergetPorts == 4) {
        getportsData = true;
      }
    });

    _ports = [];
    List<UsbDevice> devices = await UsbSerial.listDevices();
    if (devices.isEmpty) {
      // getData();
      setState(() {
        _status = "Disconnected";
        usbConnected = false;
      });
      // Fluttertoast.showToast(msg: _status);
    } else {}
    // Fluttertoast.showToast(msg: devices[0].toString());
    _connectTo(devices[0]);
  }

  int counter = 0, counterlength = 0;
  var presentTime;
  bool playing = false;
  String i = "1.0", e = "3.0";
  int _start = 30;
  bool _loopActive = false;
  int timerCounter = 00;
  int displayTemperature = 0;
  int globalCounter = 0, globalCounterNo = 1;
  int countergetPorts = 0;
  List<Point> datapv = [Point(0.0, 0.0)];
  List<Point> datapf = [Point(0.0, 0.0)];
  List<Point> datavf = [Point(0.0, 0.0)];
  List<Point> _plotDataPv = [Point(0.0, 0.0)];
  List<Point> _plotDataPf = [Point(0.0, 0.0)];
  List<Point> _plotDataVf = [Point(0.0, 0.0)];
  List<Offset> offs = [];
  String o2Time = "";
  // [Offset(50,20),Offset(60,40),Offset(80,60),Offset(100,80),Offset(50,80),Offset(50,60),Offset(50,40),Offset(50,20)];

  // getNoTimes() async {
  //   await sleep(Duration(seconds: 6));
  //   preferences =await SharedPreferences.getInstance();
  //   noTimes = preferences.getInt("noTimes");
  // }

  counterData() async {
    var data = await dbCounter.getCounterNo();
    // // // print(data);
    if (data.isEmpty) {
      globalCounter = globalCounter + 1;
      dbCounter.saveCounter(CounterValue(globalCounter.toString()));
      setState(() {
        globalCounterNo = globalCounter;
      });
    } else if (data.isNotEmpty) {
      globalCounter = int.tryParse(data[0].counterValue.toString());
      globalCounter = globalCounter + 1;
      dbCounter.updateCounterNo(globalCounter.toString());
      setState(() {
        globalCounterNo = globalCounter;
      });
    }
  }

  // Random random = new Random();
  // List<GraphPoint> pPoints = [GraphPoint(x: 0, y: 0)];

  bool _isFlagTest = false;
  bool getportsData = false;
  TabController _controller;
  var varia = 0;
  var brethI;
  @override
  initState() {
    super.initState();
    var now = new DateTime.now();
    y = now.year;
    m = now.month;
    d = now.day;
    lastRecordTime = DateFormat("yyyy-MM-dd HH:mm:ss").format(now).toString();
    counterData();

    getData();
    // getNoTimes();
    UsbSerial.usbEventStream.listen((UsbEvent event) {
      _getPorts();
    });
    _getPorts();

    _timer = Timer.periodic(Duration(minutes: 20), (timer) async {
      clearRamMemory();
    });

    _timer1 = Timer.periodic(Duration(milliseconds: 150), (timer) async {
      if (_status == "Connected" && getOpertingMode == true) {
        setState(() {
          if (pressurePoints.length >= 48) {
            pressurePoints.removeAt(0);
            pressurePoints.add(tempfPressure);
          } else {
            pressurePoints.add(tempfPressure);
          }

          if (volumePoints.length >= 48) {
            volumePoints.removeAt(0);
            volumePoints.add(temp1fVolume);
          } else {
            volumePoints.add(temp1fVolume);
          }

          if (flowPoints.length >= 48) {
            flowPoints.removeAt(0);
            flowPoints.add(temp3fFlow);
          } else {
            flowPoints.add(temp3fFlow);
          }
        });
      }
    });

    _timer2 = Timer.periodic(Duration(seconds: 1), (timer) async {
      // checkPortAvail();
      if (_status != "Connected") {
        // Fluttertoast.showToast(msg: "Dis");
        var now = new DateTime.now();
        setState(() {
          presentTime = DateFormat("yyyy-MM-dd HH:mm:ss").format(now);
          DateTime date1 =
              DateFormat("yyyy-MM-dd HH:mm:ss").parse(lastRecordTime);
          DateTime date2 = DateFormat("yyyy-MM-dd HH:mm:ss").parse(presentTime);
          var differnceD = date2.difference(date1);
          if (differnceD.inSeconds > 5) {
            setState(() {
              respiratoryEnable = false;
              insExpButtonEnable = false;
              batterChargingScreen = false;
              sendSoundOff();
              powerButtonEnabled = true;
              presentCode = 101;
              previousCode = 106;
              exitSelfTest = 1;
              textText = "";
              check1 = 1;
              check2 = 1;
              // pipValue = 0;
              // cc = 0;
              // mvValue = 0;
              // vteValue = 0;
              // peepDisplayValue = 0;
              // rrtotalValue = 0;
              // mapDisplayValue = 0;
              // fio2DisplayParameter = 0;
              // pressurePoints.clear();
              // volumePoints.clear();
              // flowPoints.clear();
            });
            // if (playOnEnabled) {
            //   if (mounted) {
            //     setState(() {
            //       pipValue = 0;
            //       mvValue = 0;
            //       vteValue = 0;
            //       fio2DisplayParameter = 0;
            //       pressurePoints = [];
            //       volumePoints = [];
            //       flowPoints = [];
            //     });
            //   }
            // }
            // Fluttertoast.showToast(msg: "Timeout.");
            // pipValue = 0;
            // mvValue = 0;
            // vteValue = 0;
            // fio2DisplayParameter = 0;
            // pressurePoints = [];
            // volumePoints = [];
            // flowPoints = [];
          } else {
            setState(() {
              powerButtonEnabled = false;
            });
          }
        });
      } else {
        setState(() {
          exitSelfTest = 0;
        });
        // if (_isFlagTest == false &&
        //     check1 == 1 &&
        //     check2 == 1 &&
        //     operatinModeR == 0) {
        //   setState(() {
        //     exitSelfTest = 0;
        //     selfTestCounter = selfTestCounter + 1;
        //     // _isFlagTest = true;
        //   });
        //   if (selfTestCounter == 5) {
        //     setState(() {
        //       preferences.setBool("_isFlagTest", true);
        //       preferences.setBool("calli", false);
        //       _isFlagTest = true;
        //       // textText = "";
        //       selftestRun(1);
        //     });
        //   }
        // }
      }
    });
    _timer3 = Timer.periodic(Duration(milliseconds: 60000), (timer) {
      var now = DateTime.now();
      if (_status == "Connected") {
        shutdownChannel.invokeMethod('getBatteryLevel').then((result) async {
          counter = counter + 1;
          List<int> resList = [0, 20, 0, 15];
          if (counter <= 250) {
            setState(() {
              resList.add((result & 0x00FF));
              resList.add(counter);
              resList.add((now.year & 0xFF00) >> 8);
              resList.add(now.year & 0xFF);
              resList.add(now.month);
              resList.add(now.day);
              resList.add(now.hour);
              resList.add(now.minute);
              resList.add(now.second);
            });
            if (_status == "Connected") {
              await sendDataUsbConnection(resList, 2);
            }
          } else {
            setState(() {
              counter = 0;
            });
          }
        });
      }
    });
  }

  // Future<File> _writeStringToTextFile(
  //   String presetnTime,
  //   String pipValue,
  //   String rrValue,
  //   String s,
  // ) async {
  //   final file = await _localFile;
  //   return file.writeAsString(
  //       '$presetnTime $pipValue $rrValue $s $operatinModeR\n',
  //       mode: FileMode.append);
  // }

  Future<File> _writeStringToTextFile(String dataList) async {
    var now = new DateTime.now();
    var dateTimeWrite =
        DateFormat("yyyy-MM-dd HH:mm:ss").format(now).toString();
    final file = await _localFile;
    return file.writeAsString('$dateTimeWrite => $dataList \n',
        mode: FileMode.append);
  }

  checkPortAvail() async {
    List<UsbDevice> devices = await UsbSerial.listDevices();
    if (devices.isEmpty) {
      setState(() {
        _status = "Disconnected";
        usbConnected = false;
      });
    }
  }

  selftestRun(int res) {
    List<int> objSelfTestData = [];
    setState(() {
      if (res == 1) {
        textText = "Selftest starting..";
      } else {
        textText = "";
      }
      o2pressuresensor = 0;
      mtpressuresensor = 0;
      exhalationflowsensor = 0;
      inhalationflowsensor = 0;
      exhalationpressure = 0;
      inhalationpressure = 0;
      o2sensor = 0;
      inhalationvalve = 0;
      exhalationvalve = 0;
      ventvalue = 0;
      mainpower = 0;
      battery = 0;
      communication = 0;
      compressor = 0;
      blender = 0;
      checkOfffset = 0;
      sendSoundOff();
      if (res == 2) {
        setState(() {
          selfTexttext = "Self";
          selfTestingEnabled = true;
        });
        objSelfTestData = [0, 20, 0, 16, 0, 2, 2];
        sendDataUsbConnection(objSelfTestData, 2);
      } else if (res == 3) {
        setState(() {
          selfTexttext = "Full";
        });
        objSelfTestData = [0, 20, 0, 16, 0, 3];
        sendDataUsbConnection(objSelfTestData, 2);
        selfTestingEnabled = true;
      } else if (res == 1) {
        setState(() {
          selfTexttext = "Self";
          selfTestingEnabled = true;
        });
        objSelfTestData = [0, 20, 0, 16, 0, 2, 1];
        sendDataUsbConnection(objSelfTestData, 2);
      }
    });
  }

  Future<File> get _localFile async {
    final path = await _localPath;
    return File('$path/logventilator.txt');
  }

  Future<String> get _localPath async {
    final directory = await getApplicationDocumentsDirectory();
    return directory.path;
  }

  saveData(VentilatorOMode data, String patientId) async {
    // // // // print("data saving id : " + patientId);
    await dbHelper.save(data);
  }

  Future<void> _sendShutdown() async {
    try {
      var result = await shutdownChannel.invokeMethod('sendShutdowndevice');
      // // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> _playMusicVHigh() async {
    setState(() {
      isplaying = true;
    });
    try {
      var result = await shutdownChannel.invokeMethod('sendPlayAudioStartvH');
      // // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  //_playMusicVHigh

  Future<void> _playMusicHigh() async {
    setState(() {
      isplaying = true;
    });
    try {
      var result = await shutdownChannel.invokeMethod('sendPlayAudioStartH');
      // // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> _playMusicMedium() async {
    setState(() {
      isplaying = true;
    });
    try {
      var result = await shutdownChannel.invokeMethod('sendPlayAudioStartM');
      // // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> _playMusicLower() async {
    setState(() {
      isplaying = true;
    });
    try {
      var result = await shutdownChannel.invokeMethod('sendPlayAudioStartL');
      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> _stopMusic() async {
    setState(() {
      isplaying = true;
    });
    try {
      var result = await shutdownChannel.invokeMethod('sendPlayAudioStop');
      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> sendSoundOn() async {
    try {
      var result = await shutdownChannel.invokeMethod('sendsoundon');
      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> sendSoundOff() async {
    try {
      var result = await shutdownChannel.invokeMethod('sendsoundoff');
      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> turnOffScreen() async {
    try {
      var result = await shutdownChannel.invokeMethod('turnOffScreen');
      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> clearRamMemory() async {
    try {
      var result = await shutdownChannel.invokeMethod('clearRam');
      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  Future<void> turnOnScreen() async {
    try {
      Screen.setBrightness(1.0);
      Screen.keepOn(true);
      var result = await shutdownChannel.invokeMethod('turnOnScreen');

      // // // print(result);
    } on PlatformException catch (e) {
      // // // print(e);
    }
  }

  // getCrcData(List<int> obj) async {
  //   // obj.clear();
  //   int length = obj.length;
  //   // int n = 0, iCRC = 0xFFFF, i = 0;

  //   // while (n < length) {
  //   //   iCRC = iCRC ^ obj[n];
  //   //   i = 0;
  //   //   while (i < 8) {
  //   //     if ((iCRC & 0X0001) != 0) {
  //   //       iCRC = iCRC >> 1;
  //   //       iCRC = iCRC ^ 40961;
  //   //     } else
  //   //       iCRC = iCRC >> 1;
  //   //     i++;
  //   //   }
  //   //   n++;
  //   // }

  //   // obj.insert(length, iCRC & 0xFF);
  //   // obj.insert(length + 1, (iCRC & 0xFF00) >> 8);

  //   // obj.insert(length + 1, 0x7F);
  //   // // // print(obj.toString());

  //   if (_status == "Connected") {
  //     // Fluttertoast.showToast(msg: obj.toString());
  //     await _port.write(Uint8List.fromList(obj));
  //     setState(() {
  //       // modeWriteList.clear();
  //     });
  //   }
  // }

  void _increaseCounterWhilePressed() async {
    if (_buttonPressed == false) {
      writeRespiratoryPauseData(0);
    }
    // writeRespiratoryPauseData();
    // make sure that only one loop is active
    if (_loopActive) return;
    _loopActive = true;
    while (_buttonPressed) {
      if (turnoffSendingboolI == false) {
        writeRespiratoryPauseData(1);
      }
      // do your thing
      if (timerCounter <= 29) {
        setState(() {
          timerCounter++;
        });
      }
      if (timerCounter == 30) {
        setState(() {
          _buttonPressed = false;
        });
      }
      // wait a bit
      await Future.delayed(Duration(seconds: 1));
    }

    _loopActive = false;
  }

  void _increaseCounterWhilePressedE() async {
    if (_buttonPressedE == false) {
      writeRespiratoryPauseData(0);
    }
    // writeRespiratoryPauseData();
    // make sure that only one loop is active
    if (_loopActive) return;
    _loopActive = true;
    while (_buttonPressedE) {
      if (turnoffSendingboolE == false) {
        writeRespiratoryPauseData(2);
      }
      // do your thing
      if (timerCounter <= 29) {
        setState(() {
          timerCounter++;
        });
      }
      if (timerCounter == 30) {
        setState(() {
          _buttonPressedE = false;
        });
      }
      // wait a bit
      await Future.delayed(Duration(seconds: 1));
    }

    _loopActive = false;
  }

  writeRespiratoryPauseData(int data) async {
    List<int> resList = [];
    setState(() {
      resList.add(0);
      resList.add(20);
      resList.add(0);
      resList.add(13);
      resList.add((data & 0x00FF));
    });

    sendDataUsbConnection(resList, 2);
  }

  Future<dynamic> getCrc(List<int> obj, length) async {
    // // print(length);
    int index = length;
    int i = 0;
    int crcData = 0;
    int uiCrc = 0, r = 0;
    int temp = 0;

    while (index-- > 0) {
      r = ulCrc16Table[uiCrc & 0xF];
      uiCrc = ((uiCrc >> 4) & 0x0FFF);
      temp = obj[i];
      uiCrc = (uiCrc ^ r ^ ulCrc16Table[temp & 0xF]);
      r = ulCrc16Table[uiCrc & 0xF];
      uiCrc = ((uiCrc >> 4) & 0x0FFF);
      uiCrc = (uiCrc ^ r ^ ulCrc16Table[(temp >> 4) & 0xF]);
      i++;
    }
    // // print(uiCrc);
    return uiCrc;
  }

  Future checkCrc(List<int> obj, length, int resV) async {
    int index = length - 2;
    int i = 0;
    int crcData = 0;
    int uiCrc = 0, r = 0;
    int temp = 0;

    while (index-- > 0) {
      r = ulCrc16Table[uiCrc & 0xF];
      uiCrc = ((uiCrc >> 4) & 0x0FFF);
      temp = obj[i];
      uiCrc = (uiCrc ^ r ^ ulCrc16Table[temp & 0xF]);
      r = ulCrc16Table[uiCrc & 0xF];
      uiCrc = ((uiCrc >> 4) & 0x0FFF);
      uiCrc = (uiCrc ^ r ^ ulCrc16Table[(temp >> 4) & 0xF]);
      i++;
    }

    crcData = obj[length - 1] * 256 + obj[length - 2];
    if (crcData == uiCrc) {
      // if (resV == 1) {
      await extractingData(obj);
      // } else if (resV == 2) {
      //   extractingBreathData(obj);
      // }
    } else if (crcData != uiCrc) {
      setState(() {
        missedCounter = missedCounter + 1;
      });
      obj.clear();
    }
  }

  _getTime() {
    final DateTime now = DateTime.now();
    final String formattedDateTime = _formatDateTime(now);
    if (mounted) {
      setState(() {
        dateandTime = formattedDateTime;
      });
    }
  }

  String _formatDateTime(DateTime dateTime) {
    return DateFormat('hh:mm:ss').format(dateTime);
  }

  @override
  void dispose() async {
    _subscription.cancel();
    _transaction.dispose();
    _timer.cancel();
    _timer1.cancel();
    _timer2.cancel();
    _timer3.cancel();
    super.dispose();
  }

  bool _isenableRespiratoryEnabled = false;

  getData() async {
    Screen.setBrightness(1.0);
    Screen.keepOn(true);

    preferences = await SharedPreferences.getInstance();
    setState(() {
      var otime = preferences.getString('o2time');
      if (otime == null) {
        o2Time = "--" + "/" + "--" + "/" + "----";
      } else {
        o2Time = otime;
      }

      _isenableRespiratoryEnabled = preferences.getBool("_iere");

      var zeros = preferences.getBool('zeros');
      int currenValue = 0;
      if (zeros == true) {
        pressurePoints.clear();
        flowiPoints.clear();
        flowePoints.clear();
        volumePoints.clear();
        // ignore: unnecessary_statements
        for (currenValue; currenValue < 250;) {
          pressurePoints.add(0);
          flowiPoints.add(0);
          flowePoints.add(0);
          flowPoints.add(0);
          volumePoints.add(0);
          // print(i.toString());
          currenValue = currenValue + 1;
        }
        preferences.setBool('zeros', false);
      }
      check1 = preferences.getInt('check1');
      check2 = preferences.getInt('check2');
      var checkData = preferences.getString('checkMode');
      // if (_status == "Connected") {
      callibrationEnabled = preferences.getBool("calli");
      // }v
      inhalationFlag = preferences.getBool('inhalationFlag');
      inhalationFlagP = preferences.getBool('inhalationFlagP');

      // if (first == true) {
      //   countDownTimer1();
      // }
      _isFlagTest = preferences.getBool('_isFlagTest');
      // _setValuesonClick= preferences.getBool('_setValuesonClick');
      // modeName = preferences.getString("mode");
      rrValue = preferences.getInt("rr");
      ieValue = preferences.getInt("ie");
      // i = preferences.getString("i");
      // e = preferences.getString("e");
      peepValue = preferences.getInt("peep");
      psValue = preferences.getInt("ps");
      pcValue = preferences.getInt("pc");
      // Fluttertoast.showToast(msg: pcValue.toString());
      vtValue = preferences.getInt("vt");
      // vteValue = preferences.getInt("vte");
      fio2Value = preferences.getInt("fio2");
      itrigValue = preferences.getInt("itrig");
      atimeValue = preferences.getInt("atime");
      tipsvValue = preferences.getInt("ti");
      maxvte = _isTab10 ? 3000 : 2400;
      if (psimvEnabled == true) {
        // psimvPsValue = psValue;
        preferences.setInt("psimvPsValue", psValue);
      } else if (psvEnabled == true) {
        preferences.setInt("psvPsValue", psValue);
      }

      // print(teValue);

      // // // print(teValue.toString());
      paw = preferences.getInt("paw");
      // mvValuea = 0;
      rrtotalValue = preferences.getInt("rrtotal");
      patientId = preferences.getString("pid");
      patientName = preferences.getString("pname");
      patientGender = preferences.getString("pgender");
      patientAge = preferences.getString("page");
      patientHeight = preferences.getString("pheight");
      patientWeight = preferences.getString("pweight");
      playOnEnabled = preferences.getBool('play');
      List<String> lsaveListTemp = preferences.getStringList("saveList");
      savedList.clear();
      if (lsaveListTemp != null) {
        savedList = lsaveListTemp.map((i) => int.parse(i)).toList();
        setState(() {
          modeWriteList = savedList;
        });
      }
      if (patientWeight == null || patientWeight == "") {
        patientWeight = "133";
      }
      if (i == null) {
        i = "0.0";
      }
      if (e == null) {
        e = "0.0";
      }
      if (vteValuea == null) {
        vteValuea = 0;
      }

      minRrtotal = preferences.getInt('minrr');
      maxRrtotal = preferences.getInt('maxrr');
      minvte = preferences.getInt('minvte');
      maxvte = preferences.getInt('maxvte');
      minppeak = preferences.getInt('minppeak');
      maxppeak = preferences.getInt('maxppeak');
      minpeep = preferences.getInt('minpeep');
      maxpeep = preferences.getInt('maxpeep');
      minfio2 = preferences.getInt('minfio2');
      maxfio2 = preferences.getInt('maxfio2');
      minmv = preferences.getInt('minmv');
      maxmv = preferences.getInt('maxmv');
      minlv = preferences.getInt('minlv');
      maxlv = preferences.getInt('maxlv');
      playpauseButtonEnabled = preferences.getBool('playpauseButtonEnabled');
      calculateTiTeValue(rrValue, double.tryParse(i), double.tryParse(e));

      pacvFio2Value = preferences.getInt('pacvFio2Value');
      pccmvFio2Value = preferences.getInt('pccmvFio2Value');
      vccmvFio2Value = preferences.getInt('vccmvFio2Value');
      vacvFio2Value = preferences.getInt('vacvFio2Value');
      psimvFio2Value = preferences.getInt('psimvFio2Value');
      vsimvFio2Value = preferences.getInt('vsimvFio2Value');
      psvFio2Value = preferences.getInt('psvFio2Value');
      prvcFio2Value = preferences.getInt('prvcFio2Value');

      pControl = preferences.getBool("pControl");

      if (checkData == "0") {
      } else if (checkData == "pacv") {
        setState(() {
          pacvEnabled = true;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        pacvItrigValue = preferences.getInt('pacvItrigValue');
        pacvRrValue = preferences.getInt('pacvRrValue');
        pacvIeValue = preferences.getInt('pacvIeValue');
        pacvPeepValue = preferences.getInt('pacvPeepValue');
        pacvPcValue = preferences.getInt('pacvPcValue');
        pacvPplateauValue = preferences.getInt('pacvPplateauValue');
        pacvFlowValue = preferences.getInt('pacvFlowValue');
        pacvFio2Value = preferences.getInt('pacvFio2Value');
        pacvFlowRampValue = preferences.getInt('pacvFlowRampValue');
      } else if (checkData == "pccmv") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = true;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        // pccmvEnabled = true;
        pccmvRRValue = preferences.getInt('pccmvRRValue');
        pccmvIeValue = preferences.getInt('pccmvIeValue');
        pccmvPeepValue = preferences.getInt('pccmvPeepValue');
        pccmvPcValue = preferences.getInt('pccmvPcValue');
        pccmvFio2Value = preferences.getInt('pccmvFio2Value');
        pccmvVtminValue = preferences.getInt('pccmvVtminValue');
        pccmvPplateauValue = preferences.getInt('pccmvPplateauValue');
        pccmvTihValue = preferences.getInt('pccmvTihValue');
        pccmvFlowValue = preferences.getInt('pccmvFlowValue');
      } else if (checkData == "vccmv") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = true;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        // vccmvEnabled = true;
        vccmvRRValue = preferences.getInt('vccmvRRValue');
        vccmvIeValue = preferences.getInt('vccmvIeValue');
        vccmvPeepValue = preferences.getInt('vccmvPeepValue');
        vccmvPplateauValue = preferences.getInt('vccmvPplateauValue');
        vccmvPcMaxValue = preferences.getInt('vccmvPcMaxValue');
        vccmvFio2Value = preferences.getInt('vccmvFio2Value');
        vccmvVtValue = preferences.getInt('vccmvVtValue');
        vccmvTihValue = preferences.getInt('vccmvTihValue');
        vccmvFlowValue = preferences.getInt('vccmvFlowValue');
      } else if (checkData == "vacv") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = true;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        // vacvEnabled = true;
        vacvItrigValue = preferences.getInt('vacvItrigValue');
        vacvRrValue = preferences.getInt('vacvRrValue');
        vacvIeValue = preferences.getInt('vacvIeValue');
        vacvPeepValue = preferences.getInt('vacvPeepValue');
        vacvVtValue = preferences.getInt('vacvVtValue');
        vacvPplateauValue = preferences.getInt('vacvPplateauValue');
        vacvPcMaxValue = preferences.getInt('vacvPcMaxValue');
        vacvFio2Value = preferences.getInt('vacvFio2Value');
        vacvFlowValue = preferences.getInt('vacvFlowValue');
      } else if (checkData == "psimv") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = true;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        psimvItrigValue = preferences.getInt('psimvItrigValue');
        psimvRrValue = preferences.getInt('psimvRrValue');
        psimvPsValue = preferences.getInt('psimvPsValue');
        psimvIeValue = preferences.getInt('psimvIeValue');
        psimvPeepValue = preferences.getInt('psimvPeepValue');
        psimvPcValue = preferences.getInt('psimvPcValue');
        psimvPplateauValue = preferences.getInt('psimvPplateauValue');
        psimvVtMaxValue = preferences.getInt('psimvVtMaxValue');
        psimvFio2Value = preferences.getInt('psimvFio2Value');
        psimvFlowValue = preferences.getInt('psimvFlowValue');
      } else if (checkData == "vsimv") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = true;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        vsimvItrigValue = preferences.getInt('vsimvItrigValue');
        vsimvRrValue = preferences.getInt('vsimvRrValue');
        vsimvIeValue = preferences.getInt('vsimvIeValue');
        vsimvPeepValue = preferences.getInt('vsimvPeepValue');
        vsimvVtValue = preferences.getInt('vsimvVtValue');
        vsimvPsValue = preferences.getInt('vsimvPsValue');
        vsimvPlateauValue = preferences.getInt('vsimvPlateauValue');
        vsimvPcMaxValue = preferences.getInt('vsimvPcMaxValue');
        vsimvFio2Value = preferences.getInt('vsimvFio2Value');
        vsimvFlowValue = preferences.getInt('vsimvFlowValue');
      } else if (checkData == "psv") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = true;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        // psvEnabled = true;
        psvItrigValue = preferences.getInt('psvItrigValue');
        psvPeepValue = preferences.getInt('psvPeepValue');
        psvIeValue = preferences.getInt('psvIeValue');
        psvPsValue = preferences.getInt('psvPsValue');
        psvTiValue = preferences.getInt('psvTiValue');
        psvPlateauValue = preferences.getInt('psvPlateauValue');
        psvFlowValue = preferences.getInt('psvFlowValue');
        psvFio2Value = preferences.getInt('psvFio2Value');
        psvAtimeValue = preferences.getInt('psvAtimeValue');
        psvEtrigValue = preferences.getInt('psvEtrigValue');
        psvBackupRrValue = preferences.getInt('psvBackupRrValue');
        psvMinTeValue = preferences.getInt('psvMinTeValue');
        psvPcValue = preferences.getInt('psvPcValue');
        psvVtValue = preferences.getInt('psvVtValue');
      } else if (checkData == "prvc") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = true;
          cpapEnabled = false;
          hfnoEnabled = false;
        });
        // prvcEnabled = true;
        prvcItrigValue = preferences.getInt('prvcItrigValue');
        prvcRrValue = preferences.getInt('prvcRrValue');
        prvcIeValue = preferences.getInt('prvcIeValue');
        prvcPeepValue = preferences.getInt('prvcPeepValue');
        prvcVtValue = preferences.getInt('prvcVtValue');
        prvcPlateauValue = preferences.getInt('prvcPlateauValue');
        prvcPcMaxValue = preferences.getInt('prvcPcMaxValue');
        prvcFio2Value = preferences.getInt('prvcFio2Value');
        prvcFlowValue = preferences.getInt('prvcFlowValue');
      } else if (checkData == "cpap") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = true;
          hfnoEnabled = false;
        });
        // prvcEnabled = true;
        cpappItrigValue = preferences.getInt('cpappItrigValue');
        cpappPeepValue = preferences.getInt('cpappPeepValue');
        cpappFio2Value = preferences.getInt('cpappFio2Value');
        cpappBackupRrValue = preferences.getInt('cpappBackupRrValue');
        cpappPcValue = preferences.getInt('cpappPcValue');
        cpappAtimeValue = preferences.getInt('cpappAtimeValue');
      } else if (checkData == "auto") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = true;
          prvcEnabled = false;
          cpapEnabled = false;
          autoPcMax = false;
          hfnoEnabled = false;
        });
        autoItrigValue = preferences.getInt('autoItrigValue');
        autoPeepValue = preferences.getInt('autoPeepValue');
        autoIeValue = preferences.getInt('autoIeValue');
        autoautoalue = preferences.getInt('autoautoalue');
        autoTiValue = preferences.getInt('autoTiValue');
        autoVtMinValue = preferences.getInt('autoVtMinValue');
        autoVtMaxValue = preferences.getInt('autoVtMaxValue');
        autoFio2Value = preferences.getInt('autoFio2Value');
        autoAtimeValue = preferences.getInt('autoAtimeValue');
        autoEtrigValue = preferences.getInt('autoEtrigValue');
        autoBackupRrValue = preferences.getInt('autoBackupRrValue');
        autoMinTeValue = preferences.getInt('autoMinTeValue');
        autoPcValue = preferences.getInt('autoPcValue');
        autoVtValue = preferences.getInt('autoVtValue');
        autoPcMaxValue = preferences.getInt('autoPcMaxValue');
      } else if (checkData == "hfno") {
        setState(() {
          pacvEnabled = false;
          pccmvEnabled = false;
          vccmvEnabled = false;
          vacvEnabled = false;
          psimvEnabled = false;
          vsimvEnabled = false;
          psvEnabled = false;
          cpapEnabled = false;
          autoEnabled = false;
          prvcEnabled = false;
          cpapEnabled = false;
          autoPcMax = false;
          hfnoEnabled = true;
        });
        hfnoFio2Value = preferences.getInt('hfnoFio2Value');
        hfnoFlowValue = preferences.getInt('hfnoFlowValue');
      }

      assistmodePressureOn = preferences.getBool("flag");
      assistmodeVolumeOn = preferences.getBool("flag1");
    });
  }

  checkI(String i) {
    var data =
        i.split(".")[1].toString() == "0" ? i.split(".")[0].toString() : i;
    return data;
  }

  checkE(String e) {
    var data =
        e.split(".")[1].toString() == "0" ? e.split(".")[0].toString() : e;
    return data;
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setEnabledSystemUIOverlays([]);
    SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft]);

    // var data = pressurePoints;
    // var data1 = flowiPoints;
    // var data2 = flowePoints;
    // var data3 = volumePoints;

    // GraphParams params = GraphParams(
    //     graphPoints: pPoints,
    //     height: 0.1,
    //     width: 0.1,
    //     top: 16.0,
    //     yGridSize: 10,
    //     yScale: GraphConst.AUTO,
    //     xScale: 10,
    //     startOverScroll: 0.0,
    //     endOverScroll: 0.0,
    //     enableRoundCorners: false,
    //     enableFill: false,
    //     enableMarks: false,
    //     enableGrid: false,
    //     enableScroll: true);

    scopeOne = Oscilloscope(
        showYAxis: true,
        yAxisColor: Colors.grey,
        padding: 10.0,
        backgroundColor: Color(0xFF171e27),
        traceColor: Colors.yellow,
        yAxisMax: 100,
        yAxisMin: 0.0,
        dataSet: pressurePoints);

    scopeOne1 = Oscilloscope(
        showYAxis: true,
        yAxisColor: Colors.grey,
        padding: 10.0,
        backgroundColor: Color(0xFF171e27),
        traceColor: Colors.green,
        yAxisMax: 200.0,
        yAxisMin: -90.0,
        dataSet: flowPoints);

    scopeOne2 = Oscilloscope(
        showYAxis: true,
        yAxisColor: Colors.grey,
        padding: 10.0,
        backgroundColor: Color(0xFF171e27),
        traceColor: Colors.blue,
        yAxisMax: 3000.0,
        yAxisMin: 0.0,
        dataSet: volumePoints);

    // pscopeOne = OscilloscopePsv(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Color(0xFF171e27),
    //     traceColor: Colors.yellow,
    //     yAxisMax: 40,
    //     yAxisMin: 0.0,
    //     dataSet: pressurePointsPsv);

    // pscopeOne1 = OscilloscopePsv(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Color(0xFF171e27),
    //     traceColor: Colors.green,
    //     yAxisMax: 200.0,
    //     yAxisMin: -90.0,
    //     dataSet: flowPointsPsv);

    // pscopeOne2 = OscilloscopePsv(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Color(0xFF171e27),
    //     traceColor: Colors.blue,
    //     yAxisMax: 3000.0,
    //     yAxisMin: 0.0,
    //     dataSet: volumePointsPsv);

    // mscopeOne = OscilloscopeBig(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Color(0xFF171e27),
    //     traceColor: Colors.yellow,
    //     yAxisMax: 100,
    //     yAxisMin: 0.0,
    //     dataSet: pressurePoints);

    // mscopeOne1 = OscilloscopeBig(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Color(0xFF171e27),
    //     traceColor: Colors.green,
    //     yAxisMax: 200.0,
    //     yAxisMin: -90.0,
    //     dataSet: flowPoints);

    // mscopeOne2 = OscilloscopeBig(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Color(0xFF171e27),
    //     traceColor: Colors.blue,
    //     yAxisMax: 3000.0,
    //     yAxisMin: 0.0,
    //     dataSet: volumePoints);

    // sscopeOne = OscilloscopeBig(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Colors.transparent,
    //     traceColor: Colors.yellow,
    //     yAxisMax: 100,
    //     yAxisMin: 0.0,
    //     dataSet: pressurePoints);

    // sscopeOne1 = OscilloscopeBig(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Colors.transparent,
    //     traceColor: Colors.green,
    //     yAxisMax: 200.0,
    //     yAxisMin: -90.0,
    //     dataSet: flowPoints);

    // sscopeOne2 = OscilloscopeBig(
    //     showYAxis: true,
    //     yAxisColor: Colors.grey,
    //     padding: 10.0,
    //     backgroundColor: Colors.transparent,
    //     traceColor: Colors.blue,
    //     yAxisMax: 3000.0,
    //     yAxisMin: 0.0,
    //     dataSet: volumePoints);

    return Scaffold(
        resizeToAvoidBottomPadding: false,
        key: _scaffoldKey, //_scaffoldKey.currentState.openDrawer(),
        // floatingActionButton: FloatingActionRowButton(
        //     icon: Icon(Icons.arrow_forward),
        //     onTap: () {}
        // ),
        endDrawer: patientName == "betauser" || patientName == "userbeta"
            ? endDrawerMethod()
            : Container(),
        drawer: Container(
          // width: 190,
          child: Theme(
            data: Theme.of(context).copyWith(
              canvasColor: Colors.transparent,
            ),
            child: Container(
              color: Colors.transparent,
              child: Drawer(
                child: Row(
                  children: <Widget>[
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: <Widget>[
                        SizedBox(height: 50),
                        Container(
                          color: Color(0xFF171e27),
                          width: 190,
                          height: 85,
                          child: Padding(
                            padding: const EdgeInsets.only(
                                left: 12, right: 12, top: 5),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.all(2.0),
                                    child: Text("",
                                        style: TextStyle(
                                            color: Colors.green, fontSize: 10)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.all(2.0),
                                    child: Text(
                                      "",
                                      style: TextStyle(
                                          color: Colors.green, fontSize: 10),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(right: 5.0),
                                    child: Text(
                                      cdisplayParameter.toString(),
                                      style: TextStyle(
                                          color: Colors.green, fontSize: 38),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 0.0, bottom: 65),
                                    child: Text(
                                      "Static Compliance",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 12),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(bottom: 5),
                                  child: Align(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      "ml/cmH\u2082O",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 12),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(top: 0),
                                  child: Align(
                                    alignment: Alignment.topRight,
                                    child: Column(
                                      mainAxisAlignment:
                                          MainAxisAlignment.start,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: <Widget>[
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 12),
                                        ),
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.green,
                                              fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(bottom: 5),
                                  child: Align(
                                    alignment: Alignment.bottomRight,
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.end,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: <Widget>[
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.green,
                                              fontSize: 12),
                                        ),
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Align(
                                    alignment: Alignment.bottomCenter,
                                    child: Padding(
                                      padding: const EdgeInsets.only(top: 18.0),
                                      child: Divider(
                                        color: Colors.white,
                                        height: 1,
                                      ),
                                    ))
                              ],
                            )),
                          ),
                        ),
                        Container(
                          color: Color(0xFF171e27),
                          width: 190,
                          height: 85,
                          child: Padding(
                            padding: const EdgeInsets.only(
                                left: 12, right: 12, top: 10),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.all(2.0),
                                    child: Text("",
                                        style: TextStyle(
                                            color: Colors.yellow,
                                            fontSize: 10)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.all(2.0),
                                    child: Text(
                                      "",
                                      style: TextStyle(
                                          color: Colors.yellow, fontSize: 10),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(right: 5.0),
                                    child: Text(
                                      leakVolumeDisplay == null
                                          ? "0"
                                          : (leakVolumeDisplay)
                                              .toInt()
                                              .toString(),
                                      // "0000",
                                      style: TextStyle(
                                          color: Colors.yellow, fontSize: 35),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.centerLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 0.0, bottom: 60),
                                    child: Text(
                                      "Leak Volume",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 12),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(bottom: 5),
                                  child: Align(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      "ml",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 12),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(top: 0),
                                  child: Align(
                                    alignment: Alignment.topRight,
                                    child: Column(
                                      mainAxisAlignment:
                                          MainAxisAlignment.start,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: <Widget>[
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 12),
                                        ),
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.yellow,
                                              fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(bottom: 5),
                                  child: Align(
                                    alignment: Alignment.bottomRight,
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.end,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: <Widget>[
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.yellow,
                                              fontSize: 12),
                                        ),
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Align(
                                    alignment: Alignment.bottomCenter,
                                    child: Padding(
                                      padding: const EdgeInsets.only(top: 18.0),
                                      child: Divider(
                                        color: Colors.white,
                                        height: 1,
                                      ),
                                    ))
                              ],
                            )),
                          ),
                        ),
                        Container(
                          color: Color(0xFF171e27),
                          width: 190,
                          height: 85,
                          child: Padding(
                            padding: const EdgeInsets.only(
                                left: 12, right: 12, top: 5, bottom: 5),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.all(2.0),
                                    child: Text("",
                                        style: TextStyle(
                                            color: Colors.pink, fontSize: 10)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.all(2.0),
                                    child: Text(
                                      "",
                                      style: TextStyle(
                                          color: Colors.pink, fontSize: 10),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(right: 5.0),
                                    child: Text(
                                      peakFlowDisplay == null
                                          ? "0"
                                          : ((peakFlowDisplay * 60) / 1000)
                                              .toStringAsFixed(3),
                                      // "00",
                                      style: TextStyle(
                                          color: Colors.pink, fontSize: 35),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.centerLeft,
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 0.0, bottom: 60),
                                    child: Text(
                                      "Peak Flow",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 12),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(bottom: 5),
                                  child: Align(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      "lpm",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 12),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(top: 0),
                                  child: Align(
                                    alignment: Alignment.topRight,
                                    child: Column(
                                      mainAxisAlignment:
                                          MainAxisAlignment.start,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: <Widget>[
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 12),
                                        ),
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.pink, fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(bottom: 5),
                                  child: Align(
                                    alignment: Alignment.bottomRight,
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.end,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: <Widget>[
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.pink, fontSize: 12),
                                        ),
                                        Text(
                                          "",
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Align(
                                    alignment: Alignment.bottomCenter,
                                    child: Padding(
                                      padding: const EdgeInsets.only(top: 18.0),
                                      child: Divider(
                                        color: Colors.white,
                                        height: 1,
                                      ),
                                    )),
                              ],
                            )),
                          ),
                        ),
                        operatinModeR == 4 ||
                                operatinModeR == 5 ||
                                operatinModeR == 3
                            ? Container(
                                color: Color(0xFF171e27),
                                width: 190,
                                height: 85,
                                child: Padding(
                                  padding: const EdgeInsets.only(
                                      left: 12, right: 12, top: 5, bottom: 5),
                                  child: Center(
                                      child: Stack(
                                    children: [
                                      Align(
                                        alignment: Alignment.topLeft,
                                        child: Padding(
                                          padding: const EdgeInsets.all(2.0),
                                          child: Text("",
                                              style: TextStyle(
                                                  color: Colors.pink,
                                                  fontSize: 10)),
                                        ),
                                      ),
                                      Align(
                                        alignment: Alignment.bottomLeft,
                                        child: Padding(
                                          padding: const EdgeInsets.all(2.0),
                                          child: Text(
                                            "",
                                            style: TextStyle(
                                                color: Colors.pink,
                                                fontSize: 10),
                                          ),
                                        ),
                                      ),
                                      Align(
                                        alignment: Alignment.center,
                                        child: Padding(
                                          padding:
                                              const EdgeInsets.only(right: 5.0),
                                          child: Text(
                                            spontaneousDisplay == null
                                                ? "0"
                                                : (spontaneousDisplay / 1000)
                                                    .toStringAsFixed(3),
                                            style: TextStyle(
                                                color: Colors.blue,
                                                fontSize: 35),
                                          ),
                                        ),
                                      ),
                                      Align(
                                        alignment: Alignment.centerLeft,
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                              left: 0.0, bottom: 60),
                                          child: Text(
                                            "Spontaneous Volume",
                                            style: TextStyle(
                                                color: Colors.white,
                                                fontSize: 12),
                                          ),
                                        ),
                                      ),
                                      Padding(
                                        padding:
                                            const EdgeInsets.only(bottom: 5),
                                        child: Align(
                                          alignment: Alignment.bottomLeft,
                                          child: Text(
                                            "ml",
                                            style: TextStyle(
                                                color: Colors.white,
                                                fontSize: 12),
                                          ),
                                        ),
                                      ),
                                      Padding(
                                        padding: const EdgeInsets.only(top: 0),
                                        child: Align(
                                          alignment: Alignment.topRight,
                                          child: Column(
                                            mainAxisAlignment:
                                                MainAxisAlignment.start,
                                            crossAxisAlignment:
                                                CrossAxisAlignment.end,
                                            children: <Widget>[
                                              Text(
                                                "",
                                                style: TextStyle(
                                                    color: Colors.white,
                                                    fontSize: 12),
                                              ),
                                              Text(
                                                "",
                                                style: TextStyle(
                                                    color: Colors.pink,
                                                    fontSize: 12),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                      Padding(
                                        padding:
                                            const EdgeInsets.only(bottom: 5),
                                        child: Align(
                                          alignment: Alignment.bottomRight,
                                          child: Column(
                                            mainAxisAlignment:
                                                MainAxisAlignment.end,
                                            crossAxisAlignment:
                                                CrossAxisAlignment.end,
                                            children: <Widget>[
                                              Text(
                                                "",
                                                style: TextStyle(
                                                    color: Colors.pink,
                                                    fontSize: 12),
                                              ),
                                              Text(
                                                "",
                                                style: TextStyle(
                                                    color: Colors.white,
                                                    fontSize: 12),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                      Align(
                                          alignment: Alignment.bottomCenter,
                                          child: Padding(
                                            padding: const EdgeInsets.only(
                                                top: 18.0),
                                            child: Divider(
                                              color: Colors.white,
                                              height: 1,
                                            ),
                                          )),
                                    ],
                                  )),
                                ),
                              )
                            : Container(),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
        body: Container(
          color: Color(0xFF171e27),
          child: Stack(
            children: [
              Container(
                child: Row(
                  children: [
                    // main(data, data1, data2, data3, params),
                    main(),
                    rightBar(),
                  ],
                ),
              ),
              // modesEnabled
              //     ? Padding(
              //         padding: const EdgeInsets.only(right: 96.0, bottom: 162),
              //         child: Align(
              //   alignment: Alignment.bottomRight,
              //   child: Container(
              //     height:0,
              //     width: 0,
              //     child: Card(
              //       color: Colors.blue,
              //     ),
              //   )),
              //       )
              //     : Container(),
              // newTreatEnabled
              //     ? Padding(
              //         padding: const EdgeInsets.only(right: 96.0, bottom: 108),
              //         child: Align(
              //   alignment: Alignment.bottomRight,
              //   child: Container(
              //     height:0,
              //     width: 0,
              //     child: Card(
              //       color: Colors.blue,
              //     ),
              //   )),
              //       )
              //     : Container(),
              // monitorEnabled
              //     ? Padding(
              //         padding: const EdgeInsets.only(right: 96.0, bottom: 54),
              //         child: Align(
              //   alignment: Alignment.bottomRight,
              //   child: Container(
              //     height: 0,
              //     width: 0,
              //     child: Card(
              //       color: Colors.blue,
              //     ),
              //   )),
              //       )
              //
              //  : Container(),
              check1 == 0 && check2 == 0
                  ? selfTestStartScreen()
                  : alarmEnabled
                      ? alarmClick()
                      : modesEnabled
                          ? modesClick()

                          //     ? Navigator.push(
                          //   context,
                          //   MaterialPageRoute(builder: (context) => NewTreatmentScreen()),)
                          : monitorEnabled
                              ? monitorClick()
                              : selfTestingEnabled
                                  ? selfTestingData()
                                  : callibrationEnabled
                                      ? callibrationData()
                                      : batterChargingScreen
                                          ? batteryCharginScreen()
                                          : oxygenSettingsEnabled
                                              ? oxygenSettingScreen()
                                              : Container(),

              // _buttonPressed
              //     ? Center(
              //       child: Material(
              // borderRadius: BorderRadius.circular(24.0),
              // color: Colors.green,
              // child: Padding(
              //   padding: const EdgeInsets.only(
              //       left: 30.0, right: 30.0, top: 15, bottom: 15),
              //   child: Text(
              //     ioreDisplayParamter=="I" ?  "Inspiratory Pause : " +  (timerCounter.toString() + "s")
              //       : ioreDisplayParamter=="E" ? "Expiratory Pause : "  + (timerCounter.toString() + "s")
              //       : "Respiratory Pause : "+ (timerCounter.toString() + "s"),
              //       style:
              // TextStyle(fontSize: 30, color: Colors.white)),
              // ),
              //         ),
              //     )
              //     : Container()
            ],
          ),
        ));
  }

  // sendFullTest() async {
  //   List<int> objSelfTestData = [0x7E, 0, 20, 0, 13, 0, 1, 0x7F];
  //   if (_status == "Connected") {
  //     await _port.write(Uint8List.fromList(objSelfTestData));
  //   }
  // }

  selfTestStartScreen() {
    return Container(
        color: Color(0xFF171e27),
        child: Column(
          children: <Widget>[
            Image.asset('assets/images/logo.png', width: 420),
            Center(
                child: Text("System Initializing..",
                    style: TextStyle(color: Colors.white, fontSize: 48))),
          ],
        ));
  }

  endDrawerMethod() {
    return Container(
        color: Colors.transparent,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.end,
          mainAxisAlignment: MainAxisAlignment.end,
          children: <Widget>[
            Column(
              children: <Widget>[
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text(" itrig  -" + receivedItrig.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("peep  " + receivedpeep.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("ps  " + receivedps.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("fio2  " + receivedfio2.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("a time " + receivedapneaTime.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("I:E " +
                      (receivedi / 10).toString() +
                      ":" +
                      (receivede / 10).toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("Ti " + receivedti.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("backup rr  " + receivedbackuprr.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("vt min " + receivedvvttmin.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("vt max " + receivedvtmax.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("min te " + receivedminte.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("pc " + receivedpc.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("rr " + receivedrr.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("vt " + receivedvt.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("pc min " + receivedpcmin.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("pc max " + receivedpcmax.toString()),
                )),
              ],
            ),
            Column(
              children: <Widget>[
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("o2 pressure " + receivedo2pressure.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text(
                      " tank pressure  " + receivedtankpressure.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text(
                      "i blower " + receivedinhalationblowercommand.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text(
                      "e blower " + receivedexhalatioblowercommand.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("fio2 " + dreceivedfio2.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("vti " + receivedvti.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("vte " + receivedvte.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("flat prop " + receivedflatprop.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("o2 voltage " + receivedo2voltage.toString()),
                )),
                Card(
                    child: Padding(
                  padding: const EdgeInsets.all(2.0),
                  child: Text("T hold " + receivedthold.toString()),
                )),
              ],
            ),
          ],
        ));
  }

  showAlertFullTestDialog() {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return Dialog(
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20.0)), //this right here
            child: Container(
                height: 200,
                width: 680,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text(
                            "Please Connect Inhalation Port and Exhalation Port with Tube.",
                            style: TextStyle(
                                fontSize: 20,
                                color: Colors.black,
                                fontWeight: FontWeight.bold))),
                    SizedBox(height: 40),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        InkWell(
                          onTap: () {
                            Navigator.pop(context);
                          },
                          child: Container(
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                  color: Colors.orange),
                              child: Padding(
                                padding: const EdgeInsets.only(
                                    top: 8.0, bottom: 8, left: 40, right: 40),
                                child: Text("Cancel",
                                    style: TextStyle(
                                        fontSize: 25, color: Colors.white)),
                              )),
                        ),
                        InkWell(
                          onTap: () {
                            selftestRun(3);
                            Navigator.pop(context);
                          },
                          child: Container(
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                  color: Colors.orange),
                              child: Padding(
                                padding: const EdgeInsets.only(
                                    top: 8.0, bottom: 8, left: 60, right: 60),
                                child: Text("Ok",
                                    style: TextStyle(
                                        fontSize: 25, color: Colors.white)),
                              )),
                        ),
                      ],
                    ),
                  ],
                )),
          );
        });
  }

  showAlertCalibarationDialog() {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return Dialog(
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20.0)),
            child: Container(
                height: 200,
                width: 450,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Please Connect Test Lung and O\u2082.",
                            style: TextStyle(
                                fontSize: 20,
                                color: Colors.black,
                                fontWeight: FontWeight.bold))),
                    SizedBox(height: 40),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        InkWell(
                          onTap: () {
                            Navigator.pop(context);
                          },
                          child: Container(
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                  color: Colors.orange),
                              child: Padding(
                                padding: const EdgeInsets.only(
                                    top: 8.0, bottom: 8, left: 40, right: 40),
                                child: Text("Cancel",
                                    style: TextStyle(
                                        fontSize: 25, color: Colors.white)),
                              )),
                        ),
                        InkWell(
                          onTap: () {
                            sendSoundOff();
                            sendCalibrationText();
                            Navigator.pop(context);
                          },
                          child: Container(
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                  color: Colors.orange),
                              child: Padding(
                                padding: const EdgeInsets.only(
                                    top: 8.0, bottom: 8, left: 60, right: 60),
                                child: Text("Ok",
                                    style: TextStyle(
                                        fontSize: 25, color: Colors.white)),
                              )),
                        ),
                      ],
                    ),
                  ],
                )),
          );
        });
  }

  sendTest() async {
    setState(() {
      textText = "";
      callibrationEnabled = true;
    });
  }

  sendCalibrationText() async {
    List<int> objSelfTestData = [0, 20, 0, 16, 0, 1];
    if (_status == "Connected") {
      sendDataUsbConnection(objSelfTestData, 2);
      setState(() {
        callibrationEnabled = true;
        timerCount = 90;
      });
      countDownTimer();
    }
  }

  countDownTimer() async {
    for (int x = 90; x > 0; x--) {
      await Future.delayed(Duration(seconds: 1)).then((_) {
        setState(() {
          timerCount -= 1;
          if (timerCount == 0) {
            textText = "";
          }
        });
      });
    }
  }

  countDownTimer1() async {
    for (int x = 17; x > 0; x--) {
      await Future.delayed(Duration(seconds: 1)).then((_) {
        setState(() {
          timerCount -= 1;
          if (timerCount == 0) {
            textText = "";
          }
        });
      });
    }
  }

  // ignore: unused_element
  _closebatteryScreen() {
    setState(() {
      batterChargingScreen = false;
    });
  }

  DropdownButton _normalDown() => DropdownButton<String>(
        items: [
          DropdownMenuItem<String>(
            value: "1",
            child: Text(
              "ZYNA I",
            ),
          ),
          DropdownMenuItem<String>(
            value: "2",
            child: Text(
              "ZYNA H",
            ),
          ),
        ],
        onChanged: (value) {
          setState(() {
            _osensorType = value;
          });
        },
        value: _osensorType,
        hint: Text("Sensor Type"),
      );

  DropdownButton _normalLifeTime() => DropdownButton<String>(
        items: [
          DropdownMenuItem<String>(
            value: "1",
            child: Text(
              "1 Month",
            ),
          ),
          DropdownMenuItem<String>(
            value: "2",
            child: Text(
              "2 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "3",
            child: Text(
              "3 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "4",
            child: Text(
              "4 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "5",
            child: Text(
              "5 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "6",
            child: Text(
              "6 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "7",
            child: Text(
              "7 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "8",
            child: Text(
              "8 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "9",
            child: Text(
              "9 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "10",
            child: Text(
              "10 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "11",
            child: Text(
              "11 Months",
            ),
          ),
          DropdownMenuItem<String>(
            value: "12",
            child: Text(
              "12 Months",
            ),
          ),
        ],
        onChanged: (value) {
          setState(() {
            _osensorLife = value;
          });
        },
        value: _osensorLife,
        hint: Text("Sensor Life"),
      );

  selectDate() {
    return DatePicker.showDatePicker(context,
        showTitleActions: true,
        minTime: DateTime(y - 10, m, d),
        maxTime: DateTime(y + 100, m + 1, d + 1),
        theme: DatePickerTheme(
            backgroundColor: Colors.white,
            itemStyle: TextStyle(
              color: Colors.blue,
              fontSize: 20,
            ),
            doneStyle: TextStyle(color: Colors.blue, fontSize: 12)),
        onChanged: (date) {
      _odate = DateFormat('dd-MM-yyyy').format(date).toString();
    }, onConfirm: (date) {
      _odate = DateFormat('dd-MM-yyyy').format(date).toString();
    }, currentTime: DateTime.now(), locale: LocaleType.en);
  }

  String numberValidator(String value) {
    if (value == null) {
      return null;
    }
    final n = num.tryParse(value);
    if (n == null) {
      return '"$value" is not a valid number';
    }
    return null;
  }

  oxygenSettingScreen() {
    return Container(
        color: Colors.white,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Container(
              height: 60,
              child: Row(
                children: <Widget>[
                  IconButton(
                      icon: Icon(Icons.arrow_back, size: 36),
                      onPressed: () {
                        setState(() {
                          oxygenSettingsEnabled = false;
                        });
                      }),
                  Container(
                    margin: EdgeInsets.only(top: 15, left: 20),
                    height: 60,
                    child: Text("Oxygen Sensor Config",
                        style: TextStyle(color: Colors.black, fontSize: 25)),
                  ),
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(38.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.start,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Container(
                    decoration: BoxDecoration(
                        border: Border.all(color: Colors.black),
                        borderRadius: BorderRadius.circular(10)),
                    height: 60,
                    width: 150,
                    child: Center(child: _normalDown()),
                  ),
                  SizedBox(width: 30),
                  InkWell(
                    onTap: () {
                      selectDate();
                    },
                    child: Container(
                      width: 160,
                      child: TextFormField(
                        style: TextStyle(fontSize: 14),
                        enabled: false,
                        keyboardType: TextInputType.number,
                        onTap: () {
                          selectDate();
                        },
                        controller: TextEditingController(text: _odate),
                        decoration: InputDecoration(
                          labelText: "Date of Assembly",
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10.0),
                          ),
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 30),
                  Container(
                    width: 150,
                    child: TextFormField(
                      style: TextStyle(fontSize: 12),
                      showCursor: true,
                      inputFormatters: <TextInputFormatter>[
                        WhitelistingTextInputFormatter.digitsOnly,
                      ],
                      keyboardType: TextInputType.number,
                      controller: _osensorRange,
                      validator: numberValidator,
                      decoration: InputDecoration(
                        labelText: "Sensor Min.Voltage",
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 30),
                  Container(
                    decoration: BoxDecoration(
                        border: Border.all(color: Colors.black),
                        borderRadius: BorderRadius.circular(10)),
                    height: 60,
                    width: 150,
                    child: Center(child: _normalLifeTime()),
                  ),
                  SizedBox(width: 30),
                  InkWell(
                    onTap: () {
                      saveOxygenData();
                    },
                    child: Container(
                      width: 200,
                      height: 60,
                      decoration: BoxDecoration(
                          color: Color(0xFF424242),
                          borderRadius: BorderRadius.circular(5)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Text(
                          "Confirm",
                          style: TextStyle(
                              color: Colors.white,
                              fontSize: 20,
                              fontWeight: FontWeight.w600),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            )
          ],
        ));
  }

  saveOxygenData() {
    List<int> o2sensorConfig = [0, 20, 0, 19];
    if (_odate == null) {
      Fluttertoast.showToast(msg: "Choose Date");
    } else if (_osensorRange == null) {
      Fluttertoast.showToast(msg: "Enter Sensor Minimum Voltage");
    } else if (_osensorType == null) {
      Fluttertoast.showToast(msg: "Choose Sensor Type");
    } else if (_osensorLife == null) {
      Fluttertoast.showToast(msg: "Choose Sensor Life");
    } else {
      setState(() {
        int oyear = int.tryParse(_odate.split("-")[2]);
        int omonth = int.tryParse(_odate.split("-")[1]);
        int oday = int.tryParse(_odate.split("-")[0]);
        int sensorRangee = int.tryParse(_osensorRange.text);
        int sensorTypee = int.tryParse(_osensorType);
        int sensorlifee = int.tryParse(_osensorLife);

        o2sensorConfig.add((oyear & 0xFF00) >> 8);
        o2sensorConfig.add(oyear & 0xFF);
        o2sensorConfig.add(omonth);
        o2sensorConfig.add(oday);
        o2sensorConfig.add(sensorRangee);
        o2sensorConfig.add(sensorTypee);
        o2sensorConfig.add(sensorlifee);
      });

      sendDataUsbConnection(o2sensorConfig, 2);
    }
  }

  batteryCharginScreen() {
    return Container(
        color: Colors.white,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisAlignment: MainAxisAlignment.end,
          children: <Widget>[
            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: <Widget>[
                Stack(
                  children: [
                    Column(
                      children: <Widget>[
                        SizedBox(height: 60),
                        faultBatteryStatus == 1
                            ? Center(
                                child: SizedBox(
                                  width: 250,
                                  height: 250,
                                  child: LiquidCircularProgressIndicator(
                                    value: 0.0,
                                    backgroundColor: Colors.white,
                                    valueColor:
                                        AlwaysStoppedAnimation(Colors.orange),
                                    borderColor: Colors.grey,
                                    borderWidth: 5.0,
                                    center: Text(
                                      "Fault",
                                      style: TextStyle(
                                        fontSize: 18.0,
                                        color: Colors.black,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ),
                              )
                            : batteryStatus == 1 || batteryStatus == 3
                                ? Center(
                                    child: SizedBox(
                                      width: 250,
                                      height: 250,
                                      child: LiquidCircularProgressIndicator(
                                        value: 1.0,
                                        backgroundColor: Colors.white,
                                        valueColor: AlwaysStoppedAnimation(
                                            Colors.orange),
                                        borderColor: Colors.grey,
                                        borderWidth: 5.0,
                                        center: Text(
                                          "Charging Completed",
                                          style: TextStyle(
                                            fontSize: 18.0,
                                            color: Colors.white,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),
                                  )
                                : Center(
                                    child: SizedBox(
                                      width: 250,
                                      height: 250,
                                      child: LiquidCircularProgressIndicator(
                                        value: 0.7,
                                        backgroundColor: Colors.white,
                                        valueColor: AlwaysStoppedAnimation(
                                            Colors.orange),
                                        borderColor: Colors.grey,
                                        borderWidth: 5.0,
                                        center: Text(
                                          "Charging...",
                                          style: TextStyle(
                                            fontSize: 18.0,
                                            color: Colors.white,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                        Container(
                            margin: EdgeInsets.only(top: 20),
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                color: Colors.white),
                            child: Center(
                                child: Text("Battery - 1",
                                    style: TextStyle(color: Colors.black)))),
                      ],
                    ),
                  ],
                ),
                Stack(
                  children: [
                    Column(
                      children: <Widget>[
                        SizedBox(height: 60),
                        faultBatteryStatus == 2
                            ? Center(
                                child: SizedBox(
                                  width: 250,
                                  height: 250,
                                  child: LiquidCircularProgressIndicator(
                                    value: 0.0,
                                    backgroundColor: Colors.white,
                                    valueColor:
                                        AlwaysStoppedAnimation(Colors.orange),
                                    borderColor: Colors.grey,
                                    borderWidth: 5.0,
                                    center: Text(
                                      "Fault",
                                      style: TextStyle(
                                        fontSize: 18.0,
                                        color: Colors.black,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ),
                              )
                            : batteryStatus == 2 || batteryStatus == 3
                                ? Center(
                                    child: SizedBox(
                                      width: 250,
                                      height: 250,
                                      child: LiquidCircularProgressIndicator(
                                        value: 1.0,
                                        backgroundColor: Colors.white,
                                        valueColor: AlwaysStoppedAnimation(
                                            Colors.orange),
                                        borderColor: Colors.grey,
                                        borderWidth: 5.0,
                                        center: Text(
                                          "Charging Completed",
                                          style: TextStyle(
                                            fontSize: 18.0,
                                            color: Colors.white,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),
                                  )
                                : Center(
                                    child: SizedBox(
                                      width: 250,
                                      height: 250,
                                      child: LiquidCircularProgressIndicator(
                                        value: 0.7,
                                        backgroundColor: Colors.white,
                                        valueColor: AlwaysStoppedAnimation(
                                            Colors.orange),
                                        borderColor: Colors.grey,
                                        borderWidth: 5.0,
                                        center: Text(
                                          "Charging...",
                                          style: TextStyle(
                                            fontSize: 18.0,
                                            color: Colors.white,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                        Container(
                            margin: EdgeInsets.only(top: 20),
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                color: Colors.white),
                            child: Center(
                                child: Text("Battery - 2",
                                    style: TextStyle(color: Colors.black)))),
                      ],
                    ),
                  ],
                ),
              ],
            ),
            SizedBox(height: MediaQuery.of(context).size.height / 4),
            Align(
                alignment: Alignment.bottomCenter,
                child: InkWell(
                  onTap: () {
                    setState(() {
                      batterChargingScreen = !batterChargingScreen;
                      if (batteryforceCharge == 0) {
                        batteryforceCharge = 1;
                      } else if (batteryforceCharge == 1) {
                        batteryforceCharge = 0;
                      }
                    });
                    List<int> resbatteryList = [];
                    setState(() {
                      resbatteryList.add(0);
                      resbatteryList.add(20);
                      resbatteryList.add(0);
                      resbatteryList.add(18);
                      resbatteryList.add((batteryforceCharge));
                    });

                    sendDataUsbConnection(resbatteryList, 2);
                  },
                  child: Container(
                    margin: EdgeInsets.only(bottom: 20),
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.orange),
                    child: Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Text("Stop Charging",
                          style: TextStyle(color: Colors.white, fontSize: 25)),
                    ),
                  ),
                )),
          ],
        ));
  }

  callibrationData() {
    return Container(
      color: Color(0xFF171e27),
      child: Center(
        child: Column(
          children: [
            Row(
              crossAxisAlignment: CrossAxisAlignment.end,
              mainAxisAlignment: MainAxisAlignment.end,
              children: <Widget>[
                Padding(
                  padding: const EdgeInsets.all(18.0),
                  child: IconButton(
                      icon: Icon(
                        Icons.settings,
                        color: textText == "Calibrating 0\u2082.." ||
                                textText == "Selftest starting.."
                            ? Colors.grey
                            : Colors.white,
                        size: 40,
                      ),
                      onPressed: () {
                        preferences.setBool('_isFlagTest', true);
                        textText == "Calibrating 0\u2082.." ||
                                textText == "Selftest starting.."
                            ? ""
                            : Navigator.push(
                                context,
                                MaterialPageRoute(
                                    builder: (context) => About()));
                      }),
                ),
              ],
            ),
            SizedBox(height: 40),
            Container(
              child: Image.asset(
                'assets/images/logo1.png',
                width: 542,
              ),
            ),
            SizedBox(height: 160),
            Text(
              "$textText",
              style: TextStyle(
                  color:
                      checkO2CalibrationValue == 1 ? Colors.red : Colors.white,
                  fontSize: 30),
              textAlign: TextAlign.center,
            ),
            Text(
              textText == "Lung Disconnected" ||
                      textText == "" ||
                      textText == "Low 0\u2082 Supply" ||
                      textText == "0\u2082 Calibration Completed."
                  ? ""
                  : "Time Left: $timerCount",
              style: TextStyle(
                  color:
                      checkO2CalibrationValue == 1 ? Colors.red : Colors.white,
                  fontSize: 30),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 150),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // Card(
                //   color: textText == "Calibrating 0\u2082.." ||
                //           textText == "Selftest starting.."
                //       ? Colors.grey
                //       : Colors.white,
                //   shape: RoundedRectangleBorder(
                //     borderRadius: BorderRadius.circular(15.0),
                //   ),
                //   child: InkWell(
                //     onTap: () async {
                //       if (_status == "Connected" ){
                //         if(textText=="Calibrating 0\u2082.."){

                //         }else if(textText == "Selftest starting.."){

                //         }else{
                //         setState(() {
                //           textText = "";
                //           selfTexttext = "Full";
                //         });
                //         showAlertFullTestDialog();
                //         // selftestRun(2);
                //         setState(() {
                //           preferences.setBool('_isFlagTest', true);
                //           _isFlagTest = true;
                //           // showAlertFullTestDialog();
                //         });
                //         }
                //       }
                //     },
                //     child: Container(
                //       width: _isTab10 ? 300 : 220,
                //       child: Padding(
                //         padding: EdgeInsets.all(_isTab10 ? 30 : 18.0),
                //         child: Column(
                //           children: [
                //             Text(
                //               "Continue \n with".toUpperCase(),
                //               style: TextStyle(
                //                 color: textText == "Calibrating 0\u2082.." ||
                //                         textText == "Selftest starting.."
                //                     ? Colors.white
                //                     : Colors.black,
                //                 fontWeight: FontWeight.bold,
                //                 fontSize: _isTab10 ? 18 : 15,
                //               ),
                //               textAlign: TextAlign.center,
                //             ),
                //             Text(
                //               "Full Test".toUpperCase(),
                //               style: TextStyle(
                //                 color: textText == "Calibrating 0\u2082.." ||
                //                         textText == "Selftest starting.."
                //                     ? Colors.white
                //                     : Colors.black,
                //                 fontWeight: FontWeight.bold,
                //                 fontSize: _isTab10 ? 32 : 22,
                //               ),
                //               textAlign: TextAlign.center,
                //             ),
                //           ],
                //         ),
                //       ),
                //     ),
                //   ),
                // ),
                Card(
                  color: textText == "Calibrating 0\u2082.." ||
                          textText == "Selftest starting.."
                      ? Colors.grey
                      : Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15.0),
                  ),
                  child: InkWell(
                    onTap: () async {
                      if (_status == "Connected") {
                        if (textText == "Calibrating 0\u2082..") {
                        } else if (textText == "Selftest starting..") {
                        } else {
                          setState(() {
                            textText = "";
                          });
                          selftestRun(2);
                          setState(() {
                            preferences.setBool('_isFlagTest', true);
                            _isFlagTest = true;
                          });
                        }
                      }
                    },
                    child: Container(
                      width: _isTab10 ? 300 : 220,
                      child: Padding(
                        padding: EdgeInsets.all(_isTab10 ? 30 : 18.0),
                        child: Column(
                          children: [
                            Text(
                              "Continue \n with".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: _isTab10 ? 18 : 15,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            Text(
                              "Self Test".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: _isTab10 ? 32 : 22,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                Card(
                  color: textText == "Calibrating 0\u2082.." ||
                          textText == "Selftest starting.."
                      ? Colors.grey
                      : Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15.0),
                  ),
                  child: InkWell(
                    onTap: () {
                      if (_status == "Connected") {
                        if (textText == "Calibrating 0\u2082..") {
                        } else if (textText == "Selftest starting..") {
                        } else {
                          showAlertCalibarationDialog();
                        }
                      }
                    },
                    child: Container(
                      width: _isTab10 ? 300 : 220,
                      child: Padding(
                        padding: EdgeInsets.all(_isTab10 ? 30 : 18.0),
                        child: Column(
                          children: [
                            Text(
                              "Continue \n with 0\u2082".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: _isTab10 ? 18 : 15,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            Text(
                              "Calibration".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: _isTab10 ? 32 : 22,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            Text(
                              "Last Calibrated on - $o2Time".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: 12,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                Card(
                  color: textText == "Calibrating 0\u2082.." ||
                          textText == "Selftest starting.."
                      ? Colors.grey
                      : Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15.0),
                  ),
                  child: InkWell(
                    onTap: () {
                      // selfTestingEnabled = false;
                      setState(() {
                        if (textText == "Calibrating 0\u2082..") {
                        } else if (textText == "Selftest starting..") {
                        } else {
                          callibrationEnabled = false;
                          preferences.setBool('calli', false);
                          sendSoundOn();
                          audioEnable = true;
                        }
                      });
                    },
                    child: Container(
                      width: _isTab10 ? 300 : 220,
                      child: Padding(
                        padding: EdgeInsets.all(_isTab10 ? 30 : 18.0),
                        child: Column(
                          children: [
                            Text(
                              "Continue \n with".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: _isTab10 ? 18 : 15,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            Text(
                              "Treatment".toUpperCase(),
                              style: TextStyle(
                                color: textText == "Calibrating 0\u2082.." ||
                                        textText == "Selftest starting.."
                                    ? Colors.white
                                    : Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: _isTab10 ? 32 : 22,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  selfTestingData() {
    return Container(
      color: Color(0xFF171e27),
      child: Center(
        child: Column(
          children: [
            SizedBox(height: 20),
            // Row(
            //   crossAxisAlignment: CrossAxisAlignment.end,
            //   mainAxisAlignment: MainAxisAlignment.end,
            //   children: <Widget>[
            //     Padding(
            //       padding: const EdgeInsets.all(18.0),
            //       child: IconButton(
            //           icon: Icon(
            //             Icons.settings,
            //             color: Colors.white,
            //             size: 40,
            //           ),
            //           onPressed: () {
            //             checkOfffset == 2
            //                 ? Navigator.push(
            //                     context,
            //                     MaterialPageRoute(
            //                         builder: (context) => About()))
            //                 : "";
            //           }),
            //     ),
            //     // Padding(
            //     //   padding: const EdgeInsets.only(top:10.0,left:10,right:10,bottom: 5),
            //     //   child: Text("About",style: TextStyle(color: Colors.white,fontSize: 20),),
            //     // ),
            //   ],
            // ),
            Container(
              child: Text(
                "SWASIT",
                style: TextStyle(
                    color: Colors.orange,
                    fontSize: _isTab10 ? 102 : 72,
                    fontFamily: "appleFont"),
              ),
            ),
            SizedBox(
              height: _isTab10 ? 45 : 10,
            ),
            Container(
              padding: EdgeInsets.all(_isTab10 ? 40.0 : 0.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Inhalation Valve             ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: inhalationvalve == 0
                                    ? false
                                    : inhalationvalve == 1
                                        ? false
                                        : inhalationvalve == 2 ? true : false,
                                activeColor: inhalationvalve == 1
                                    ? Colors.red
                                    : inhalationvalve == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Exhalation Valve            ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: exhalationvalve == 0
                                    ? false
                                    : exhalationvalve == 1
                                        ? false
                                        : exhalationvalve == 2 ? true : false,
                                activeColor: exhalationvalve == 1
                                    ? Colors.red
                                    : exhalationvalve == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Vent Value                      ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: ventvalue == 0
                                    ? false
                                    : ventvalue == 1
                                        ? false
                                        : ventvalue == 2 ? true : false,
                                activeColor: ventvalue == 1
                                    ? Colors.red
                                    : ventvalue == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Safety Value - I               ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: safetyvalue1 == 0
                                    ? false
                                    : safetyvalue1 == 1
                                        ? false
                                        : safetyvalue1 == 2 ? true : false,
                                activeColor: safetyvalue1 == 1
                                    ? Colors.red
                                    : safetyvalue1 == 2
                                        ? Colors.blue
                                        : Colors.green,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Safety Value - II              ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: safetyvalue2 == 0
                                    ? false
                                    : safetyvalue2 == 1
                                        ? false
                                        : safetyvalue2 == 2 ? true : false,
                                activeColor: safetyvalue2 == 1
                                    ? Colors.red
                                    : safetyvalue2 == 2
                                        ? Colors.blue
                                        : Colors.green,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "O\u2082 Pressure Sensor                  ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: o2pressuresensor == 0
                                    ? false
                                    : o2pressuresensor == 1
                                        ? false
                                        : o2pressuresensor == 2 ? true : false,
                                activeColor: o2pressuresensor == 1
                                    ? Colors.red
                                    : o2pressuresensor == 2
                                        ? Colors.blue
                                        : Colors.green,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Inhalation Pressure Sensor     ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: inhalationpressure == 0
                                    ? false
                                    : inhalationpressure == 1
                                        ? false
                                        : inhalationpressure == 2
                                            ? true
                                            : false,
                                activeColor: inhalationpressure == 1
                                    ? Colors.red
                                    : inhalationpressure == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Exhalation Pressure Sensor    ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: exhalationpressure == 0
                                    ? false
                                    : exhalationpressure == 1
                                        ? false
                                        : exhalationpressure == 2
                                            ? true
                                            : false,
                                activeColor: exhalationpressure == 1
                                    ? Colors.red
                                    : exhalationpressure == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Inhalation Flow Sensor             ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: inhalationflowsensor == 0
                                    ? false
                                    : inhalationflowsensor == 1
                                        ? false
                                        : inhalationflowsensor == 2
                                            ? true
                                            : false,
                                activeColor: inhalationflowsensor == 1
                                    ? Colors.red
                                    : inhalationflowsensor == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Exhalation Flow Sensor            ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: exhalationflowsensor == 0
                                    ? false
                                    : exhalationflowsensor == 1
                                        ? false
                                        : exhalationflowsensor == 2
                                            ? true
                                            : false,
                                activeColor: exhalationflowsensor == 1
                                    ? Colors.red
                                    : exhalationflowsensor == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "O \u2082 Sensor                       ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: o2sensor == 0
                                    ? false
                                    : o2sensor == 1
                                        ? false
                                        : o2sensor == 2 ? true : false,
                                activeColor: o2sensor == 1
                                    ? Colors.red
                                    : o2sensor == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "MT Pressure Sensor      ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: mtpressuresensor == 0
                                    ? false
                                    : mtpressuresensor == 1
                                        ? false
                                        : mtpressuresensor == 2 ? true : false,
                                activeColor: mtpressuresensor == 1
                                    ? Colors.red
                                    : mtpressuresensor == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Compressor                    ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: compressor == 0
                                    ? false
                                    : compressor == 1
                                        ? false
                                        : compressor == 2 ? true : false,
                                activeColor: compressor == 1
                                    ? Colors.red
                                    : compressor == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Blender                            ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: blender == 0
                                    ? false
                                    : blender == 1
                                        ? false
                                        : blender == 2 ? true : false,
                                activeColor: blender == 1
                                    ? Colors.red
                                    : blender == 2 ? Colors.blue : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Main Power                    ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: mainpower == 0
                                    ? false
                                    : mainpower == 1
                                        ? false
                                        : mainpower == 2 ? true : false,
                                activeColor: mainpower == 1
                                    ? Colors.red
                                    : mainpower == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Battery                     ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: battery == 0
                                    ? false
                                    : battery == 1
                                        ? false
                                        : battery == 2 ? true : false,
                                activeColor: battery == 1
                                    ? Colors.red
                                    : battery == 2 ? Colors.blue : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10.0),
                        child: Card(
                          color: Colors.grey,
                          child: Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Text(
                                  "Communication     ",
                                  style: TextStyle(color: Colors.black),
                                ),
                              ),
                              Checkbox(
                                value: communication == 0
                                    ? false
                                    : communication == 1
                                        ? false
                                        : communication == 2 ? true : false,
                                activeColor: communication == 1
                                    ? Colors.red
                                    : communication == 2
                                        ? Colors.blue
                                        : Colors.black,
                                onChanged: (bool value) {},
                              )
                            ],
                          ),
                        ),
                      ),
                    ],
                  )
                ],
              ),
            ),
            SizedBox(
              height: 10,
            ),
            checkOfffset == 2
                ? InkWell(
                    onTap: () {
                      setState(() {
                        selfTestingEnabled = false;
                        callibrationEnabled = false;
                        textText = "";
                      });
                    },
                    child: Container(
                      decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(15),
                          color: Colors.orange.withOpacity(0.8)),
                      child: Padding(
                        padding: const EdgeInsets.only(
                            top: 18.0, bottom: 18.0, left: 40.0, right: 40.0),
                        child: Text("Test Completed",
                            style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 24)),
                      ),
                    ),
                  )
                : exitSelfTest == 1
                    ? InkWell(
                        onTap: () {
                          setState(() {
                            selfTestingEnabled = false;
                            callibrationEnabled = true;
                            textText = "";
                          });
                        },
                        child: Container(
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(15),
                              color: Colors.orange.withOpacity(0.8)),
                          child: Padding(
                            padding: const EdgeInsets.only(
                                top: 18.0,
                                bottom: 18.0,
                                left: 40.0,
                                right: 40.0),
                            child: Text("Exit",
                                style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                    fontSize: 24)),
                          ),
                        ),
                      )
                    : Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(
                              selfTexttext == "Self"
                                  ? "Self test in progress.."
                                  : "Full test in progress",
                              style:
                                  TextStyle(fontSize: 30, color: Colors.white),
                            ),
                          ),
                          SizedBox(
                            width: 40,
                          ),
                          CircularProgressIndicator()
                        ],
                      ),
            SizedBox(
              height: 20,
            ),
          ],
        ),
      ),
    );
  }

  modesClick() {
    return Container(
      color: Colors.transparent,
      child: Center(
          child: Align(
              alignment: Alignment.centerRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 0.0),
                child: Material(
                  color: Colors.grey,
                  elevation: 10.0,
                  shadowColor: Colors.grey,
                  borderRadius: BorderRadius.circular(10),
                  child: Padding(
                    padding: const EdgeInsets.all(5.0),
                    child: Container(
                        color: Color(0xFF171e27),
                        height: _isTab10 ? 790 : 590,
                        width: _isTab10 ? 1424 : 1024,
                        child: Center(
                          child: Stack(
                            children: [
                              Container(
                                padding: EdgeInsets.only(left: 14),
                                child: Align(
                                  alignment: Alignment.centerLeft,
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    mainAxisAlignment: MainAxisAlignment.start,
                                    children: [
                                      SizedBox(
                                        height: 10,
                                      ),
                                      SingleChildScrollView(
                                        scrollDirection: Axis.horizontal,
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.start,
                                          crossAxisAlignment:
                                              CrossAxisAlignment.center,
                                          children: [
                                            assistmodePressureOn
                                                ? InkWell(
                                                    onTap: () {
                                                      if (_modeChangeEnabled ==
                                                          true) {
                                                        setState(() {
                                                          _modeChangeEnabled =
                                                              false;
                                                          pccmvEnabled = false;
                                                          vccmvEnabled = false;
                                                          pacvEnabled = true;
                                                          vacvEnabled = false;
                                                          psimvEnabled = false;
                                                          vsimvEnabled = false;
                                                          psvEnabled = false;
                                                          prvcEnabled = false;
                                                          autoEnabled = false;
                                                          cpapEnabled = false;
                                                          hfnoEnabled = false;
                                                          if (modeName !=
                                                              "PACV") {
                                                            setData();
                                                          }
                                                        });
                                                      }
                                                    },
                                                    child: Card(
                                                      color: pacvEnabled
                                                          ? Colors.blue
                                                          : Colors.white,
                                                      child: Container(
                                                        width: 115,
                                                        height: 70,
                                                        child: Align(
                                                            alignment: Alignment
                                                                .center,
                                                            child: Padding(
                                                              padding:
                                                                  const EdgeInsets
                                                                      .all(8.0),
                                                              child: Text(
                                                                  "PACV",
                                                                  style: TextStyle(
                                                                      fontSize:
                                                                          20,
                                                                      color: pacvEnabled
                                                                          ? Colors
                                                                              .white
                                                                          : Colors
                                                                              .black,
                                                                      fontWeight:
                                                                          FontWeight
                                                                              .bold)),
                                                            )),
                                                      ),
                                                    ),
                                                  )
                                                : InkWell(
                                                    onTap: () {
                                                      if (_modeChangeEnabled ==
                                                          true) {
                                                        setState(() {
                                                          _modeChangeEnabled =
                                                              false;
                                                          pccmvEnabled = true;
                                                          vccmvEnabled = false;
                                                          pacvEnabled = false;
                                                          vacvEnabled = false;
                                                          psimvEnabled = false;
                                                          vsimvEnabled = false;
                                                          psvEnabled = false;
                                                          prvcEnabled = false;
                                                          autoEnabled = false;
                                                          cpapEnabled = false;
                                                          hfnoEnabled = false;
                                                          if (modeName !=
                                                              "PC-CMV") {
                                                            setData();
                                                          }
                                                        });
                                                      }
                                                    },
                                                    child: Card(
                                                      color: pccmvEnabled
                                                          ? Colors.blue
                                                          : Colors.white,
                                                      child: Container(
                                                        width: 115,
                                                        height: 70,
                                                        child: Align(
                                                            alignment: Alignment
                                                                .center,
                                                            child: Padding(
                                                              padding:
                                                                  const EdgeInsets
                                                                      .all(8.0),
                                                              child: Text(
                                                                  "PC-CMV",
                                                                  style: TextStyle(
                                                                      fontSize:
                                                                          20,
                                                                      color: pccmvEnabled
                                                                          ? Colors
                                                                              .white
                                                                          : Colors
                                                                              .black,
                                                                      fontWeight:
                                                                          FontWeight
                                                                              .bold)),
                                                            )),
                                                      ),
                                                    ),
                                                  ),
                                            assistmodeVolumeOn
                                                ? InkWell(
                                                    onTap: () {
                                                      if (_modeChangeEnabled ==
                                                          true) {
                                                        setState(() {
                                                          _modeChangeEnabled =
                                                              false;
                                                          pccmvEnabled = false;
                                                          vccmvEnabled = false;
                                                          pacvEnabled = false;
                                                          vacvEnabled = true;
                                                          psimvEnabled = false;
                                                          vsimvEnabled = false;
                                                          psvEnabled = false;
                                                          prvcEnabled = false;
                                                          autoEnabled = false;
                                                          cpapEnabled = false;
                                                          hfnoEnabled = false;
                                                          if (modeName !=
                                                              "VACV") {
                                                            setData();
                                                          }
                                                        });
                                                      }
                                                    },
                                                    child: Card(
                                                      color: vacvEnabled
                                                          ? Colors.blue
                                                          : Colors.white,
                                                      child: Container(
                                                        width: 115,
                                                        height: 70,
                                                        child: Align(
                                                            alignment: Alignment
                                                                .center,
                                                            child: Padding(
                                                              padding:
                                                                  const EdgeInsets
                                                                      .all(8.0),
                                                              child: Text(
                                                                  "VACV",
                                                                  style: TextStyle(
                                                                      fontSize:
                                                                          20,
                                                                      color: vacvEnabled
                                                                          ? Colors
                                                                              .white
                                                                          : Colors
                                                                              .black,
                                                                      fontWeight:
                                                                          FontWeight
                                                                              .bold)),
                                                            )),
                                                      ),
                                                    ),
                                                  )
                                                : InkWell(
                                                    onTap: () {
                                                      if (_modeChangeEnabled ==
                                                          true) {
                                                        setState(() {
                                                          _modeChangeEnabled =
                                                              false;
                                                          pccmvEnabled = false;
                                                          vccmvEnabled = true;
                                                          pacvEnabled = false;
                                                          vacvEnabled = false;
                                                          psimvEnabled = false;
                                                          vsimvEnabled = false;
                                                          psvEnabled = false;
                                                          prvcEnabled = false;
                                                          autoEnabled = false;
                                                          cpapEnabled = false;
                                                          hfnoEnabled = false;
                                                          if (modeName !=
                                                              "VC-CMV") {
                                                            setData();
                                                          }
                                                        });
                                                      }
                                                    },
                                                    child: Card(
                                                        color: vccmvEnabled
                                                            ? Colors.blue
                                                            : Colors.white,
                                                        child: Container(
                                                          width: 115,
                                                          height: 70,
                                                          child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .center,
                                                              child: Padding(
                                                                padding:
                                                                    const EdgeInsets
                                                                            .all(
                                                                        8.0),
                                                                child: Text(
                                                                    "VC-CMV",
                                                                    style: TextStyle(
                                                                        fontSize:
                                                                            20,
                                                                        color: vccmvEnabled
                                                                            ? Colors
                                                                                .white
                                                                            : Colors
                                                                                .black,
                                                                        fontWeight:
                                                                            FontWeight.bold)),
                                                              )),
                                                        )),
                                                  ),
                                            InkWell(
                                              onTap: () {
                                                if (_modeChangeEnabled ==
                                                    true) {
                                                  setState(() {
                                                    _modeChangeEnabled = false;
                                                    pccmvEnabled = false;
                                                    vccmvEnabled = false;
                                                    pacvEnabled = false;
                                                    vacvEnabled = false;
                                                    psimvEnabled = true;
                                                    vsimvEnabled = false;
                                                    psvEnabled = false;
                                                    prvcEnabled = false;
                                                    autoEnabled = false;
                                                    cpapEnabled = false;
                                                    hfnoEnabled = false;
                                                    if (modeName != "PSIMV") {
                                                      setData();
                                                    }
                                                  });
                                                }
                                              },
                                              child: Card(
                                                color: psimvEnabled
                                                    ? Colors.blue
                                                    : Colors.white,
                                                child: Container(
                                                  width: 148,
                                                  height: 70,
                                                  child: Align(
                                                      alignment:
                                                          Alignment.center,
                                                      child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .all(8.0),
                                                        child: Text(
                                                            "PSIMV + PS",
                                                            style: TextStyle(
                                                                fontSize: 20,
                                                                color: psimvEnabled
                                                                    ? Colors
                                                                        .white
                                                                    : Colors
                                                                        .black,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .bold)),
                                                      )),
                                                ),
                                              ),
                                            ),
                                            InkWell(
                                              onTap: () {
                                                if (_modeChangeEnabled ==
                                                    true) {
                                                  setState(() {
                                                    _modeChangeEnabled = false;
                                                    // getData();
                                                    pccmvEnabled = false;
                                                    vccmvEnabled = false;
                                                    pacvEnabled = false;
                                                    vacvEnabled = false;
                                                    psimvEnabled = false;
                                                    vsimvEnabled = true;
                                                    psvEnabled = false;
                                                    prvcEnabled = false;
                                                    autoEnabled = false;
                                                    cpapEnabled = false;
                                                    hfnoEnabled = false;
                                                    if (modeName != "VSIMV") {
                                                      setData();
                                                    }
                                                  });
                                                }
                                              },
                                              child: Card(
                                                color: vsimvEnabled
                                                    ? Colors.blue
                                                    : Colors.white,
                                                child: Container(
                                                  width: 148,
                                                  height: 70,
                                                  child: Align(
                                                      alignment:
                                                          Alignment.center,
                                                      child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .all(8.0),
                                                        child: Text(
                                                            "VSIMV + PS",
                                                            style: TextStyle(
                                                                fontSize: 20,
                                                                color: vsimvEnabled
                                                                    ? Colors
                                                                        .white
                                                                    : Colors
                                                                        .black,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .bold)),
                                                      )),
                                                ),
                                              ),
                                            ),
                                            InkWell(
                                              onTap: () {
                                                if (_modeChangeEnabled ==
                                                    true) {
                                                  setState(() {
                                                    _modeChangeEnabled = false;
                                                    pccmvEnabled = false;
                                                    vccmvEnabled = false;
                                                    pacvEnabled = false;
                                                    vacvEnabled = false;
                                                    psimvEnabled = false;
                                                    vsimvEnabled = false;
                                                    psvEnabled = true;
                                                    prvcEnabled = false;
                                                    autoEnabled = false;
                                                    cpapEnabled = false;
                                                    hfnoEnabled = false;
                                                    if (modeName != "PSV") {
                                                      setData();
                                                    }
                                                  });
                                                }
                                              },
                                              child: Card(
                                                color: psvEnabled
                                                    ? Colors.blue
                                                    : Colors.white,
                                                child: Container(
                                                  width: 120,
                                                  height: 70,
                                                  child: Align(
                                                      alignment:
                                                          Alignment.center,
                                                      child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .all(8.0),
                                                        child: Text("PSV/CPAP",
                                                            style: TextStyle(
                                                                fontSize: 20,
                                                                color: psvEnabled
                                                                    ? Colors
                                                                        .white
                                                                    : Colors
                                                                        .black,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .bold)),
                                                      )),
                                                ),
                                              ),
                                            ),
                                            InkWell(
                                              onTap: () {
                                                if (_modeChangeEnabled ==
                                                    true) {
                                                  setState(() {
                                                    _modeChangeEnabled = false;
                                                    pccmvEnabled = false;
                                                    vccmvEnabled = false;
                                                    pacvEnabled = false;
                                                    vacvEnabled = false;
                                                    psimvEnabled = false;
                                                    vsimvEnabled = false;
                                                    psvEnabled = false;
                                                    prvcEnabled = true;
                                                    autoEnabled = false;
                                                    cpapEnabled = false;
                                                    hfnoEnabled = false;
                                                    if (modeName != "PRVC") {
                                                      setData();
                                                    }
                                                  });
                                                }
                                              },
                                              child: Card(
                                                color: prvcEnabled
                                                    ? Colors.blue
                                                    : Colors.white,
                                                child: Container(
                                                  width: 115,
                                                  height: 70,
                                                  child: Align(
                                                      alignment:
                                                          Alignment.center,
                                                      child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .all(8.0),
                                                        child: Text("PRVC",
                                                            style: TextStyle(
                                                                fontSize: 20,
                                                                color: prvcEnabled
                                                                    ? Colors
                                                                        .white
                                                                    : Colors
                                                                        .black,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .bold)),
                                                      )),
                                                ),
                                              ),
                                            ),
                                            // InkWell(
                                            //   onTap: () {
                                            //     if (_modeChangeEnabled ==
                                            //         true) {
                                            //       setState(() {
                                            //         _modeChangeEnabled = false;
                                            //         pccmvEnabled = false;
                                            //         vccmvEnabled = false;
                                            //         pacvEnabled = false;
                                            //         vacvEnabled = false;
                                            //         psimvEnabled = false;
                                            //         vsimvEnabled = false;
                                            //         psvEnabled = false;
                                            //         prvcEnabled = false;
                                            //         autoEnabled = false;
                                            //         cpapEnabled = false;
                                            //         hfnoEnabled = true;
                                            //         if (modeName != "HFNO") {
                                            //           setData();
                                            //         }
                                            //       });
                                            //     }
                                            //   },
                                            //   child: Card(
                                            //     color: hfnoEnabled
                                            //         ? Colors.blue
                                            //         : Colors.white,
                                            //     child: Container(
                                            //       width: 115,
                                            //       height: 70,
                                            //       child: Align(
                                            //           alignment:
                                            //               Alignment.center,
                                            //           child: Padding(
                                            //             padding:
                                            //                 const EdgeInsets
                                            //                     .all(8.0),
                                            //             child: Text("HFNO",
                                            //                 style: TextStyle(
                                            //                     fontSize: 20,
                                            //                     color: hfnoEnabled
                                            //                         ? Colors
                                            //                             .white
                                            //                         : Colors
                                            //                             .black,
                                            //                     fontWeight:
                                            //                         FontWeight
                                            //                             .bold)),
                                            //           )),
                                            //     ),
                                            //   ),
                                            // ),
                                            // InkWell(
                                            //   onTap: () {
                                            //     setState(() {
                                            //       pccmvEnabled = false;
                                            //       vccmvEnabled = false;
                                            //       pacvEnabled = false;
                                            //       vacvEnabled = false;
                                            //       psimvEnabled = false;
                                            //       vsimvEnabled = false;
                                            //       psvEnabled = false;
                                            //       prvcEnabled = false;

                                            //       autoEnabled = false;
                                            //       cpapEnabled = true;
                                            //     });
                                            //   },
                                            //   child: Card(
                                            //     color: cpapEnabled
                                            //         ? Colors.blue
                                            //         : Colors.white,
                                            //     child: Container(
                                            //       width: 104,
                                            //       height: 70,
                                            //       child: Align(
                                            //           alignment:
                                            //               Alignment.center,
                                            //           child: Padding(
                                            //             padding:
                                            //                 const EdgeInsets
                                            //                     .all(8.0),
                                            //             child: Text("CPAP",
                                            //                 style: TextStyle(
                                            //                     fontSize: 20,
                                            //                     color: cpapEnabled
                                            //                         ? Colors
                                            //                             .white
                                            //                         : Colors
                                            //                             .black,
                                            //                     fontWeight:
                                            //                         FontWeight
                                            //                             .bold)),
                                            //           )),
                                            //     ),
                                            //   ),
                                            // ),
                                            // InkWell(
                                            //   onTap: () {
                                            //     setState(() {
                                            //       // getData();
                                            //       pccmvEnabled = false;
                                            //       vccmvEnabled = false;
                                            //       pacvEnabled = false;
                                            //       vacvEnabled = false;
                                            //       psimvEnabled = false;
                                            //       vsimvEnabled = false;
                                            //       psvEnabled = false;
                                            //       prvcEnabled = false;
                                            //       autoEnabled = true;
                                            //       cpapEnabled = false;
                                            //     });
                                            //   },
                                            //   child: Card(
                                            //     color: autoEnabled
                                            //         ? Colors.blue
                                            //         : Colors.white,
                                            //     child: Container(
                                            //       width: 115,
                                            //       height: 70,
                                            //       child: Align(
                                            //           alignment:
                                            //               Alignment.center,
                                            //           child: Padding(
                                            //             padding:
                                            //                 const EdgeInsets
                                            //                     .all(8.0),
                                            //             child: Text("AUTO",
                                            //                 style: TextStyle(
                                            //                     fontSize: 20,
                                            //                     color: autoEnabled
                                            //                         ? Colors
                                            //                             .white
                                            //                         : Colors
                                            //                             .black,
                                            //                     fontWeight:
                                            //                         FontWeight
                                            //                             .bold)),
                                            //           )),
                                            //     ),
                                            //   ),
                                            // ),
                                          ],
                                        ),
                                      ),
                                      SizedBox(
                                        height: 10,
                                      ),
                                      modeDefaultSettings(),
                                      SizedBox(
                                        height: _isTab10 ? 90 : 20,
                                      ),
                                      Row(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Row(
                                            children: <Widget>[
                                              InkWell(
                                                onTap: () {
                                                  if (_parameterChangeEnabled ==
                                                      true) {
                                                    setState(() {
                                                      setData();
                                                    });
                                                  }
                                                },
                                                child: Container(
                                                  height: 80,
                                                  width: 80,
                                                  child: Card(
                                                    child: Center(
                                                        child: Padding(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              8.0),
                                                      child: Text(
                                                          "Default\nSettings",
                                                          textAlign:
                                                              TextAlign.center,
                                                          style: TextStyle(
                                                              fontSize: 10,
                                                              color:
                                                                  Colors.black,
                                                              fontWeight:
                                                                  FontWeight
                                                                      .bold)),
                                                    )),
                                                  ),
                                                ),
                                              ),
                                              // InkWell(
                                              //   onTap: () {
                                              //     setState(() {
                                              //       assistmodePressureOn =
                                              //           !assistmodePressureOn;
                                              //       if (assistStatus == "OFF") {
                                              //         assistStatus = "ON";
                                              //       } else if (assistStatus ==
                                              //           "ON") {
                                              //         assistStatus = "OFF";
                                              //       }
                                              //       if (assistmodePressureOn == true) {
                                              //         pacvEnabled = true;
                                              //         pccmvEnabled = false;
                                              //       } else {
                                              //         pccmvEnabled = true;
                                              //         pacvEnabled = false;
                                              //       }
                                              //     });
                                              //   },
                                              //   child: Container(
                                              //     height: 80,
                                              //     width: 80,
                                              //     child: Card(
                                              //       child: Center(
                                              //           child: Padding(
                                              //         padding:
                                              //             const EdgeInsets.all(
                                              //                 8.0),
                                              //         child: Text(
                                              //             "Assit \n" +
                                              //                 assistStatus,
                                              //             textAlign:
                                              //                 TextAlign.center,
                                              //             style: TextStyle(
                                              //                 fontSize: 10,
                                              //                 color:
                                              //                     Colors.black,
                                              //                 fontWeight:
                                              //                     FontWeight
                                              //                         .bold)),
                                              //       )),
                                              //     ),
                                              //   ),
                                              // ),
                                            ],
                                          ),

                                          _isTab10
                                              ? Container(
                                                  padding:
                                                      EdgeInsets.only(top: 5),
                                                  width: 255,
                                                  child: Row(
                                                    children: [
                                                      InkWell(
                                                        onTap: () {
                                                          setState(() {
                                                            invasiveEnabled =
                                                                true;
                                                            noninvasiveEnabled =
                                                                false;
                                                          });
                                                        },
                                                        child: Card(
                                                            color: invasiveEnabled
                                                                ? Color(
                                                                    0xFFE0E0E0)
                                                                : Color(
                                                                    0xFF213855),
                                                            child: Padding(
                                                              padding:
                                                                  const EdgeInsets
                                                                          .all(
                                                                      22.0),
                                                              child: Text(
                                                                "Invasive",
                                                                style:
                                                                    TextStyle(
                                                                  color: invasiveEnabled
                                                                      ? Color(
                                                                          0xFF213855)
                                                                      : Color(
                                                                          0xFFE0E0E0),
                                                                ),
                                                              ),
                                                            )),
                                                      ),
                                                      InkWell(
                                                        onTap: () {
                                                          setState(() {
                                                            noninvasiveEnabled =
                                                                true;
                                                            invasiveEnabled =
                                                                false;
                                                          });
                                                        },
                                                        child: Card(
                                                            color: noninvasiveEnabled
                                                                ? Color(
                                                                    0xFFE0E0E0)
                                                                : Color(
                                                                    0xFF213855),
                                                            child: Padding(
                                                              padding:
                                                                  const EdgeInsets
                                                                          .all(
                                                                      22.0),
                                                              child: Text(
                                                                "Non Invasive",
                                                                style:
                                                                    TextStyle(
                                                                  color: noninvasiveEnabled
                                                                      ? Color(
                                                                          0xFF213855)
                                                                      : Color(
                                                                          0xFFE0E0E0),
                                                                ),
                                                              ),
                                                            )),
                                                      ),
                                                    ],
                                                  ))
                                              : pacvEnabled ||
                                                      vccmvEnabled ||
                                                      vacvEnabled ||
                                                      psvEnabled
                                                  ? Container(
                                                      padding: EdgeInsets.only(
                                                          top: 5),
                                                      width: 255,
                                                      child: Row(
                                                        children: [
                                                          InkWell(
                                                            onTap: () {
                                                              setState(() {
                                                                invasiveEnabled =
                                                                    true;
                                                                noninvasiveEnabled =
                                                                    false;
                                                              });
                                                            },
                                                            child: Card(
                                                                color: invasiveEnabled
                                                                    ? Color(
                                                                        0xFFE0E0E0)
                                                                    : Color(
                                                                        0xFF213855),
                                                                child: Padding(
                                                                  padding:
                                                                      const EdgeInsets
                                                                              .all(
                                                                          22.0),
                                                                  child: Text(
                                                                    "Invasive",
                                                                    style:
                                                                        TextStyle(
                                                                      color: invasiveEnabled
                                                                          ? Color(
                                                                              0xFF213855)
                                                                          : Color(
                                                                              0xFFE0E0E0),
                                                                    ),
                                                                  ),
                                                                )),
                                                          ),
                                                          InkWell(
                                                            onTap: () {
                                                              setState(() {
                                                                noninvasiveEnabled =
                                                                    true;
                                                                invasiveEnabled =
                                                                    false;
                                                              });
                                                            },
                                                            child: Card(
                                                                color: noninvasiveEnabled
                                                                    ? Color(
                                                                        0xFFE0E0E0)
                                                                    : Color(
                                                                        0xFF213855),
                                                                child: Padding(
                                                                  padding:
                                                                      const EdgeInsets
                                                                              .all(
                                                                          22.0),
                                                                  child: Text(
                                                                    "Non Invasive",
                                                                    style:
                                                                        TextStyle(
                                                                      color: noninvasiveEnabled
                                                                          ? Color(
                                                                              0xFF213855)
                                                                          : Color(
                                                                              0xFFE0E0E0),
                                                                    ),
                                                                  ),
                                                                )),
                                                          ),
                                                        ],
                                                      ))
                                                  : Container(),
                                          //   Row(
                                          //   children: <Widget>[
                                          //    InkWell(
                                          //      onTap: (){
                                          //        setState((){
                                          //invasiveEnabled=true;
                                          //        noninvasiveEnabled= false;
                                          //        });
                                          //      },
                                          // child: Card(
                                          //       color: invasiveEnabled ? Colors.white : Colors.white,
                                          //       child: Padding(
                                          //         padding: const EdgeInsets.only(top:18.0,left:40,right:40,bottom:18),
                                          //         child: Text(
                                          // "Invasive",
                                          // style: TextStyle(
                                          //     color: invasiveEnabled
                                          //         ? Colors.green : Colors.black,),
                                          //         ),
                                          //       ),
                                          //   ),
                                          //    ),
                                          //  InkWell(
                                          //    onTap:(){
                                          //       setState((){
                                          //invasiveEnabled=false;
                                          //        noninvasiveEnabled= true;
                                          //        });
                                          //    },
                                          //       child: Card(
                                          //       color:
                                          // noninvasiveEnabled ? Colors.white : Colors.white,
                                          //       child: Padding(
                                          //         padding: const EdgeInsets.only(top:18.0,left:23,right:23,bottom:18),
                                          //         child: Text(
                                          // "Non Invasive",
                                          // style: TextStyle(
                                          //     color: noninvasiveEnabled
                                          //         ? Colors.green : Colors.black,),
                                          //         ),
                                          //       ),
                                          //     ),
                                          //  ),
                                          // ],),
                                          Padding(
                                            padding: const EdgeInsets.only(
                                                right: 10),
                                            child: Row(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.end,
                                              mainAxisAlignment:
                                                  MainAxisAlignment.end,
                                              children: [
                                                _modeChangeEnabled == false
                                                    ? InkWell(
                                                        onTap: () {
                                                          setState(() {
                                                            _modeChangeEnabled =
                                                                true;
                                                          });
                                                        },
                                                        child: Container(
                                                          height: 80,
                                                          width: 210,
                                                          child: Card(
                                                            child: Center(
                                                                child: Padding(
                                                              padding:
                                                                  const EdgeInsets
                                                                      .all(8.0),
                                                              child: Text(
                                                                  "Change Mode",
                                                                  style: TextStyle(
                                                                      fontSize:
                                                                          22,
                                                                      color: Colors
                                                                          .black,
                                                                      fontWeight:
                                                                          FontWeight
                                                                              .bold)),
                                                            )),
                                                          ),
                                                        ),
                                                      )
                                                    : Container(),
                                                InkWell(
                                                  onTap: () {
                                                    getData();
                                                    setState(() {
                                                      modesEnabled = false;
                                                      newTreatEnabled = false;
                                                      monitorEnabled = false;
                                                      _setValuesonClick = true;
                                                    });
                                                  },
                                                  child: Container(
                                                    height: 80,
                                                    width: 210,
                                                    child: Card(
                                                      child: Center(
                                                          child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .all(8.0),
                                                        child: Text("Cancel",
                                                            style: TextStyle(
                                                                fontSize: 22,
                                                                color: Colors
                                                                    .black,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .bold)),
                                                      )),
                                                    ),
                                                  ),
                                                ),
                                                InkWell(
                                                  onTap: () {
                                                    if (_parameterChangeEnabled ==
                                                        true) {
                                                      modeSetCheck();
                                                    }
                                                  },
                                                  child: Container(
                                                    height: 80,
                                                    width: 210,
                                                    child: Card(
                                                      child: Center(
                                                          child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .all(8.0),
                                                        child: Text("Confirm",
                                                            style: TextStyle(
                                                                fontSize: 22,
                                                                color: Colors
                                                                    .black,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .bold)),
                                                      )),
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      )
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        )),
                  ),
                ),
              ))),
    );
  }

  alarmClick() {
    return Container(
      color: Colors.transparent,
      child: Center(
          child: Align(
              alignment: Alignment.centerRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 0.0),
                child: Material(
                  color: Colors.blue,
                  elevation: 10.0,
                  shadowColor: Colors.blue,
                  borderRadius: BorderRadius.circular(10),
                  child: Padding(
                    padding: const EdgeInsets.all(5.0),
                    child: Container(
                        color: Color(0xFF171e27),
                        height: _isTab10 ? 790 : 590,
                        width: _isTab10 ? 1424 : 1024,
                        child: Center(
                          child: Stack(
                            children: [
                              Column(
                                children: [
                                  SizedBox(
                                    height: 20,
                                  ),
                                  Text("Alarm Settings",
                                      style: TextStyle(
                                          color: Colors.white, fontSize: 30)),
                                  SizedBox(
                                    height: _isTab10 ? 80 : 30,
                                  ),
                                  alarmsComponents(),
                                  SizedBox(
                                    height: _isTab10 ? 180 : 30,
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        right: 10, top: 10, left: 20),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
// InkWell(
//   onTap: () {
//     setState(() {
//       alarmRRchanged = false;
//       alarmVtechanged = false;
//       alarmFio2changed = false;
//       alarmpeepchanged = false;
//       alarmPpeakchanged = false;
//       newTreatEnabled = false;
//       alarmEnabled = false;
//       alarmRR = false;
//       alarmVte = false;
//       alarmPpeak = false;
//       alarmpeep = false;
//       alarmFio2 = false;
//       newTreatEnabled = false;
//       alarmConfirmed = true;
//     });
//   },
//   child: Container(
//     height: 80,
//     width: 210,
//     child: Card(
//       child: Center(
// child: Padding(
//         padding:
//   const EdgeInsets.all(8.0),
//         child: Text("Exit",
//   style: TextStyle(
//       fontSize: 22,
//       color: Colors.black,
//       fontWeight:
// FontWeight.bold)),
//       )),
//     ),
//   ),
// ),

                                        alarmDisplayErrorEnabled
                                            ? Container(
                                                width: 550,
                                                height: 80,
                                                child: Card(
                                                  color: Colors.white,
                                                  child: Center(
                                                      child: Align(
                                                    alignment:
                                                        Alignment.centerLeft,
                                                    child: Center(
                                                      child: Text(
                                                        alarmDisplayError,
                                                        style: TextStyle(
                                                            color: Colors.red,
                                                            fontSize: 18),
                                                      ),
                                                    ),
                                                  )),
                                                ),
                                              )
                                            : Container(),
                                        Row(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.end,
                                          mainAxisAlignment:
                                              MainAxisAlignment.end,
                                          children: [
                                            InkWell(
                                              onTap: () {
                                                setState(() {
                                                  // alarmConfirmed = true;
                                                  alarmRRchanged = false;
                                                  alarmVtechanged = false;
                                                  alarmFio2changed = false;
                                                  alarmpeepchanged = false;
                                                  alarmPpeakchanged = false;
                                                  alarmvchanged = false;
                                                  alarmlvchanged = false;
                                                  newTreatEnabled = false;
                                                  alarmEnabled = false;
                                                  alarmRR = false;
                                                  alarmVte = false;
                                                  alarmPpeak = false;
                                                  alarmpeep = false;
                                                  alarmFio2 = false;
                                                  alarmmv = false;
                                                  alarmlv = false;
                                                  newTreatEnabled = false;
                                                  alarmConfirmed = true;
                                                });
                                              },
                                              child: Container(
                                                height: 80,
                                                width: 210,
                                                child: Card(
                                                  child: Center(
                                                      child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            8.0),
                                                    child: Text("Cancel",
                                                        style: TextStyle(
                                                            fontSize: 22,
                                                            color: Colors.black,
                                                            fontWeight:
                                                                FontWeight
                                                                    .bold)),
                                                  )),
                                                ),
                                              ),
                                            ),
                                            InkWell(
                                              onTap: () {
                                                writeAlarmsData();
                                              },
                                              child: Container(
                                                height: 80,
                                                width: 210,
                                                child: Card(
                                                  child: Center(
                                                      child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            8.0),
                                                    child: Text("Confirm",
                                                        style: TextStyle(
                                                            fontSize: 22,
                                                            color: Colors.black,
                                                            fontWeight:
                                                                FontWeight
                                                                    .bold)),
                                                  )),
                                                ),
                                              ),
                                            ),
                                          ],
                                        )
                                      ],
                                    ),
                                  )
                                ],
                              ),
                            ],
                          ),
                        )),
                  ),
                ),
              ))),
    );
  }

  systemClick() {
    return Container(
      color: Colors.transparent,
      child: Center(
          child: Align(
              alignment: Alignment.centerRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 110.0),
                child: Material(
                  color: Colors.blue,
                  elevation: 10.0,
                  shadowColor: Colors.blue,
                  borderRadius: BorderRadius.circular(10),
                  child: Padding(
                    padding: const EdgeInsets.all(5.0),
                    child: Container(
                        color: Color(0xFF171e27),
                        height: 590,
                        width: 904,
                        child: Center(
                          child: Stack(
                            children: [
                              Align(
                                alignment: Alignment.center,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    SizedBox(
                                      height: 360,
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(right: 15),
                                      child: Row(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.end,
                                        mainAxisAlignment:
                                            MainAxisAlignment.end,
                                        children: [
                                          InkWell(
                                            onTap: () {
                                              setState(() {
                                                modesEnabled = false;
                                                newTreatEnabled = false;

                                                monitorEnabled = false;
                                              });
                                            },
                                            child: Container(
                                              height: 80,
                                              width: 210,
                                              child: Card(
                                                child: Center(
                                                    child: Padding(
                                                  padding:
                                                      const EdgeInsets.all(8.0),
                                                  child: Text("Cancel",
                                                      style: TextStyle(
                                                          fontSize: 22,
                                                          color: Colors.black,
                                                          fontWeight:
                                                              FontWeight.bold)),
                                                )),
                                              ),
                                            ),
                                          ),
                                          Container(
                                            height: 80,
                                            width: 210,
                                            child: Card(
                                              child: Center(
                                                  child: Padding(
                                                padding:
                                                    const EdgeInsets.all(8.0),
                                                child: Text("Confirm",
                                                    style: TextStyle(
                                                        fontSize: 22,
                                                        color: Colors.black,
                                                        fontWeight:
                                                            FontWeight.bold)),
                                              )),
                                            ),
                                          ),
                                        ],
                                      ),
                                    )
                                  ],
                                ),
                              ),
                            ],
                          ),
                        )),
                  ),
                ),
              ))),
    );
  }

  monitorClick() {
    return Container(
      color: Colors.transparent,
      child: Center(
          child: Align(
              alignment: Alignment.centerRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 110.0),
                child: Material(
                  color: Colors.blue,
                  elevation: 10.0,
                  shadowColor: Colors.blue,
                  borderRadius: BorderRadius.circular(10),
                  child: Padding(
                    padding: const EdgeInsets.all(5.0),
                    child: Container(
                        color: Color(0xFF171e27),
                        height: 590,
                        width: 904,
                        child: Center(
                          child: Stack(
                            children: [
// Align(
//   alignment: Alignment(1.02, -1.03),
//   child: InkWell(
//     onTap: () {
//       setState(() {
//         modesEnabled = false;
//         newTreatEnabled = false;

//         monitorEnabled = false;
//       });
//     },
//     child: Container(
//       decoration: BoxDecoration(
//         color: Colors.red,
//         borderRadius: BorderRadius.circular(22),
//       ),
//       child: Padding(
//         padding: const EdgeInsets.all(12.0),
//         child: Icon(
// Icons.close,
// color: Colors.white,
//         ),
//       ),
//     ),
//   ),
// ),
                              Align(
                                alignment: Alignment.center,
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    SizedBox(
                                      height: 360,
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(right: 15),
                                      child: Row(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.end,
                                        mainAxisAlignment:
                                            MainAxisAlignment.end,
                                        children: [
                                          InkWell(
                                            onTap: () {
                                              setState(() {
                                                modesEnabled = false;
                                                newTreatEnabled = false;

                                                monitorEnabled = false;
                                              });
                                            },
                                            child: Container(
                                              height: 80,
                                              width: 210,
                                              child: Card(
                                                child: Center(
                                                    child: Padding(
                                                  padding:
                                                      const EdgeInsets.all(8.0),
                                                  child: Text("Cancel",
                                                      style: TextStyle(
                                                          fontSize: 22,
                                                          color: Colors.black,
                                                          fontWeight:
                                                              FontWeight.bold)),
                                                )),
                                              ),
                                            ),
                                          ),
                                          Container(
                                            height: 80,
                                            width: 210,
                                            child: Card(
                                              child: Center(
                                                  child: Padding(
                                                padding:
                                                    const EdgeInsets.all(8.0),
                                                child: Text("Confirm",
                                                    style: TextStyle(
                                                        fontSize: 22,
                                                        color: Colors.black,
                                                        fontWeight:
                                                            FontWeight.bold)),
                                              )),
                                            ),
                                          ),
                                        ],
                                      ),
                                    )
                                  ],
                                ),
                              ),
                            ],
                          ),
                        )),
                  ),
                ),
              ))),
    );
  }

  rightBar() {
    return Stack(
      children: [
        Container(
          padding: EdgeInsets.only(left: 0, top: 0),
          child: Container(
            width: _isTab10 ? 160 : 120,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                SizedBox(
                  height: 4,
                ),
                InkWell(
                  onTap: () {
                    playOnEnabled
                        ? Navigator.push(context,
                            MaterialPageRoute(builder: (context) => About()))
                        : "";
                  },
                  child: _isTab10
                      ? Row(
                          children: <Widget>[
                            Text(
                              "SWASIT",
                              style: TextStyle(
                                  color: Colors.orange,
                                  fontSize: 34,
                                  fontFamily: "appleFont"),
                            ),
                            Padding(
                              padding:
                                  const EdgeInsets.only(bottom: 18.0, left: 4),
                              child: Image.asset(
                                "assets/images/plus.png",
                                width: 18,
                              ),
                            ),
                          ],
                        )
                      : Text(
                          "SWASIT",
                          style: TextStyle(
                              color: Colors.orange,
                              fontSize: 34,
                              fontFamily: "appleFont"),
                        ),
                ),
                Text(
                  "v1.8.6j",
                  style: TextStyle(
                      color: Colors.white,
                      fontSize: _isTab10 ? 18 : 10,
                      fontFamily: "appleFont"),
                ),
                SizedBox(
                  height: 2,
                ),
                powerButtonEnabled
                    ? InkWell(
                        onTap: () {
                          lockEnabled ? sendSoundOff() : "";
                          lockEnabled ? turnOffScreen() : "";
                        },
                        child: Padding(
                          padding:
                              const EdgeInsets.only(right: 40.0, bottom: 20),
                          child: IconButton(
                            icon: Icon(Icons.power_settings_new,
                                size: 70, color: Colors.red),
                            onPressed: () {
                              lockEnabled ? turnOffScreen() : "";
                            },
                          ),
                        ),
                      )
                    : Container(height: 70),
                SizedBox(
                  height: _isTab10 ? 20 : 0,
                ),
                playpauseButtonEnabled
                    ? Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          playOnEnabled
                              ? InkWell(
                                  onTap: () {
                                    lockEnabled ? showDialogPlay() : "";
                                  },
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        right: 28.0, bottom: 10),
                                    child: IconButton(
                                        icon: Icon(
                                          Icons.play_circle_filled,
                                          color: lockEnabled == false
                                              ? Colors.grey
                                              : Colors.green,
                                          size: 60,
                                        ),
                                        onPressed: () {
                                          lockEnabled ? showDialogPlay() : "";
                                        }),
                                  ),
                                )
                              : InkWell(
                                  onTap: () {
                                    lockEnabled ? showDialogPause() : "";
                                  },
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        right: 28.0, bottom: 20),
                                    child: IconButton(
                                        icon: Icon(
                                          Icons.pause_circle_filled,
                                          color: lockEnabled == false
                                              ? Colors.grey
                                              : Colors.blue,
                                          size: 60,
                                        ),
                                        onPressed: () {
                                          lockEnabled ? showDialogPause() : "";
                                        }),
                                  ),
                                ),
                        ],
                      )
                    : Container(height: 60),
                SizedBox(
                  height: _isTab10 ? 270 : 130,
                ),
                playOnEnabled
                    ? Column(
                        children: [
                          InkWell(
                            onTap: () async {
                              preferences.setBool('_isFlagTest', true);
                              _newtreatmentMethod();
                            },
                            child: Center(
                              child: Container(
                                width: _isTab10 ? 140 : 120,
                                child: Card(
                                  color:
                                      lockEnabled ? Colors.white : Colors.grey,
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 12.0,
                                        right: 12.0,
                                        top: 12,
                                        bottom: 12),
                                    child: Center(
                                        child: Text(
                                      "New Patient",
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: lockEnabled
                                              ? Colors.black
                                              : Colors.white),
                                    )),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      )
                    : Column(
                        children: [
                          InkWell(
                            onTap: () async {},
                            child: Center(
                              child: Container(
                                width: _isTab10 ? 140 : 120,
                                child: Card(
                                  color: Colors.grey,
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 12.0,
                                        right: 12.0,
                                        top: 12,
                                        bottom: 12),
                                    child: Center(
                                        child: Text(
                                      "New Patient",
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: Colors.white),
                                    )),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                InkWell(
                  onTap: () {
                    setState(() {
                      if (check1 == 1 && check2 == 1) {
                        lockEnabled ? alarmEnabled = true : "";
                        lockEnabled ? alarmEnabled = true : "";
                      }
                    });
                  },
                  child: Center(
                    child: Container(
                      width: _isTab10 ? 140 : 120,
                      child: Card(
                        color: lockEnabled ? Colors.white : Colors.grey,
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Center(
                              child: Text(
                            "Alarms ",
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: lockEnabled ? Colors.black : Colors.white,
                            ),
                          )),
                        ),
                      ),
                    ),
                  ),
                ),
                InkWell(
                  onTap: () async {
                    lockEnabled ? getData() : "";
                    if (check1 == 1 && check2 == 1) {
                      setState(() {
                        lockEnabled ? _setValuesonClick = false : "";
                        lockEnabled ? modesEnabled = true : "";
                      });
                    }
                  },
                  child: Center(
                    child: Container(
                      width: _isTab10 ? 140 : 120,
                      height: 80,
                      child: Card(
                        color: lockEnabled ? Colors.white : Colors.grey,
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Center(
                              child: Text(
                            "Modes ",
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: lockEnabled ? Colors.black : Colors.white,
                            ),
                          )),
                        ),
                      ),
                    ),
                  ),
                ),
                audioEnable
                    ? InkWell(
                        onTap: () {
                          setState(() {
                            audioEnable = false;
                            sendSoundOff();
                          });
                        },
                        child: Center(
                          child: Image.asset(
                            "assets/images/bell_line.png",
                            color: Colors.white,
                            width: 98,
                          ),
                        ),
                      )
                    : InkWell(
                        onTap: () {
                          setState(() {
                            audioEnable = true;
                            sendSoundOn();
                          });
                        },
                        child: Center(
                          child: Image.asset(
                            "assets/images/bell_silent_line.png",
                            color: Colors.grey,
                            width: 98,
                          ),
                        ),
                      ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  _newtreatmentMethod() async {
    var data = await Navigator.push(
      context,
      MaterialPageRoute(
          builder: (context) => NewTreatmentScreen(
              0,
              patientId != "" ? patientId.toString() : "",
              "SWASIT " + globalCounter.toString())),
    );
    if (data == "1") {
      getData();
    }
  }

  // main(data, data1, data2, data3, params) {
  main() {
    return Stack(
      children: [
        topbar(),
        leftbar(),
        Stack(
          children: [
            Container(
              child: Container(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Container(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          SizedBox(width: _isTab10 ? 5 : 10),
                          // _isLoopGraph == true
                          //         ? loopsGraphs() : Container(),
                          _isLoopGraph == false
                              // ? graphsScale(data, data1, data2, data3, params)
                              ? graphs()
                              : loopsGraphs(),
                          SizedBox(width: _isTab10 ? 5 : 25),
                          Container(
                            margin: EdgeInsets.only(top: 40),
                            width: 1,
                            height: _isTab10 ? 600 : 440,
                            color: Colors.white,
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                SizedBox(
                                  height: 30,
                                ),
                                Column(
                                  children: [
                                    Center(
                                      child: Container(
                                        color: Color(0xFF171e27),
                                        width: 170,
                                        height: _isTab10 ? 115 : 81,
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                              top: 2, left: 4),
                                          child: Center(
                                              child: Stack(
                                            children: [
                                              Align(
                                                alignment: Alignment.topLeft,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.all(2.0),
                                                  child: Text("",
                                                      style: TextStyle(
                                                          color: Colors.yellow,
                                                          fontSize: 10)),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.bottomLeft,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          bottom: 5.0,
                                                          left: 4.0),
                                                  child: Text(
                                                    "cmH\u2082O",
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize: 10),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.center,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          right: 8.0),
                                                  child: Text(
                                                    mapDisplayValue.toString(),
                                                    // "000",
                                                    style: TextStyle(
                                                        color: Colors.yellow,
                                                        fontSize:
                                                            _isTab10 ? 40 : 35),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.topLeft,
                                                child: Container(
                                                  margin: EdgeInsets.only(
                                                      bottom: 60, left: 4),
                                                  child: Text(
                                                    "P mean",
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize:
                                                            _isTab10 ? 20 : 12),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                  alignment:
                                                      Alignment.bottomCenter,
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.only(
                                                            top: 18.0),
                                                    child: Divider(
                                                      color: Colors.white,
                                                      height: 1,
                                                    ),
                                                  ))
                                            ],
                                          )),
                                        ),
                                      ),
                                    ),
                                    Center(
                                      child: Container(
                                        color: Color(0xFF171e27),
                                        width: 170,
                                        height: _isTab10 ? 115 : 81,
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                              top: 2, left: 4),
                                          child: Center(
                                              child: Stack(
                                            children: [
                                              Align(
                                                alignment: Alignment.bottomLeft,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          bottom: 5.0, left: 4),
                                                  child: Text(
                                                    "L/m",
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize: 10),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.bottomLeft,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.all(2.0),
                                                  child: Text(
                                                    "",
                                                    style: TextStyle(
                                                        color: Colors.green,
                                                        fontSize: 10),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.center,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          right: 8.0),
                                                  child: Text(
                                                    mvValuea != null
                                                        ? (mvValuea / 1000)
                                                            .toStringAsFixed(3)
                                                        : "0",
                                                    // "0000",
                                                    style: TextStyle(
                                                        color: Colors.green,
                                                        fontSize:
                                                            _isTab10 ? 40 : 35),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.centerLeft,
                                                child: Container(
                                                  margin: EdgeInsets.only(
                                                      bottom: 60, left: 4),
                                                  child: Text(
                                                    "MVe",
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize:
                                                            _isTab10 ? 20 : 12),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                  alignment:
                                                      Alignment.bottomCenter,
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.only(
                                                            top: 18.0),
                                                    child: Divider(
                                                      color: Colors.white,
                                                      height: 1,
                                                    ),
                                                  ))
                                            ],
                                          )),
                                        ),
                                      ),
                                    ),
                                    // Container(
                                    //   height: 162,
                                    // )
                                    Center(
                                      child: Container(
                                        color: Color(0xFF171e27),
                                        width: 170,
                                        height: _isTab10 ? 115 : 81,
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                              top: 2, left: 4),
                                          child: Center(
                                              child: Stack(
                                            children: [
                                              Align(
                                                alignment: Alignment.topRight,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.all(2.0),
                                                  child: Text("",
                                                      style: TextStyle(
                                                          color: Colors.white,
                                                          fontSize: 10)),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.bottomLeft,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.all(2.0),
                                                  child: Text(
                                                    "cmH\u2082O",
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize: 10),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.center,
                                                child: Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          right: 12.0),
                                                  child: Text(
                                                    // _buttonPressed
                                                    //     ?

                                                    pplateauDisplay != null
                                                        ? pplateauDisplay
                                                            .toStringAsFixed(0)
                                                        : ""
                                                    // : "--"
                                                    ,
                                                    // "0000",
                                                    style: TextStyle(
                                                        color: Colors.pink,
                                                        fontSize:
                                                            _isTab10 ? 40 : 35),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.centerLeft,
                                                child: Container(
                                                  margin: EdgeInsets.only(
                                                      bottom: 60, left: 4),
                                                  child: Text(
                                                    "P Plateau",
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize:
                                                            _isTab10 ? 18 : 12),
                                                  ),
                                                ),
                                              ),
                                              Align(
                                                  alignment:
                                                      Alignment.bottomCenter,
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.only(
                                                            top: 18.0),
                                                    child: Divider(
                                                      color: Colors.white,
                                                      height: 1,
                                                    ),
                                                  ))
                                            ],
                                          )),
                                        ),
                                      ),
                                    ),
                                    Row(
                                      children: <Widget>[
                                        Center(
                                          child: Container(
                                            color: Color(0xFF171e27),
                                            width: 85,
                                            height: _isTab10 ? 115 : 81,
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(5.0),
                                              child: Center(
                                                  child: Stack(
                                                children: [
                                                  Align(
                                                    alignment:
                                                        Alignment.topLeft,
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              2.0),
                                                      child: Text("",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.green,
                                                              fontSize: 10)),
                                                    ),
                                                  ),
                                                  Align(
                                                    alignment:
                                                        Alignment.bottomLeft,
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              2.0),
                                                      child: Text(
                                                        "s",
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: 14),
                                                      ),
                                                    ),
                                                  ),
                                                  Align(
                                                    alignment: Alignment.center,
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.only(
                                                              right: 8.0),
                                                      child: Text(
                                                        tiValue.toString() ==
                                                                "NaN"
                                                            ? "0"
                                                            : tiValue
                                                                    ?.toStringAsFixed(
                                                                        2) ??
                                                                "0",
                                                        // "0000",
                                                        style: TextStyle(
                                                            color: Colors.blue,
                                                            fontSize: _isTab10
                                                                ? 25
                                                                : 18),
                                                      ),
                                                    ),
                                                  ),
                                                  Align(
                                                    alignment:
                                                        Alignment.topLeft,
                                                    child: Container(
                                                      margin: EdgeInsets.only(
                                                          bottom: 50, left: 4),
                                                      child: Text(
                                                        "Ti" +
                                                            " (" +
                                                            checkI((receivedi /
                                                                    10)
                                                                .toDouble()
                                                                .toString()) +
                                                            ")",
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: _isTab10
                                                                ? 20
                                                                : 12),
                                                      ),
                                                    ),
                                                  ),
                                                  Align(
                                                      alignment: Alignment
                                                          .bottomCenter,
                                                      child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                    .only(
                                                                top: 18.0),
                                                        child: Divider(
                                                          color: Colors.white,
                                                          height: 1,
                                                        ),
                                                      ))
                                                ],
                                              )),
                                            ),
                                          ),
                                        ),
                                        Center(
                                          child: Container(
                                            color: Color(0xFF171e27),
                                            width: 85,
                                            height: _isTab10 ? 115 : 81,
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(5.0),
                                              child: Center(
                                                  child: Stack(
                                                children: [
                                                  Align(
                                                    alignment:
                                                        Alignment.topLeft,
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              2.0),
                                                      child: Text("",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.green,
                                                              fontSize: 10)),
                                                    ),
                                                  ),
                                                  Align(
                                                    alignment:
                                                        Alignment.bottomLeft,
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              2.0),
                                                      child: Text(
                                                        "s",
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: 14),
                                                      ),
                                                    ),
                                                  ),
                                                  Align(
                                                    alignment: Alignment.center,
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.only(
                                                              right: 8.0),
                                                      child: Text(
                                                        teValue.toString() ==
                                                                "NaN"
                                                            ? "0"
                                                            : teValue
                                                                    ?.toStringAsFixed(
                                                                        2) ??
                                                                "0",
                                                        // "0000",
                                                        style: TextStyle(
                                                            color: Colors.blue,
                                                            fontSize: _isTab10
                                                                ? 25
                                                                : 18),
                                                      ),
                                                    ),
                                                  ),
                                                  Align(
                                                    alignment:
                                                        Alignment.topLeft,
                                                    child: Container(
                                                      margin: EdgeInsets.only(
                                                          bottom: 50, left: 4),
                                                      child: Text(
                                                        "Te" +
                                                            " (" +
                                                            checkE((receivede /
                                                                    10)
                                                                .toDouble()
                                                                .toString()) +
                                                            ")",
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: _isTab10
                                                                ? 20
                                                                : 12),
                                                      ),
                                                    ),
                                                  ),
                                                  Align(
                                                      alignment: Alignment
                                                          .bottomCenter,
                                                      child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                    .only(
                                                                top: 18.0),
                                                        child: Divider(
                                                          color: Colors.white,
                                                          height: 1,
                                                        ),
                                                      ))
                                                ],
                                              )),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                                SizedBox(
                                  height: 6,
                                ),
                                Stack(
                                  children: [
                                    insExpButtonEnable == false
                                        ? Align(
                                            alignment: Alignment.center,
                                            child: Row(
                                              mainAxisAlignment:
                                                  MainAxisAlignment.start,
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.start,
                                              children: [
                                                Stack(
                                                  children: [
                                                    Image.asset(
                                                        lungImage == 1
                                                            ? "assets/lungs/1.png"
                                                            : lungImage == 2
                                                                ? "assets/lungs/2.png"
                                                                : lungImage == 3
                                                                    ? "assets/lungs/3.png"
                                                                    : lungImage ==
                                                                            4
                                                                        ? "assets/lungs/4.png"
                                                                        : lungImage ==
                                                                                5
                                                                            ? "assets/lungs/5.png"
                                                                            : "assets/lungs/1.png",
                                                        width: 120,
                                                        color: amsDisplayParamter ==
                                                                "A"
                                                            ? Colors.pink[200]
                                                            : amsDisplayParamter ==
                                                                    "S"
                                                                ? Colors
                                                                    .green[200]
                                                                : Colors.white),
                                                  ],
                                                ),
                                                Column(
                                                  children: <Widget>[
                                                    Container(
                                                      height: 40,
                                                      width: 40,
                                                      decoration:
                                                          new BoxDecoration(
                                                        borderRadius:
                                                            new BorderRadius
                                                                .circular(25.0),
                                                        border: new Border.all(
                                                          width: 2.0,
                                                          color: Colors.green,
                                                        ),
                                                      ),
                                                      child: Center(
                                                          child: Text(
                                                              ioreDisplayParamter,
                                                              style: TextStyle(
                                                                  color: Colors
                                                                      .white,
                                                                  fontSize:
                                                                      18))),
                                                    ),
                                                    Container(
                                                      margin: EdgeInsets.only(
                                                          top: 40),
                                                      height: 40,
                                                      width: 40,
                                                      decoration:
                                                          new BoxDecoration(
                                                        borderRadius:
                                                            new BorderRadius
                                                                .circular(25.0),
                                                        border: new Border.all(
                                                          width: 2.0,
                                                          color: Colors.green,
                                                        ),
                                                      ),
                                                      child: Center(
                                                          child: Text(
                                                              amsDisplayParamter,
                                                              style: TextStyle(
                                                                  color: Colors
                                                                      .white,
                                                                  fontSize:
                                                                      18))),
                                                    ),
                                                  ],
                                                ),
                                              ],
                                            ),
                                          )
                                        : Column(
                                            children: <Widget>[
                                              Center(
                                                child: Listener(
                                                  onPointerDown: (details) {
                                                    writeRespiratoryPauseData(
                                                        1);

                                                    // _inpirationPressed = true;
                                                    turnoffSendingboolI = false;
                                                    _buttonPressed = true;
                                                    _increaseCounterWhilePressed();
                                                  },
                                                  onPointerUp: (details) {
                                                    writeRespiratoryPauseData(
                                                        0);
                                                    setState(() {
                                                      timerCounter = 0;
                                                      _buttonPressed = false;
                                                      // _inpirationPressed = false;
                                                    });
                                                  },
                                                  child: Container(
                                                    child: Material(
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              4.0),
                                                      color: Colors.green,
                                                      child: Container(
                                                        width: 135,
                                                        height: 58.5,
                                                        child: Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .all(2.0),
                                                          child: Center(
                                                              child: Stack(
                                                            children: [
                                                              Align(
                                                                alignment:
                                                                    Alignment
                                                                        .center,
                                                                child: Text(
                                                                  "Inspiratory \n Pause",
                                                                  style: TextStyle(
                                                                      fontSize:
                                                                          12,
                                                                      fontWeight:
                                                                          FontWeight
                                                                              .bold,
                                                                      color: Colors
                                                                          .white),
                                                                  textAlign:
                                                                      TextAlign
                                                                          .center,
                                                                ),
                                                              ),
                                                            ],
                                                          )),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                                // ),
                                              ),
                                              SizedBox(height: 6),
                                              Center(
                                                child: Listener(
                                                  onPointerDown: (details) {
                                                    writeRespiratoryPauseData(
                                                        2);
                                                    // _inpirationPressed = true;
                                                    _buttonPressedE = true;
                                                    turnoffSendingboolE = false;
                                                    _increaseCounterWhilePressedE();
                                                  },
                                                  onPointerUp: (details) {
                                                    writeRespiratoryPauseData(
                                                        0);
                                                    setState(() {
                                                      timerCounter = 0;
                                                      _buttonPressedE = false;
                                                      // _inpirationPressed = false;
                                                    });
                                                  },
                                                  child: Container(
                                                    child: Material(
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              4.0),
                                                      color: Colors.green,
                                                      child: Container(
                                                        width: 135,
                                                        height: 58.5,
                                                        child: Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .all(2.0),
                                                          child: Center(
                                                              child: Stack(
                                                            children: [
                                                              Align(
                                                                alignment:
                                                                    Alignment
                                                                        .center,
                                                                child: Text(
                                                                  "Expiratory \n Pause",
                                                                  style: TextStyle(
                                                                      fontSize:
                                                                          12,
                                                                      fontWeight:
                                                                          FontWeight
                                                                              .bold,
                                                                      color: Colors
                                                                          .white),
                                                                  textAlign:
                                                                      TextAlign
                                                                          .center,
                                                                ),
                                                              ),
                                                            ],
                                                          )),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ),
                                              SizedBox(height: 5),
                                            ],
                                          ),
                                  ],
                                )
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                    Row(
                      children: <Widget>[
                        modeName == "PSV" ||
                                operatinModeR == 3 ||
                                modeName == "CPAP" ||
                                operatinModeR == 20 ||
                                operatinModeR == 21 ||
                                modeName == "AUTO"
                            ? psvBottomBar()
                            : bottombar(),
                        lockEnabled
                            ? respiratoryEnable == true
                                ? InkWell(
                                    onTap: () {
                                      insExpButtonEnable = !insExpButtonEnable;
                                    },
                                    child: Container(
                                      padding: EdgeInsets.only(left: 22.0),
                                      child: Center(
                                        child: Material(
                                          borderRadius:
                                              BorderRadius.circular(24.0),
                                          color: insExpButtonEnable
                                              ? Colors.white
                                              : Colors.green,
                                          child: Container(
                                            width: 160,
                                            height: 110,
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(12.0),
                                              child: Center(
                                                  child: Stack(
                                                children: [
                                                  Align(
                                                    alignment: Alignment.center,
                                                    child: Text(
                                                      "Respiratory \n Pause",
                                                      style: TextStyle(
                                                          fontSize: 18,
                                                          fontWeight:
                                                              FontWeight.bold,
                                                          color:
                                                              insExpButtonEnable
                                                                  ? Colors.black
                                                                  : Colors
                                                                      .white),
                                                      textAlign:
                                                          TextAlign.center,
                                                    ),
                                                  ),
//   Align(
//   alignment: Alignment.centerRight,
//   child: Padding(
//     padding: const EdgeInsets.only(top: 17.0),
//     child: Icon(
//         lockEnabled ? Icons.lock_open : Icons.lock,
//         color: Colors.white,
//         size: 15),
//   ),
// ),
                                                ],
                                              )),
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  )
                                : Container()
                            : respiratoryEnable == true
                                ? InkWell(
                                    onTap: () {
                                      // insExpButtonEnable =! insExpButtonEnable;
                                    },
                                    child: Container(
                                      padding: EdgeInsets.only(left: 22.0),
                                      child: Center(
                                        child: Material(
                                          borderRadius:
                                              BorderRadius.circular(24.0),
                                          color: Colors.grey,
                                          child: Container(
                                            width: 160,
                                            height: 110,
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(12.0),
                                              child: Center(
                                                  child: Stack(
                                                children: [
                                                  Align(
                                                    alignment: Alignment.center,
                                                    child: Text(
                                                      "Respiratory \n Pause",
                                                      style: TextStyle(
                                                          fontSize: 18,
                                                          fontWeight:
                                                              FontWeight.bold,
                                                          color: Colors.white),
                                                      textAlign:
                                                          TextAlign.center,
                                                    ),
                                                  ),
//   Align(
//   alignment: Alignment.centerRight,
//   child: Padding(
//     padding: const EdgeInsets.only(top: 17.0),
//     child: Icon(
//         lockEnabled ? Icons.lock_open : Icons.lock,
//         color: Colors.white,
//         size: 15),
//   ),
// ),
                                                ],
                                              )),
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  )
                                : Container(),
                      ],
                    )
                  ],
                ),
              ),
            ),
            Container(
              margin: EdgeInsets.only(top: 40, left: 175),
              width: 1,
              height: _isTab10 ? 600 : 440,
              color: Colors.white,
            ),
          ],
        ),
      ],
    );
  }

  psvBottomBar() {
    return Container(
      color: Color(0xFF171e27),
      width: _isTab10 ? 908 : 700,
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            modeName == "CPAP" || operatinModeR == 20
                ? Container()
                : InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("PPSV")
                            : "";
                      } else {}
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("PPSV")
                            : "";
                      } else {}
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "PS",
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 12,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      receivedps.toString(),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled
                          ? ""
                          : operatinModeR == 21
                              ? CommonClick("APEEP")
                              : modeName == "CPAP" || operatinModeR == 20
                                  ? CommonClick("CPAP")
                                  : CommonClick("PEEP")
                      : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled
                          ? ""
                          : operatinModeR == 21
                              ? CommonClick("APEEP")
                              : modeName == "CPAP" || operatinModeR == 20
                                  ? CommonClick("CPAP")
                                  : CommonClick("PEEP")
                      : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              modeName == "CPAP" || operatinModeR == 20
                                  ? "CPAP"
                                  : "peep".toUpperCase(),
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 12,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style:
                                  TextStyle(fontSize: 10, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                receivedpeep.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("FiO2") : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("FiO2") : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 12,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                receivedfio2.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            modeName == "AUTO" || operatinModeR == 21
                ? InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("Vt")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("Vt")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "VT",
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 18,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "mL",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      receivedvt.toString(),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  )
                : Container(),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("ITRI") : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("ITRI") : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                "-" + receivedItrig.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            modeName == "CPAP" || operatinModeR == 20
                ? Container()
                : InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("Ti")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("Ti")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "Ti",
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 18,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "s",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      ((receivedti / 1000).toDouble())
                                          .toString(),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  ),
            operatinModeR == 21 || modeName == "AUTO"
                ? Container()
                : pControl
                    ? InkWell(
                        onLongPress: () {
                          if (psvPsValue != 0) {
                          } else {
                            setState(() {
                              _setValuesonClick = false;
                            });
                            if (modeWriteList.isNotEmpty) {
                              lockEnabled
                                  ? playOnEnabled ? "" : CommonClick("PPCV")
                                  : "";
                            }
                          }
                        },
                        onTap: () {
                          if (psvPsValue != 0) {
                          } else {
                            setState(() {
                              _setValuesonClick = false;
                            });
                            if (modeWriteList.isNotEmpty) {
                              lockEnabled
                                  ? playOnEnabled ? "" : CommonClick("PPCV")
                                  : "";
                            }
                          }
                        },
                        child: Center(
                          child: Container(
                            width: _isTab10 ? 155 : 120,
                            height: _isTab10 ? 145 : 110,
                            child: Card(
                              elevation: 40,
                              color: lockEnabled
                                  ? psvPsValue != 0
                                      ? Colors.grey
                                      : Color(0xFF213855)
                                  : Colors.grey,
                              child: Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Center(
                                    child: Stack(
                                  children: [
                                    Align(
                                      alignment: Alignment.topLeft,
                                      child: Text(
                                        "PC",
                                        style: TextStyle(
                                            fontSize: _isTab10 ? 20 : 18,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white),
                                      ),
                                    ),
                                    Align(
                                      alignment: Alignment.topRight,
                                      child: Text(
                                        "cmH\u2082O",
                                        style: TextStyle(
                                            fontSize: 12, color: Colors.white),
                                      ),
                                    ),
                                    Align(
                                      alignment: Alignment.center,
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(top: 17.0),
                                        child: Text(
                                          receivedpc.toString(),
                                          style: TextStyle(
                                              fontSize: _isTab10 ? 50 : 30,
                                              color: Colors.white),
                                        ),
                                      ),
                                    ),
                                  ],
                                )),
                              ),
                            ),
                          ),
                        ),
                      )
                    : InkWell(
                        onLongPress: () {
                          setState(() {
                            _setValuesonClick = false;
                          });
                          if (modeWriteList.isNotEmpty) {
                            lockEnabled
                                ? playOnEnabled ? "" : CommonClick("Vt")
                                : "";
                          }
                        },
                        onTap: () {
                          setState(() {
                            _setValuesonClick = false;
                          });
                          if (modeWriteList.isNotEmpty) {
                            lockEnabled
                                ? playOnEnabled ? "" : CommonClick("Vt")
                                : "";
                          }
                        },
                        child: Center(
                          child: Container(
                            width: _isTab10 ? 155 : 120,
                            height: _isTab10 ? 145 : 110,
                            child: Card(
                              elevation: 40,
                              color:
                                  lockEnabled ? Color(0xFF213855) : Colors.grey,
                              child: Padding(
                                padding: const EdgeInsets.all(12.0),
                                child: Center(
                                    child: Stack(
                                  children: [
                                    Align(
                                      alignment: Alignment.topLeft,
                                      child: Text(
                                        "VT",
                                        style: TextStyle(
                                            fontSize: _isTab10 ? 20 : 18,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white),
                                      ),
                                    ),
                                    Align(
                                      alignment: Alignment.topRight,
                                      child: Text(
                                        "mL",
                                        style: TextStyle(
                                            fontSize: 12, color: Colors.white),
                                      ),
                                    ),
                                    Align(
                                      alignment: Alignment.center,
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(top: 17.0),
                                        child: Text(
                                          receivedvt.toString(),
                                          style: TextStyle(
                                              fontSize: _isTab10 ? 50 : 30,
                                              color: Colors.white),
                                        ),
                                      ),
                                    ),
                                  ],
                                )),
                              ),
                            ),
                          ),
                        ),
                      ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled ? "" : CommonClick("Apnea Time")
                      : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled ? "" : CommonClick("Apnea Time")
                      : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Apnea Time",
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 12,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "s",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                ((receivedapneaTime / 1000).toInt()).toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled ? "" : CommonClick("Backup RR")
                      : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled ? "" : CommonClick("Backup RR")
                      : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Backup RR",
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 12,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                receivedbackuprr.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            modeName == "CPAP" || operatinModeR == 20
                ? Container()
                : InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("Backup I:E")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("Backup I:E")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "Backup I:E",
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 15,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      checkI((receivedi / 10)
                                              .toDouble()
                                              .toString()) +
                                          ":" +
                                          checkE((receivede / 10)
                                              .toDouble()
                                              .toString()),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  ),
            operatinModeR == 21 || modeName == "AUTO"
                ? InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("PC MAX")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("PC MAX")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "PC Max".toUpperCase(),
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 16,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "",
                                    style: TextStyle(
                                        fontSize: 10, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      receivedpcmax.toString(),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  )
                : Container(),
          ],
        ),
      ),
    );
  }

  leftbar() {
    return Stack(
      children: [
        Container(
            child: Container(
          padding: EdgeInsets.only(top: 50),
          child: Column(
            children: [
              Center(
                child: Container(
                  color: Color(0xFF171e27),
                  width: 180,
                  height: _isTab10 ? 115 : 85,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 12, right: 12),
                    child: Center(
                        child: Stack(
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text("",
                                style: TextStyle(
                                    color: Colors.green, fontSize: 10)),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text(
                              "",
                              style:
                                  TextStyle(color: Colors.yellow, fontSize: 10),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.center,
                          child: Padding(
                            padding: const EdgeInsets.only(right: 5.0),
                            child: Text(
                              pipValue.toString(),
                              style: TextStyle(
                                  color: Colors.yellow,
                                  fontSize: _isTab10 ? 48 : 38),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.topLeft,
                          child: Padding(
                              padding:
                                  const EdgeInsets.only(left: 0.0, bottom: 65),
                              child: Row(
                                children: <Widget>[
                                  Text(
                                    "PIP",
                                    style: TextStyle(
                                        color: Colors.white,
                                        fontSize: _isTab10 ? 20 : 12),
                                  ),
                                  Text(" "),
                                  Text(
                                    "(PC+Peep",
                                    style: TextStyle(
                                        color: Colors.white, fontSize: 9),
                                  ),
                                  Text(" / ",
                                      style: TextStyle(color: Colors.white)),
                                  Text(
                                    "PS+Peep)",
                                    style: TextStyle(
                                        color: Colors.white, fontSize: 9),
                                  ),
                                ],
                              )),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "cmH\u2082O",
                              style:
                                  TextStyle(color: Colors.white, fontSize: 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(top: 0),
                          child: Align(
                            alignment: Alignment.topRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  "MAX",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                                Text(
                                  maxppeak.toString(),
                                  style: TextStyle(
                                      color: Colors.yellow, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.end,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  minppeak.toString(),
                                  style: TextStyle(
                                      color: Colors.yellow, fontSize: 12),
                                ),
                                Text(
                                  "MIN",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Align(
                            alignment: Alignment.bottomCenter,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Divider(
                                color: Colors.white,
                                height: 1,
                              ),
                            ))
                      ],
                    )),
                  ),
                ),
              ),
              Center(
                child: Container(
                  color: Color(0xFF171e27),
                  width: 180,
                  height: _isTab10 ? 115 : 85,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 12, right: 12),
                    child: Center(
                        child: Stack(
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text("",
                                style: TextStyle(
                                    color: Colors.green, fontSize: 10)),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text(
                              "",
                              style:
                                  TextStyle(color: Colors.green, fontSize: 10),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.center,
                          child: Padding(
                            padding: const EdgeInsets.only(right: 5.0),
                            child: Text(
                              vteValuea != null ? vteValuea.toString() : "0",
                              style: TextStyle(
                                  color: Colors.green,
                                  fontSize: _isTab10 ? 40 : 35),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.centerLeft,
                          child: Padding(
                            padding:
                                const EdgeInsets.only(left: 0.0, bottom: 60),
                            child: Text(
                              "VTe",
                              style: TextStyle(
                                  color: Colors.white,
                                  fontSize: _isTab10 ? 20 : 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "mL",
                              style:
                                  TextStyle(color: Colors.white, fontSize: 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(top: 0),
                          child: Align(
                            alignment: Alignment.topRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  "MAX",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                                Text(
                                  maxvte.toString(),
                                  style: TextStyle(
                                      color: Colors.green, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.end,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  // modeName == "VC-CMV" ||
                                  //         modeName == "VACV" ||
                                  //         modeName == "VSIMV"
                                  //     ? vteMinValue.toString()
                                  //     :
                                  minvte.toString(),
                                  ////""
                                  style: TextStyle(
                                      color: Colors.green, fontSize: 12),
                                ),
                                Text(
                                  "MIN",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Align(
                            alignment: Alignment.bottomCenter,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Divider(
                                color: Colors.white,
                                height: 1,
                              ),
                            ))
                      ],
                    )),
                  ),
                ),
              ),
              Center(
                child: Container(
                  color: Color(0xFF171e27),
                  width: 180,
                  height: _isTab10 ? 115 : 85,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 12, right: 12),
                    child: Center(
                        child: Stack(
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text("",
                                style: TextStyle(
                                    color: Colors.pink, fontSize: 10)),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text(
                              "",
                              style:
                                  TextStyle(color: Colors.pink, fontSize: 10),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.center,
                          child: Padding(
                            padding: const EdgeInsets.only(right: 5.0),
                            child: Text(
                              peepDisplayValue.toString(),
// "00",
                              style: TextStyle(
                                  color: Colors.pink,
                                  fontSize: _isTab10 ? 40 : 35),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.centerLeft,
                          child: Padding(
                            padding:
                                const EdgeInsets.only(left: 0.0, bottom: 60),
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  color: Colors.white,
                                  fontSize: _isTab10 ? 20 : 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "cmH\u2082O",
                              style:
                                  TextStyle(color: Colors.white, fontSize: 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(top: 0),
                          child: Align(
                            alignment: Alignment.topRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  "MAX",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                                Text(
                                  maxpeep.toString(),
                                  style: TextStyle(
                                      color: Colors.pink, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.end,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  minpeep.toString(),
                                  style: TextStyle(
                                      color: Colors.pink, fontSize: 12),
                                ),
                                Text(
                                  "MIN",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Align(
                            alignment: Alignment.bottomCenter,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Divider(
                                color: Colors.white,
                                height: 1,
                              ),
                            )),
                      ],
                    )),
                  ),
                ),
              ),
              Center(
                child: Container(
                  color: Color(0xFF171e27),
                  width: 180,
                  height: _isTab10 ? 115 : 85,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 12, right: 12),
                    child: Center(
                        child: Stack(
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text("",
                                style: TextStyle(
                                    color: Colors.blue, fontSize: 10)),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text(
                              "",
                              style:
                                  TextStyle(color: Colors.blue, fontSize: 10),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.center,
                          child: Padding(
                            padding: const EdgeInsets.only(right: 5.0),
                            child: Text(
                              rrDisplayValue.toString(),
// "00",
                              style: TextStyle(
                                  color: Colors.blue,
                                  fontSize: _isTab10 ? 40 : 35),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.centerLeft,
                          child: Padding(
                            padding:
                                const EdgeInsets.only(left: 0.0, bottom: 60),
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  color: Colors.white,
                                  fontSize: _isTab10 ? 20 : 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "bpm",
                              style:
                                  TextStyle(color: Colors.white, fontSize: 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(top: 0),
                          child: Align(
                            alignment: Alignment.topRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  "MAX",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                                Text(
                                  maxRrtotal.toString(),
                                  style: TextStyle(
                                      color: Colors.blue, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomRight,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.end,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: <Widget>[
                                Text(
                                  minRrtotal.toString(),
                                  style: TextStyle(
                                      color: Colors.blue, fontSize: 12),
                                ),
                                Text(
                                  "MIN",
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Align(
                            alignment: Alignment.bottomCenter,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Divider(
                                color: Colors.white,
                                height: 1,
                              ),
                            ))
                      ],
                    )),
                  ),
                ),
              ),
              Center(
                child: Container(
                  color: Color(0xFF171e27),
                  width: 180,
                  height: _isTab10 ? 115 : 85,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 12, right: 12),
                    child: Center(
                        child: Stack(
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text("",
                                style: TextStyle(
                                    color: Colors.blue, fontSize: 10)),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Padding(
                            padding: const EdgeInsets.all(2.0),
                            child: Text(
                              "",
                              style:
                                  TextStyle(color: Colors.blue, fontSize: 10),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.center,
                          child: Padding(
                            padding: const EdgeInsets.only(right: 5.0),
                            child: Text(
                              fio2DisplayParameter.toString(),
// "000",
                              style: TextStyle(
                                  color: Colors.teal,
                                  fontSize: _isTab10 ? 40 : 35),
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.centerLeft,
                          child: Padding(
                            padding: const EdgeInsets.only(
                                left: 0.0, bottom: 55, right: 0.0),
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  color: Colors.white,
                                  fontSize: _isTab10 ? 20 : 12),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 5),
                          child: Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "%",
                              style:
                                  TextStyle(color: Colors.white, fontSize: 14),
                            ),
                          ),
                        ),
                        Align(
                            alignment: Alignment.bottomCenter,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Divider(
                                color: Colors.white,
                                height: 1,
                              ),
                            ))
                      ],
                    )),
                  ),
                ),
              ),
            ],
          ),
        )),
      ],
    );
  }

  bottombar() {
    return Container(
      color: Color(0xFF171e27),
      width: _isTab10 ? 908 : 708,
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? operatinModeR == 4 ||
                              modeName == "PSIMV" ||
                              operatinModeR == 5 ||
                              modeName == "VSIMV" ||
                              operatinModeR == 14 ||
                              modeName == "PRVC"
                          ? playOnEnabled ? "" : CommonClick("eRR")
                          : playOnEnabled ? "" : CommonClick("RR")
                      : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? operatinModeR == 4 ||
                              modeName == "PSIMV" ||
                              operatinModeR == 5 ||
                              modeName == "VSIMV" ||
                              operatinModeR == 14 ||
                              modeName == "PRVC"
                          ? playOnEnabled ? "" : CommonClick("eRR")
                          : playOnEnabled ? "" : CommonClick("RR")
                      : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                receivedrr.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("I:E") : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("I:E") : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E".toUpperCase(),
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                checkI((receivedi / 10).toDouble().toString()) +
                                    ":" +
                                    checkE(
                                        (receivede / 10).toDouble().toString()),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled
                          ? ""
                          : operatinModeR == 5 || modeName == "VSIMV"
                              ? CommonClick("VPEEP")
                              : operatinModeR == 1 ||
                                      modeName == "VACV" ||
                                      operatinModeR == 7 ||
                                      modeName == "VCCMV"
                                  ? CommonClick("VVPEEP")
                                  : operatinModeR == 14 || modeName == "PRVC"
                                      ? CommonClick("PRVCPEEP")
                                      : CommonClick("PEEP")
                      : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled
                          ? ""
                          : operatinModeR == 5 || modeName == "VSIMV"
                              ? CommonClick("VPEEP")
                              : operatinModeR == 1 ||
                                      modeName == "VACV" ||
                                      operatinModeR == 7 ||
                                      modeName == "VCCMV"
                                  ? CommonClick("VVPEEP")
                                  : operatinModeR == 14 || modeName == "PRVC"
                                      ? CommonClick("PRVCPEEP")
                                      : CommonClick("PEEP")
                      : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "peep".toUpperCase(),
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style:
                                  TextStyle(fontSize: 10, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                receivedpeep.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            operatinModeR == 14 || modeName == "PRVC"
                ? InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("PC MAX")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled ? "" : CommonClick("PC MAX")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "PC Max".toUpperCase(),
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 16,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "",
                                    style: TextStyle(
                                        fontSize: 10, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      receivedpcmax.toString(),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  )
                : Container(),
            operatinModeR == 4 ||
                    modeName == "PSIMV" ||
                    operatinModeR == 3 ||
                    modeName == "PSV" ||
                    modeName == "VSIMV" ||
                    operatinModeR == 5
                ? InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled
                                ? ""
                                : modeName == "VSIMV" || operatinModeR == 5
                                    ? CommonClick("VPS")
                                    : operatinModeR == 4 || modeName == "PSIMV"
                                        ? CommonClick("PSV")
                                        : CommonClick("PS")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled
                                ? ""
                                : modeName == "VSIMV" || operatinModeR == 5
                                    ? CommonClick("VPS")
                                    : operatinModeR == 4 || modeName == "PSIMV"
                                        ? CommonClick("PSV")
                                        : CommonClick("PS")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "PS",
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 18,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "cmH\u2082O",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      receivedps.toString(),
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  )
                : Container(),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled
                          ? ""
                          : CommonClick(
                              operatinModeR == 4 || modeName == "PSIMV"
                                  ? CommonClick("PCV")
                                  : operatinModeR == 6 ||
                                          operatinModeR == 2 ||
                                          modeName == "PC-CMV" ||
                                          modeName == "PACV"
                                      ? "PC"
                                      : operatinModeR == 7 ||
                                              operatinModeR == 1 ||
                                              operatinModeR == 5 ||
                                              modeName == "VC-CMV" ||
                                              modeName == "VACV" ||
                                              modeName == "VSIMV"
                                          ? "Vt"
                                          : operatinModeR == 14 ||
                                                  modeName == "PRVC"
                                              ? "Target Vt"
                                              : "PC")
                      : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled
                      ? playOnEnabled
                          ? ""
                          : CommonClick(
                              operatinModeR == 4 || modeName == "PSIMV"
                                  ? CommonClick("PCV")
                                  : operatinModeR == 6 ||
                                          operatinModeR == 2 ||
                                          modeName == "PC-CMV" ||
                                          modeName == "PACV"
                                      ? "PC"
                                      : operatinModeR == 7 ||
                                              operatinModeR == 1 ||
                                              operatinModeR == 5 ||
                                              modeName == "VC-CMV" ||
                                              modeName == "VACV" ||
                                              modeName == "VSIMV"
                                          ? "Vt"
                                          : operatinModeR == 14 ||
                                                  modeName == "PRVC"
                                              ? "Target Vt"
                                              : "PC")
                      : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              operatinModeR == 6 || operatinModeR == 2
                                  ? "PC"
                                  : operatinModeR == 7 ||
                                          operatinModeR == 1 ||
                                          operatinModeR == 5
                                      ? "Vt"
                                      : modeName == "PC-CMV" ||
                                              modeName == "PACV"
                                          ? "PC"
                                          : modeName == "VC-CMV" ||
                                                  modeName == "VACV" ||
                                                  modeName == "VSIMV"
                                              ? "Vt"
                                              : operatinModeR == 14 ||
                                                      modeName == "PRVC"
                                                  ? "Target Vt"
                                                  : "PC",
                              style: TextStyle(
                                  fontSize:
                                      operatinModeR == 14 || modeName == "PRVC"
                                          ? 14
                                          : 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              operatinModeR == 6 || operatinModeR == 2
                                  ? "cmH\u2082O"
                                  : operatinModeR == 7 ||
                                          operatinModeR == 1 ||
                                          operatinModeR == 5 ||
                                          operatinModeR == 14
                                      ? "ml"
                                      : modeName == "PC-CMV" ||
                                              modeName == "PACV"
                                          ? "cmH\u2082O"
                                          : modeName == "VC-CMV" ||
                                                  modeName == "VACV" ||
                                                  modeName == "VSIMV" ||
                                                  modeName == "PRVC"
                                              ? "ml"
                                              : "cmH\u2082O",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                operatinModeR == 6 || operatinModeR == 2
                                    ? receivedpc.toString()
                                    : operatinModeR == 7 ||
                                            operatinModeR == 1 ||
                                            operatinModeR == 5 ||
                                            operatinModeR == 14
                                        ? receivedvt.toString()
                                        : modeName == "PC-CMV" ||
                                                modeName == "PACV"
                                            ? receivedpc.toString()
                                            : modeName == "VC-CMV" ||
                                                    modeName == "VACV" ||
                                                    modeName == "VSIMV" ||
                                                    modeName == "PRVC"
                                                ? receivedvt.toString()
                                                : receivedpc.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onLongPress: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("FiO2") : "";
                }
              },
              onTap: () {
                setState(() {
                  _setValuesonClick = false;
                });
                if (modeWriteList.isNotEmpty) {
                  lockEnabled ? playOnEnabled ? "" : CommonClick("FiO2") : "";
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 155 : 120,
                  height: _isTab10 ? 145 : 110,
                  child: Card(
                    elevation: 40,
                    color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: _isTab10 ? 20 : 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style:
                                  TextStyle(fontSize: 12, color: Colors.white),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 17.0),
                              child: Text(
                                receivedfio2.toString(),
                                style: TextStyle(
                                    fontSize: _isTab10 ? 50 : 30,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            operatinModeR == 1 ||
                    operatinModeR == 2 ||
                    operatinModeR == 3 ||
                    operatinModeR == 4 ||
                    operatinModeR == 5 ||
                    operatinModeR == 14
                ? InkWell(
                    onLongPress: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled
                                ? ""
                                : pItrig
                                    ? CommonClick("ITRI")
                                    : CommonClick("PITRI")
                            : "";
                      }
                    },
                    onTap: () {
                      setState(() {
                        _setValuesonClick = false;
                      });
                      if (modeWriteList.isNotEmpty) {
                        lockEnabled
                            ? playOnEnabled
                                ? ""
                                : pItrig
                                    ? CommonClick("ITRI")
                                    : CommonClick("PITRI")
                            : "";
                      }
                    },
                    child: Center(
                      child: Container(
                        width: _isTab10 ? 155 : 120,
                        height: _isTab10 ? 145 : 110,
                        child: Card(
                          elevation: 40,
                          color: lockEnabled ? Color(0xFF213855) : Colors.grey,
                          child: Padding(
                            padding: const EdgeInsets.all(12.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "I Trig",
                                    style: TextStyle(
                                        fontSize: _isTab10 ? 20 : 18,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    pItrig ? "cmH\u2082O" : "lpm",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.white),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 17.0),
                                    child: Text(
                                      pItrig
                                          ? "-$receivedItrig"
                                          : "$receivedItrig",
                                      style: TextStyle(
                                          fontSize: _isTab10 ? 50 : 30,
                                          color: Colors.white),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  )
                : Container(),
            SizedBox(
              width: operatinModeR == 4 ||
                      modeName == "PSIMV" ||
                      operatinModeR == 3 ||
                      modeName == "PSV" ||
                      modeName == "VSIMV" ||
                      operatinModeR == 5
                  ? 10
                  : 130,
            ),
          ],
        ),
      ),
    );
  }

  topbar() {
    return Container(
      width: 944,
      height: 50,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: <Widget>[
          Row(
            children: [
              InkWell(
                onTap: () {
                  _scaffoldKey.currentState.openDrawer();
                },
                child: Container(
                    margin: EdgeInsets.only(left: 10),
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5),
                        color: Colors.white),
                    child: Icon(Icons.keyboard_arrow_right,
                        size: 40, color: Colors.black.withOpacity(0.9))),
              ),
              Container(
                  width: 240,
                  child: Padding(
                    padding: const EdgeInsets.only(
                        left: 20, right: 0, top: 4, bottom: 4),
                    child: Text(
                      modeName == "VSIMV"
                          ? "VSIMV + PS"
                          : modeName == "PSIMV"
                              ? "PSIMV + PS"
                              : modeName.toString(),
                      style: TextStyle(
                          color: Colors.blue,
                          fontSize: 20,
                          fontWeight: FontWeight.bold),
                    ),
                  )),

              //_isLoopGraph
              InkWell(
                onTap: () {
                  setState(() {
                    lockEnabled ? showAlertDialogO2() : "";
                  });
                },
                child: Center(
                  child: Container(
                    width: 60,
                    child: Card(
                      color: lockEnabled ? Colors.white : Colors.grey,
                      child: Padding(
                        padding: const EdgeInsets.only(
                            top: 0.0, left: 10, right: 10, bottom: 0.0),
                        child: Center(
                          child: Text("O\u2082",
                              style:
                                  TextStyle(color: Colors.black, fontSize: 20)),
                        ),
                      ),
                    ),
                  ),
                ),
              ), //_isLoopGraph

              InkWell(
                onTap: () {
                  if (powerIndication == 1 && playOnEnabled == true) {
                    setState(() {
                      batterChargingScreen = !batterChargingScreen;
                      if (batteryforceCharge == 0) {
                        batteryforceCharge = 1;
                      } else if (batteryforceCharge == 1) {
                        batteryforceCharge = 0;
                      }
                    });
                    List<int> resbatteryList = [];
                    setState(() {
                      resbatteryList.add(0);
                      resbatteryList.add(20);
                      resbatteryList.add(0);
                      resbatteryList.add(18);
                      resbatteryList.add((batteryforceCharge));
                    });
                    sendDataUsbConnection(resbatteryList, 2);
                  }
                },
                child: Container(
                  height: 40,
                  width: faultBatteryStatus == 1 || faultBatteryStatus == 2
                      ? 100
                      : 70,
                  child: Material(
                    borderRadius: BorderRadius.circular(5),
                    child: Row(
                      children: <Widget>[
                        Container(
                            height: 40,
                            width: 70,
                            child: batteryStatus == 2
                                ? Center(
                                    child: Text(
                                        batteryPercentage.toString() + " %",
                                        style: TextStyle(fontSize: 20)))
                                : batteryStatus == 1
                                    ? Image.asset(
                                        "assets/images/chargingbattery.png",
                                        width: 28,
                                        color: Colors.black)
                                    : Image.asset("assets/images/nobattery.png",
                                        width: 28, color: Colors.black)),
                        faultBatteryStatus == 1 || faultBatteryStatus == 2
                            ? Center(
                                child: Container(
                                    color: Colors.transparent,
                                    height: 40,
                                    width: 30,
                                    child: faultBatteryStatus == 1
                                        ? Center(
                                            child: Text("B1",
                                                style: TextStyle(
                                                    fontSize: 16,
                                                    color: Colors.red)))
                                        : faultBatteryStatus == 2
                                            ? Center(
                                                child: Text("B2",
                                                    style: TextStyle(
                                                        fontSize: 16,
                                                        color: Colors.red)))
                                            : Text("✗",
                                                style: TextStyle(
                                                    color: Colors.red,
                                                    fontSize: 16))),
                              )
                            : Container(),
                      ],
                    ),
                  ),
                ),
              ),
              SizedBox(width: 5),
              Material(
                  borderRadius: BorderRadius.circular(5),
                  child: InkWell(
                    onTap: () {
                      playOnEnabled ? sendTest() : "";
                      // selfTestingEnabled = true;
                    },
                    child: Container(
                        color: playOnEnabled ? Colors.white : Colors.grey,
                        height: 40,
                        width: 80,
                        child: Image.asset(
                          "assets/images/calibrate.png",
                          width: 60,
                        )),
                  )),
              SizedBox(width: 10),
              timerCounter != 0
                  ? Material(
                      borderRadius: BorderRadius.circular(14.0),
                      color: Colors.white,
                      child: Container(
                        width: 80,
                        height: 40,
                        child: Center(
                            child: timerCounter <= 9
                                ? Padding(
                                    padding: const EdgeInsets.all(8.0),
                                    child: Text(
                                        "00:0" + timerCounter.toString(),
                                        style: TextStyle(
                                            color: Colors.green, fontSize: 20)),
                                  )
                                : Padding(
                                    padding: const EdgeInsets.all(8.0),
                                    child: Text("00:" + timerCounter.toString(),
                                        style: TextStyle(
                                            color: Colors.green, fontSize: 20)),
                                  )),
                      ))
                  : Material(
                      borderRadius: BorderRadius.circular(5.0),
                      color: Colors.white,
                      child: InkWell(
                        onTap: () {
                          lockEnabled
                              ? setState(() {
                                  // oxygenSettingsEnabled = true;
                                })
                              : "";
                        },
                        child: Container(
                          width: 80,
                          height: 40,
                          child: Center(
                              child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text("00:00",
                                style: TextStyle(
                                    color: Colors.green, fontSize: 20)),
                          )),
                        ),
                      ),
                    ),
              SizedBox(width: 5),
              InkWell(
                onTap: () {
                  setState(() {
                    _isLoopGraph = !_isLoopGraph;
                  });
                },
                child: Center(
                  child: Container(
                    width: 60,
                    child: Card(
                      color: _isLoopGraph ? Colors.green : Colors.white,
                      child: Padding(
                        padding: const EdgeInsets.only(
                            top: 0.0, left: 10, right: 10, bottom: 0.0),
                        child: Center(
                          child: Icon(Icons.timeline,
                              color:
                                  _isLoopGraph ? Colors.white : Colors.black),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              SizedBox(width: 5),
              Material(
                borderRadius: BorderRadius.circular(5),
                color: powerIndication == 1
                    ? Colors.green
                    : powerIndication == 0 ? Colors.red : Colors.red,
                child: Container(
                    width: 70,
                    height: 40,
                    child: Center(
                      child: Image.asset("assets/images/powersymbol.png",
                          color: Colors.white),
                    )),
              ),
              SizedBox(width: 5),
              InkWell(
                onTap: () {
                  setState(() {
                    if (check1 == 1 && check2 == 1) {
                      preferences.setBool('_isFlagTest', true);
                      lockEnabled
                          ? Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => ViewLogPatientList()))
                          : "";
                    }
                  });
                },
                child: Center(
                  child: Container(
                    width: 80,
                    child: Card(
                      color: lockEnabled ? Colors.white : Colors.grey,
                      child: Padding(
                        padding: const EdgeInsets.only(
                            top: 0.0, left: 10, right: 10, bottom: 0.0),
                        child: Center(
                            child: Icon(Icons.history,
                                size: 40,
                                color:
                                    lockEnabled ? Colors.black : Colors.white)),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    lockEnabled = !lockEnabled;
                    if (lockEnabled == false) {
                      setState(() {
                        insExpButtonEnable = false;
                      });
                    }
                  });
                },
                child: Center(
                  child: Container(
                    width: 80,
                    child: Card(
                      // color: lockEnabled ? Colors.white : Colors.grey,
                      child: Padding(
                        padding: const EdgeInsets.only(
                            top: 0.0, left: 10, right: 10, bottom: 0.0),
                        child: Center(
                            child: lockEnabled
                                ? Icon(
                                    Icons.lock_open,
                                    size: 40,
                                  )
                                : Icon(Icons.lock,
                                    size: 40, color: Colors.black)),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  showAlertDialogO2() {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) => CupertinoAlertDialog(
              title: new Text("OXYGEN INLET TYPE"),
              actions: <Widget>[
                CupertinoDialogAction(
                  child: Text("Low Pressure",
                      style: TextStyle(
                          color: _iso2High ? Colors.black : Colors.blue)),
                  onPressed: () {
                    setState(() {
                      _iso2High = false;
                    });

                    Navigator.pop(context);
                    o2packet();
                  },
                ),
                CupertinoDialogAction(
                  child: Text("High Pressure",
                      style: TextStyle(
                          color: _iso2High ? Colors.blue : Colors.black)),
                  onPressed: () {
                    setState(() {
                      _iso2High = true;
                    });

                    Navigator.pop(context);
                    o2packet();
                  },
                ),
              ],
            ));
  }

  o2packet() {
    shutdownChannel.invokeMethod('getBatteryLevel').then((result) async {
      counter = counter + 1;
      List<int> resList = [0, 20, 0, 15];
      if (counter <= 250) {
        setState(() {
          resList.add((result & 0x00FF));
          resList.add(counter);
          if (_iso2High == true) {
            resList.add(2);
          } else {
            resList.add(1);
          }
        });
        if (_status == "Connected") {
          sendDataUsbConnection(resList, 2);
        }
      } else {
        setState(() {
          counter = 0;
        });
      }
    });
  }

  modeDefaultSettings() {
    return Row(
      children: [
        pacvEnabled ? pacvData() : Container(),
        vacvEnabled ? vacvData() : Container(),
        pccmvEnabled ? pccmvData() : Container(),
        vccmvEnabled ? vccmvData() : Container(),
        psimvEnabled ? psimvData() : Container(),
        vsimvEnabled ? vsimvData() : Container(),
        psvEnabled ? psvData() : Container(),
        prvcEnabled ? prvcData() : Container(),
        // hfnoEnabled ? hfnoData() : Container(),
        // cpapEnabled ? cpapData() : Container(),
        // autoEnabled ? autoData() : Container(),
        // cbipapEnabled ? cbap() : Container(),
      ],
    );
  }

  hfnoData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    hfnomaxValue = 100;
                    hfnominValue = 1;
                    hfnoparameterName = "Flow";
                    hfnoparameterUnits = "%";
                    hfnoFio2 = false;
                    hfnoFlow = true;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: hfnoFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Flow",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: hfnoFlow
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "lpm",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: hfnoFlow
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: hfnoFlow
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: hfnoFlow
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                hfnoFlowValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: hfnoFlow
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  hfnoFlow
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: hfnoFlowValue != null
                                    ? hfnoFlowValue / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    hfnomaxValue = 100;
                    hfnominValue = 21;
                    hfnoparameterName = "FiO\u2082";
                    hfnoparameterUnits = "%";
                    hfnoFlow = false;
                    hfnoFio2 = true;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: hfnoFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO" + '\u2082',
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: hfnoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: hfnoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: hfnoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: hfnoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                hfnoFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: hfnoFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  hfnoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: hfnoFio2Value != null
                                    ? hfnoFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            Container(height: 160)
          ],
        ),
        SizedBox(width: 655),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight ?? 0.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight ?? 0) * 6)
                                  .toString() +
                              " - " +
                              (int.tryParse(patientWeight ?? 0) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 55,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (hfnoFlow == true &&
                                        hfnoFlowValue != hfnominValue) {
                                      setState(() {
                                        hfnoFlowValue = hfnoFlowValue - 1;
                                      });
                                    } else if (hfnoFio2 == true &&
                                        hfnoFio2Value != hfnominValue) {
                                      setState(() {
                                        hfnoFio2Value = hfnoFio2Value - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                hfnoparameterName,
                                style: TextStyle(fontSize: 36),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 55,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (hfnoFlow == true &&
                                        hfnoFlowValue != hfnomaxValue) {
                                      setState(() {
                                        hfnoFlowValue = hfnoFlowValue + 1;
                                      });
                                    } else if (hfnoFio2 == true &&
                                        hfnoFio2Value != hfnomaxValue) {
                                      setState(() {
                                        hfnoFio2Value = hfnoFio2Value + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  hfnoFlow
                                      ? hfnoFlowValue.toInt().toString()
                                      : hfnoFio2
                                          ? hfnoFio2Value.toInt().toString()
                                          : "",
                                  style: TextStyle(
                                    fontSize: 40,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          // hfnoFio2
                          //     ? Container()
                          //     :
                          Container(
                            width: 350,
                            child: Slider(
                              activeColor: Colors.black,
                              inactiveColor: Colors.black,
                              min: hfnominValue.toDouble() ?? 0,
                              max: hfnomaxValue.toDouble() ?? 0,
                              value: hfnoFlow
                                  ? hfnoFlowValue.toDouble()
                                  : hfnoFio2 ? hfnoFio2Value.toDouble() : "",
                              onChanged: (double value) {
                                setState(() {
                                  if (hfnoFlow == true) {
                                    setState(() {
                                      hfnoFlowValue = value.toInt();
                                    });
                                  } else if (hfnoFio2 == true) {
                                    setState(() {
                                      hfnoFio2Value = value.toInt();
                                    });
                                  }
                                });
                              },
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(hfnominValue.toString()),
                                Text(
                                  hfnoparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(hfnomaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  cpapData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              InkWell(
                onTap: () {
                  setState(() {
                    cpappmaxValue = _isTab10 ? 25 : 30;
                    cpappminValue = 0;
                    cpappparameterName = "CPAP";
                    cpappparameterUnits = "";
                    cpappItrig = false;
                    cpappPeep = true;
                    cpappFio2 = false;
                    cpappAtime = false;
                    cpappEtrig = false;
                    cpappBackupRr = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: cpappPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "CPAP",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: cpappPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                _isTab10 ? "25" : "30",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  cpappPeepValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: cpappPeep
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    cpappPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: cpappPeepValue != null
                                      ? _isTab10
                                          ? cpappPeepValue / 25
                                          : cpappPeepValue / 30
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    cpappmaxValue = 55;
                    cpappminValue = 5;
                    cpappparameterName = "A Time";
                    cpappparameterUnits = "s";
                    cpappItrig = false;
                    cpappPeep = false;
                    cpappFio2 = false;
                    cpappAtime = true;
                    cpappEtrig = false;
                    cpappBackupRr = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: cpappAtime ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "Apnea Time",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: cpappAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "s",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "55",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "5",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  cpappAtimeValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: cpappAtime
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    cpappAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: cpappAtimeValue != null
                                      ? cpappAtimeValue / 55
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    cpappmaxValue = 100;
                    cpappminValue = 21;
                    cpappparameterName = "FiO\u2082";
                    cpappparameterUnits = "%";
                    cpappItrig = false;
                    cpappPeep = false;
                    cpappFio2 = true;
                    cpappAtime = false;
                    cpappEtrig = false;
                    cpappBackupRr = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: cpappFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "FiO\u2082",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: cpappFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "%",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "100",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "21",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: cpappFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  cpappFio2Value.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: cpappFio2
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    cpappFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: cpappFio2Value != null
                                      ? cpappFio2Value / 100
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
            ]),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                setState(() {
                  cpappmaxValue = 10;
                  cpappminValue = 1;
                  cpappparameterName = "I Trig";
                  cpappparameterUnits = "cmH\u2082O Below PEEP";
                  cpappItrig = true;
                  cpappPeep = false;
                  cpappFio2 = false;
                  cpappAtime = false;
                  cpappEtrig = false;
                  cpappBackupRr = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: cpappItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: cpappItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig
                                    ? "-$cpappItrigValue"
                                    : "$cpappItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: cpappItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  cpappItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: cpappItrigValue != null
                                    ? cpappItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  cpappmaxValue = 60;
                  cpappminValue = 1;
                  cpappparameterName = "Backup RR";
                  cpappparameterUnits = "bpm";
                  cpappItrig = false;
                  cpappPeep = false;
                  cpappFio2 = false;
                  cpappAtime = false;
                  cpappEtrig = false;
                  cpappBackupRr = true;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color:
                        cpappBackupRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Backup RR",
                              style: TextStyle(
                                  fontSize: 13,
                                  fontWeight: FontWeight.bold,
                                  color: cpappBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 10,
                                  color: cpappBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                cpappBackupRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: cpappBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  cpappBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: cpappBackupRrValue != null
                                    ? cpappBackupRrValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  cpappmaxValue = _isTab10 ? 85 : 60;
                  cpappminValue = 5;
                  cpappparameterName = "PC";
                  cpappparameterUnits = "cmH\u2082O above PEEP";
                  cpappItrig = false;
                  cpappPeep = false;
                  cpappFio2 = false;
                  cpappAtime = false;
                  cpappBackupRr = false;
                  cpappPc = true;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: cpappPc ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: cpappPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "85" : "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "5",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: cpappPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                cpappPcValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: cpappPc
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  cpappPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: cpappPcValue != null
                                    ? _isTab10
                                        ? cpappPcValue / 85
                                        : cpappPcValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        SizedBox(width: _isTab10 ? 205 : 140),
        _isTab10
            ? Container(
                margin: EdgeInsets.only(top: 160, bottom: 20),
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Patient Trigger",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    Container(
                        padding: EdgeInsets.only(top: 20),
                        width: 255,
                        child: Row(
                          children: [
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Colors.green : Color(0xFFE0E0E0),
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "  Pressure  ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFFE0E0E0)
                                            : Color(0xFF213855),
                                      ),
                                    ),
                                  )),
                            ),
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Color(0xFFE0E0E0) : Colors.green,
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "      Flow      ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0),
                                      ),
                                    ),
                                  )),
                            ),
                          ],
                        )),
                  ],
                ))
            : Container(),
        SizedBox(width: _isTab10 ? 30 : 0),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                width: 400,
                height: 195,
                child: Center(
                  child: Column(
                    children: [
                      SizedBox(
                        height: 5,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: <Widget>[
                          IconButton(
                            icon: Icon(
                              Icons.remove,
                              color: Colors.black,
                              size: 45,
                            ),
                            onPressed: () {
                              setState(() {
                                if (cpappItrig == true &&
                                    cpappItrigValue != cpappminValue) {
                                  setState(() {
                                    cpappItrigValue = cpappItrigValue - 1;
                                  });
                                } else if (cpappPeep == true &&
                                    cpappPeepValue != cpappminValue) {
                                  setState(() {
                                    cpappPeepValue = cpappPeepValue - 1;
                                  });
                                } else if (cpappFio2 == true &&
                                    cpappFio2Value != cpappminValue) {
                                  setState(() {
                                    cpappFio2Value = cpappFio2Value - 1;
                                  });
                                } else if (cpappAtime == true &&
                                    cpappAtimeValue != cpappminValue) {
                                  setState(() {
                                    cpappAtimeValue = cpappAtimeValue - 1;
                                  });
                                } else if (cpappBackupRr == true &&
                                    cpappBackupRrValue != cpappminValue) {
                                  setState(() {
                                    cpappBackupRrValue = cpappBackupRrValue - 1;
                                  });
                                } else if (cpappPc == true &&
                                    cpappPcValue != cpappminValue) {
                                  setState(() {
                                    cpappPcValue = cpappPcValue - 1;
                                  });
                                }
                              });
                            },
                          ),
                          SizedBox(
                            width: 40,
                          ),
                          Text(
                            cpappparameterName,
                            style: TextStyle(
                                fontSize: 25, fontWeight: FontWeight.normal),
                          ),
                          SizedBox(
                            width: 40,
                          ),
                          IconButton(
                            icon: Icon(
                              Icons.add,
                              color: Colors.black,
                              size: 45,
                            ),
                            onPressed: () {
                              setState(() {
                                int maxValue = _isTab10 ? 90 : 65;
                                int maxPeep = _isTab10 ? 25 : 30;
                                int maxValuepcValue, maxValuepeepValue;
                                maxValuepcValue = maxValue - cpappPeepValue;
                                if ((maxValue - cpappPcValue) >= maxPeep) {
                                  maxValuepeepValue = maxPeep;
                                } else {
                                  maxValuepeepValue = maxValue - cpappPcValue;
                                }
                                if (cpappItrig == true &&
                                    cpappItrigValue != cpappmaxValue) {
                                  setState(() {
                                    cpappItrigValue = cpappItrigValue + 1;
                                  });
                                } else if (cpappPeep == true &&
                                    cpappPeepValue != cpappmaxValue &&
                                    cpappPeepValue < maxValuepeepValue) {
                                  setState(() {
                                    cpappPeepValue = cpappPeepValue + 1;
                                  });
                                } else if (cpappFio2 == true &&
                                    cpappFio2Value != cpappmaxValue) {
                                  setState(() {
                                    cpappFio2Value = cpappFio2Value + 1;
                                  });
                                } else if (cpappAtime == true &&
                                    cpappAtimeValue != cpappmaxValue) {
                                  setState(() {
                                    cpappAtimeValue = cpappAtimeValue + 1;
                                  });
                                } else if (cpappBackupRr == true &&
                                    cpappBackupRrValue != cpappmaxValue) {
                                  setState(() {
                                    cpappBackupRrValue = cpappBackupRrValue + 1;
                                  });
                                } else if (cpappPc == true &&
                                    cpappPcValue != cpappmaxValue &&
                                    cpappPcValue < maxValuepcValue) {
                                  setState(() {
                                    cpappPcValue = cpappPcValue + 1;
                                  });
                                }
                              });
                            },
                          ),
                        ],
                      ),
                      Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Text(
                              cpappItrig
                                  ? pItrig
                                      ? "-$cpappItrigValue"
                                      : "$cpappItrigValue"
                                  : cpappPeep
                                      ? cpappPeepValue.toInt().toString()
                                      : cpappFio2
                                          ? cpappFio2Value.toInt().toString()
                                          : cpappAtime
                                              ? cpappAtimeValue
                                                  .toInt()
                                                  .toString()
                                              : cpappBackupRr
                                                  ? cpappBackupRrValue
                                                      .toInt()
                                                      .toString()
                                                  : cpappPc
                                                      ? cpappPcValue
                                                          .toInt()
                                                          .toString()
                                                      : "",
                              style: TextStyle(
                                  fontSize: 40,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(
                        height: 2,
                      ),
                      Container(
                          width: 350,
                          child: Slider(
                            min: cpappminValue.toDouble(),
                            max: cpappmaxValue.toDouble(),
                            onChanged: (double value) {
                              int maxValue = _isTab10 ? 90 : 65;
                              int maxPeep = _isTab10 ? 25 : 30;
                              int maxValuepcValue, maxValuepeepValue;
                              maxValuepcValue = maxValue - cpappPeepValue;
                              if ((maxValue - cpappPcValue) >= maxPeep) {
                                maxValuepeepValue = maxPeep;
                              } else {
                                maxValuepeepValue = maxValue - cpappPcValue;
                              }
                              if (cpappItrig == true) {
                                setState(() {
                                  cpappItrigValue = value.toInt();
                                });
                              } else if (cpappFio2 == true) {
                                setState(() {
                                  cpappFio2Value = value.toInt();
                                });
                              } else if (cpappAtime == true) {
                                setState(() {
                                  cpappAtimeValue = value.toInt();
                                });
                              } else if (cpappBackupRr == true) {
                                setState(() {
                                  cpappBackupRrValue = value.toInt();
                                });
                              } else if (cpappPeep == true) {
                                setState(() {
                                  if (value.toInt() >= maxValuepeepValue) {
                                    cpappPeepValue = maxValuepeepValue;
                                  } else {
                                    cpappPeepValue = value.toInt();
                                  }
                                });
                              } else if (cpappPc == true) {
                                setState(() {
                                  if (value.toInt() >= maxValuepcValue) {
                                    cpappPcValue = maxValuepcValue;
                                  } else {
                                    cpappPcValue = value.toInt();
                                  }
                                });
                              }
                            },
                            value: cpappItrig
                                ? cpappItrigValue.toDouble()
                                : cpappPeep
                                    ? cpappPeepValue.toDouble()
                                    : cpappFio2
                                        ? cpappFio2Value.toDouble()
                                        : cpappAtime
                                            ? cpappAtimeValue.toDouble()
                                            : cpappBackupRr
                                                ? cpappBackupRrValue.toDouble()
                                                : cpappPc
                                                    ? cpappPcValue.toDouble()
                                                    : "",
                          )),
                      SizedBox(
                        height: 5,
                      ),
                      Padding(
                        padding: const EdgeInsets.only(left: 45.0, right: 45.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(cpappItrig
                                ? pItrig ? "-$cpappminValue" : "$cpappminValue"
                                : cpappminValue.toString()),
                            Text(
                              cpappItrig
                                  ? pItrig ? cpappparameterUnits : "lpm"
                                  : cpappparameterUnits,
                              style: TextStyle(fontSize: 16),
                            ),
                            Text(cpappItrig
                                ? pItrig ? "-$cpappmaxValue" : "$cpappmaxValue"
                                : cpappmaxValue.toString())
                          ],
                        ),
                      )
                    ],
                  ),
                )),
          ],
        ),
      ],
    );
  }

  bpapData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            InkWell(
              onTap: () {
                setState(() {
                  bipapmaxValue = _isTab10 ? 45 : 30;
                  bipapminValue = 0;
                  bipapparameterName = "EPAP";
                  bipapparameterUnits = "";
                  bipapEpap = true;
                  bipapItrig = false;
                  bipapFio2 = false;
                  bipapIpap = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: bipapEpap ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "EPAP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: bipapEpap
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapEpap
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapEpap
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapEpap
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                bipapEpapValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: bipapEpap
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  bipapEpap
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: bipapEpapValue != null
                                    ? _isTab10
                                        ? bipapEpapValue / 45
                                        : bipapEpapValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  bipapmaxValue = 100;
                  bipapminValue = 21;
                  bipapparameterName = "FiO\u2082";
                  bipapparameterUnits = "";
                  bipapEpap = false;
                  bipapItrig = false;
                  bipapFio2 = true;
                  bipapIpap = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: bipapFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: bipapFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                bipapfio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: bipapFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  bipapFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: bipapfio2Value != null
                                    ? bipapfio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  bipapmaxValue = 10;
                  bipapminValue = 1;
                  bipapparameterName = "Itrig";
                  bipapparameterUnits = "";
                  bipapEpap = false;
                  bipapItrig = true;
                  bipapFio2 = false;
                  bipapIpap = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: bipapItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: bipapItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "-10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "-1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: bipapItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                "-" + bipapItrigValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: bipapItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  bipapItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: bipapItrigValue != null
                                    ? bipapItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              InkWell(
                onTap: () {
                  setState(() {
                    bipapmaxValue = 40;
                    bipapminValue = 5;
                    bipapparameterName = "IPAP";
                    bipapparameterUnits = "";
                    bipapEpap = false;
                    bipapItrig = false;
                    bipapFio2 = false;
                    bipapIpap = true;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: bipapIpap ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "IPAP",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: bipapIpap
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: bipapIpap
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "40",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: bipapIpap
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "5",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: bipapIpap
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  bipapIpapValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: bipapIpap
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    bipapIpap
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: bipapIpapValue != null
                                      ? bipapIpapValue / 40
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
            ]),
        SizedBox(width: _isTab10 ? 120 : 18),
        Column(
          children: <Widget>[
            _isTab10
                ? Container(
                    padding: EdgeInsets.only(top: 10),
                    width: 255,
                    child: Row(
                      children: [
                        InkWell(
                          onTap: () {
                            setState(() {
                              pItrig = !pItrig;
                            });
                          },
                          child: Card(
                              color: pItrig
                                  ? Color(0xFFE0E0E0)
                                  : Color(0xFF213855),
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "Pressure Trig",
                                  style: TextStyle(
                                    color: pItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                ),
                              )),
                        ),
                        InkWell(
                          onTap: () {
                            setState(() {
                              pItrig = !pItrig;
                            });
                          },
                          child: Card(
                              color: pItrig
                                  ? Color(0xFF213855)
                                  : Color(0xFFE0E0E0),
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "Flow Trig",
                                  style: TextStyle(
                                    color: pItrig
                                        ? Color(0xFFE0E0E0)
                                        : Color(0xFF213855),
                                  ),
                                ),
                              )),
                        ),
                      ],
                    ))
                : Container(),
          ],
        ),
        SizedBox(width: _isTab10 ? 120 : 18),
        Column(children: [
          Container(
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20),
                  color: Color(0xFFE0E0E0)),
              height: 145,
              width: 400,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  children: [
                    Text("Alarm Limit",
                        style: TextStyle(
                            fontWeight: FontWeight.bold, fontSize: 20)),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Column(
                              children: [
                                Text("RR"),
                                Text("$minRrtotal-$maxRrtotal"),
                              ],
                            ),
                            Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Column(
                                children: [
                                  Text("Vte"),
                                  Text("$minvte-$maxvte"),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Column(
                              children: [
                                Text("Ppeak"),
                                Text("$minppeak-$maxppeak"),
                              ],
                            ),
                            Padding(
                              padding: const EdgeInsets.only(top: 18.0),
                              child: Column(
                                children: [
                                  Text("PEEP"),
                                  Text("$minpeep-$maxpeep"),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              )),
          SizedBox(
            height: 5,
          ),
          patientId != ""
              ? Container(
                  height: 40,
                  width: 400,
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Color(0xFFE0E0E0)),
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text("IBW : " + patientWeight ?? 0.toString()),
                        Text("Ideal Vt : " +
                            (int.tryParse(patientWeight ?? 0) * 6).toString() +
                            " - " +
                            (int.tryParse(patientWeight ?? 0) * 8).toString())
                      ],
                    ),
                  ))
              : Container(),
          SizedBox(
            height: 5,
          ),
          Container(
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20),
                  color: Color(0xFFE0E0E0)),
              width: 400,
              height: 195,
              child: Center(
                child: Column(
                  children: [
                    SizedBox(
                      height: 5,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        IconButton(
                          icon: Icon(
                            Icons.remove,
                            color: Colors.black,
                            size: 55,
                          ),
                          onPressed: () {
                            setState(() {
                              if (bipapEpap == true &&
                                  bipapEpapValue != bipapminValue) {
                                setState(() {
                                  bipapEpapValue = bipapEpapValue - 1;
                                });
                              } else if (bipapFio2 == true &&
                                  bipapfio2Value != bipapminValue) {
                                setState(() {
                                  bipapfio2Value = bipapfio2Value - 1;
                                });
                              } else if (bipapItrig == true &&
                                  bipapItrigValue != bipapminValue) {
                                setState(() {
                                  bipapItrigValue = bipapItrigValue - 1;
                                });
                              } else if (bipapIpap =
                                  true && bipapIpapValue != bipapIpapValue) {
                                setState(() {
                                  bipapIpapValue = bipapIpapValue - 1;
                                });
                              }
                            });
                          },
                        ),
                        SizedBox(
                          width: 60,
                        ),
                        Text(
                          bipapparameterName,
                          style: TextStyle(fontSize: 36),
                        ),
                        SizedBox(
                          width: 60,
                        ),
                        IconButton(
                          icon: Icon(
                            Icons.add,
                            color: Colors.black,
                            size: 55,
                          ),
                          onPressed: () {
                            setState(() {
                              if (bipapEpap == true &&
                                  bipapEpapValue != bipapmaxValue) {
                                setState(() {
                                  bipapEpapValue = bipapEpapValue + 1;
                                });
                              } else if (bipapFio2 == true &&
                                  bipapfio2Value != bipapmaxValue) {
                                setState(() {
                                  bipapfio2Value = bipapfio2Value + 1;
                                });
                              } else if (bipapItrig == true &&
                                  bipapItrigValue != bipapmaxValue) {
                                setState(() {
                                  bipapItrigValue = bipapItrigValue + 1;
                                });
                              } else if (bipapIpap == true &&
                                  bipapIpapValue != bipapmaxValue) {
                                setState(() {
                                  bipapIpapValue = bipapIpapValue + 1;
                                });
                              }
                            });
                          },
                        ),
                      ],
                    ),
                    Center(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          Text(
                            bipapItrig
                                ? "-" + bipapItrigValue.toInt().toString()
                                : bipapEpap
                                    ? bipapEpapValue.toInt().toString()
                                    : bipapFio2
                                        ? bipapfio2Value.toInt().toString()
                                        : bipapIpap
                                            ? bipapIpapValue.toInt().toString()
                                            : "",
                            style: TextStyle(
                              fontSize: 40,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(
                      height: 5,
                    ),
                    Container(
                      width: 350,
                      child: Slider(
                        activeColor: Colors.black,
                        inactiveColor: Colors.black,
                        min: bipapminValue.toDouble() ?? 0,
                        max: bipapmaxValue.toDouble() ?? 0,
                        value: bipapItrig
                            ? bipapItrigValue.toDouble()
                            : bipapEpap
                                ? bipapEpapValue.toDouble()
                                : bipapFio2
                                    ? bipapfio2Value.toDouble()
                                    : bipapIpap
                                        ? bipapIpapValue.toDouble()
                                        : "",
                        onChanged: (double value) {
                          setState(() {
                            if (bipapEpap == true) {
                              setState(() {
                                bipapEpapValue = value.toInt();
                              });
                            } else if (bipapFio2 == true) {
                              setState(() {
                                bipapfio2Value = value.toInt();
                              });
                            } else if (bipapItrig == true) {
                              setState(() {
                                bipapItrigValue = value.toInt();
                              });
                            } else if (bipapIpap == true) {
                              setState(() {
                                bipapIpapValue = value.toInt();
                              });
                            }
                          });
                        },
                      ),
                    ),
                    SizedBox(
                      height: 5,
                    ),
                    Padding(
                      padding: const EdgeInsets.only(left: 45.0, right: 45.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(bipapItrig
                              ? "-" + bipapminValue.toString()
                              : bipapminValue.toString()),
                          Text(
                            bipapparameterUnits,
                            style: TextStyle(fontSize: 16),
                          ),
                          Text(bipapItrig
                              ? "-" + bipapmaxValue.toString()
                              : bipapmaxValue.toString())
                        ],
                      ),
                    )
                  ],
                ),
              )),
        ]),
      ],
    );
  }

  autoData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              InkWell(
                onTap: () {
                  setState(() {
                    automaxValue = 65;
                    autominValue = 0;
                    autoparameterName = "PS";
                    autoparameterUnits = "cmH\u2082O above PEEP";
                    autoItrig = false;
                    autoPeep = false;
                    autoIe = false;
                    autoPs = true;
                    autoTi = false;
                    autoVtMin = false;
                    autoVtMax = false;
                    autoFio2 = false;
                    autoAtime = false;
                    autoEtrig = false;
                    autoPc = false;
                    autoBackupRr = false;
                    autoMinTe = false;
                    autoVt = false;
                    autoPcMax = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: autoPs ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "PS",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: autoPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "65",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  autoautoalue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: autoPs
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    autoPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: autoautoalue != null
                                      ? autoautoalue / 60
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    automaxValue = 100;
                    autominValue = 0;
                    autoparameterName = "PC Max";
                    autoparameterUnits = "cmH\u2082O above PEEP";
                    autoItrig = false;
                    autoPeep = false;
                    autoIe = false;
                    autoPs = false;
                    autoTi = false;
                    autoVtMin = false;
                    autoVtMax = false;
                    autoFio2 = false;
                    autoAtime = false;
                    autoBackupRr = false;
                    autoEtrig = false;
                    autoPc = false;
                    autoVt = false;
                    autoMinTe = false;
                    autoPcMax = true;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: autoPcMax ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "PC Max",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: autoPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "100",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  autoPcMaxValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: autoPcMax
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    autoPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: autoPcMaxValue != null
                                      ? autoPcMaxValue / 100
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    automaxValue = _isTab10 ? 45 : 30;
                    autominValue = 0;
                    autoparameterName = "PEEP";
                    autoparameterUnits = "";
                    autoItrig = false;
                    autoPeep = true;
                    autoIe = false;
                    autoPs = false;
                    autoTi = false;
                    autoVtMin = false;
                    autoVtMax = false;
                    autoFio2 = false;
                    autoAtime = false;
                    autoEtrig = false;
                    autoPc = false;
                    autoVt = false;
                    autoBackupRr = false;
                    autoMinTe = false;
                    autoPcMax = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: autoPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "PEEP",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: autoPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                _isTab10 ? "45" : "30",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  autoPeepValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: autoPeep
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    autoPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: autoPeepValue != null
                                      ? _isTab10
                                          ? autoPeepValue / 45
                                          : autoPeepValue / 30
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
            ]),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                setState(() {
                  automaxValue = 55;
                  autominValue = 5;
                  autoparameterName = "A Time";
                  autoparameterUnits = "s";
                  autoItrig = false;
                  autoPeep = false;
                  autoIe = false;
                  autoPs = false;
                  autoTi = false;
                  autoVtMin = false;
                  autoVtMax = false;
                  autoFio2 = false;
                  autoAtime = true;
                  autoEtrig = false;
                  autoPc = false;
                  autoVt = false;
                  autoBackupRr = false;
                  autoMinTe = false;
                  autoPcMax = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: autoAtime ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Apnea Time",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: autoAtime
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "s",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoAtime
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "55",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoAtime
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "5",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoAtime
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                autoAtimeValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: autoAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  autoAtime
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: autoAtimeValue != null
                                    ? autoAtimeValue / 55
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  automaxValue = 100;
                  autominValue = 21;
                  autoparameterName = "FiO\u2082";
                  autoparameterUnits = "%";
                  autoItrig = false;
                  autoPeep = false;
                  autoIe = false;
                  autoPs = false;
                  autoTi = false;
                  autoVtMin = false;
                  autoVtMax = false;
                  autoFio2 = true;
                  autoAtime = false;
                  autoEtrig = false;
                  autoPc = false;
                  autoVt = false;
                  autoBackupRr = false;
                  autoMinTe = false;
                  autoPcMax = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: autoFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: autoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                autoFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: autoFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  autoFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: autoFio2Value != null
                                    ? autoFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  automaxValue = 10;
                  autominValue = 1;
                  autoparameterName = "I Trig";
                  autoparameterUnits = "cmH\u2082O Below PEEP";
                  autoItrig = true;
                  autoPeep = false;
                  autoIe = false;
                  autoPs = false;
                  autoTi = false;
                  autoVtMin = false;
                  autoVtMax = false;
                  autoFio2 = false;
                  autoAtime = false;
                  autoEtrig = false;
                  autoPc = false;
                  autoVt = false;
                  autoBackupRr = false;
                  autoMinTe = false;
                  autoPcMax = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: autoItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: autoItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig ? "-$autoItrigValue" : "$autoItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: autoItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  autoItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: autoItrigValue != null
                                    ? autoItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              // InkWell(
              //   onTap: () {
              //     setState(() {
              //       automaxValue = 1200;
              //       autominValue = 100;
              //       autoparameterName = "Vt Min";
              //       autoparameterUnits = "mL";
              //       autoItrig = false;
              //       autoPeep = false;
              //       autoIe = false;
              //       autoPs = false;
              //       autoTi = false;
              //       autoVtMin = true;
              //       autoVtMax = false;
              //       autoFio2 = false;
              //       autoAtime = false;
              //       autoEtrig = false;
              //       autoBackupRr = false;
              //       autoPc = false;
              //       autoMinTe = false;
              //     });
              //   },
              //   child: Center(
              //     child: Container(
              //       width: 130,
              //       height: 130,
              //       child: Card(
              //         elevation: 40,
              //         color: autoVtMin ? Color(0xFFE0E0E0) : Color(0xFF213855),
              //         child: Padding(
              // padding: const EdgeInsets.all(6.0),
              // child: Center(
              //     child: Stack(
              //   children: [
              //     Align(
              //       alignment: Alignment.topLeft,
              //       child: Text(
              //         "Vt Min",
              //         style: TextStyle(
              //   fontSize: 15,
              //   fontWeight: FontWeight.bold,
              //   color: autoVtMin
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.topRight,
              //       child: Text(
              //         "mL",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoVtMin
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomRight,
              //       child: Text(
              //         "1200",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoVtMin
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomLeft,
              //       child: Text(
              //         "100",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoVtMin
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.center,
              //       child: Padding(
              //         padding: const EdgeInsets.only(top: 1.0),
              //         child: Text(
              // autoVtMinValue.toString(),
              // style: TextStyle(
              //     fontSize: 35,
              //     color: autoVtMin
              //         ? Color(0xFF213855)
              //         : Color(0xFFE0E0E0)),
              //         ),
              //       ),
              //     ),
              //     Padding(
              //       padding: const EdgeInsets.only(
              // bottom: 20.0, left: 10, right: 10),
              //       child: Align(
              //         alignment: Alignment.bottomCenter,
              //         child: LinearProgressIndicator(
              // backgroundColor: Colors.grey,
              // valueColor: AlwaysStoppedAnimation<Color>(
              //   autoVtMin
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0),
              // ),
              // value: autoVtMinValue != null
              //     ? autoVtMinValue / 1200
              //     : 0,
              //         ),
              //       ),
              //     )
              //   ],
              // )),
              //         ),
              //       ),
              //     ),
              //   ),
              // ),
              // InkWell(
              //   onTap: () {
              //     setState(() {
              //       automaxValue = 1200;
              //       autominValue = 100;
              //       autoparameterName = "Vt Max";
              //       autoparameterUnits = "mL";
              //       autoItrig = false;
              //       autoPeep = false;
              //       autoIe = false;
              //       autoPs = false;
              //       autoTi = false;
              //       autoVtMin = false;
              //       autoVtMax = true;
              //       autoBackupRr = false;
              //       autoFio2 = false;
              //       autoAtime = false;
              //       autoEtrig = false;
              //       autoPc = false;
              //       autoMinTe = false;
              //     });
              //   },
              //   child: Center(
              //     child: Container(
              //       width: 130,
              //       height: 130,
              //       child: Card(
              //         elevation: 40,
              //         color: autoVtMax ? Color(0xFFE0E0E0) : Color(0xFF213855),
              //         child: Padding(
              // padding: const EdgeInsets.all(6.0),
              // child: Center(
              //     child: Stack(
              //   children: [
              //     Align(
              //       alignment: Alignment.topLeft,
              //       child: Text(
              //         "Vt Max",
              //         style: TextStyle(
              //   fontSize: 15,
              //   fontWeight: FontWeight.bold,
              //   color: autoVtMax
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.topRight,
              //       child: Text(
              //         "mL",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoVtMax
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomRight,
              //       child: Text(
              //         "1200",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoVtMax
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomLeft,
              //       child: Text(
              //         "100",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoVtMax
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.center,
              //       child: Padding(
              //         padding: const EdgeInsets.only(top: 1.0),
              //         child: Text(
              // autoVtMaxValue.toString(),
              // style: TextStyle(
              //     fontSize: 35,
              //     color: autoVtMax
              //         ? Color(0xFF213855)
              //         : Color(0xFFE0E0E0)),
              //         ),
              //       ),
              //     ),
              //     Padding(
              //       padding: const EdgeInsets.only(
              // bottom: 20.0, left: 10, right: 10),
              //       child: Align(
              //         alignment: Alignment.bottomCenter,
              //         child: LinearProgressIndicator(
              // backgroundColor: Colors.grey,
              // valueColor: AlwaysStoppedAnimation<Color>(
              //   autoVtMax
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0),
              // ),
              // value: autoVtMaxValue != null
              //     ? autoVtMaxValue / 1200
              //     : 0,
              //         ),
              //       ),
              //     )
              //   ],
              // )),
              //         ),
              //       ),
              //     ),
              //   ),
              // ),

              // InkWell(
              //   onTap: () {
              //     setState(() {
              //       automaxValue = 5;
              //       autominValue = 1;
              //       autoparameterName = "Min Te";
              //       autoparameterUnits = "s";
              //       autoItrig = false;
              //       autoPeep = false;
              //       autoIe = false;
              //       autoPs = false;
              //       autoTi = false;
              //       autoVtMin = false;
              //       autoVtMax = false;
              //       autoFio2 = false;
              //       autoAtime = false;
              //       autoBackupRr = false;
              //       autoEtrig = false;
              //       autoPc = false;
              //       autoMinTe = true;
              //     });
              //   },
              //   child: Center(
              //     child: Container(
              //       width: 130,
              //       height: 130,
              //       child: Card(
              //         elevation: 40,
              //         color: autoMinTe ? Color(0xFFE0E0E0) : Color(0xFF213855),
              //         child: Padding(
              // padding: const EdgeInsets.all(6.0),
              // child: Center(
              //     child: Stack(
              //   children: [
              //     Align(
              //       alignment: Alignment.topLeft,
              //       child: Text(
              //         "Min Te",
              //         style: TextStyle(
              //   fontSize: 15,
              //   fontWeight: FontWeight.bold,
              //   color: autoMinTe
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.topRight,
              //       child: Text(
              //         "s",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoMinTe
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomRight,
              //       child: Text(
              //         "5",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoMinTe
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomLeft,
              //       child: Text(
              //         "1",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: autoMinTe
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.center,
              //       child: Padding(
              //         padding: const EdgeInsets.only(top: 1.0),
              //         child: Text(
              // autoMinTeValue.toString(),
              // style: TextStyle(
              //     fontSize: 35,
              //     color: autoMinTe
              //         ? Color(0xFF213855)
              //         : Color(0xFFE0E0E0)),
              //         ),
              //       ),
              //     ),
              //     Padding(
              //       padding: const EdgeInsets.only(
              // bottom: 20.0, left: 10, right: 10),
              //       child: Align(
              //         alignment: Alignment.bottomCenter,
              //         child: LinearProgressIndicator(
              // backgroundColor: Colors.grey,
              // valueColor: AlwaysStoppedAnimation<Color>(
              //   autoMinTe
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0),
              // ),
              // value: autoMinTeValue != null
              //     ? autoMinTeValue / 5
              //     : 0,
              //         ),
              //       ),
              //     )
              //   ],
              // )),
              //         ),
              //       ),
              //     ),
              //   ),
              // ),
              InkWell(
                onTap: () {
                  setState(() {
                    automaxValue = 60;
                    autominValue = 1;
                    autoparameterName = "Backup RR";
                    autoparameterUnits = "bpm";
                    autoItrig = false;
                    autoPeep = false;
                    autoIe = false;
                    autoPs = false;
                    autoTi = false;
                    autoVtMin = false;
                    autoVtMax = false;
                    autoFio2 = false;
                    autoAtime = false;
                    autoEtrig = false;
                    autoPc = false;
                    autoVt = false;
                    autoBackupRr = true;
                    autoMinTe = false;
                    autoPcMax = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color:
                          autoBackupRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "Backup RR",
                                style: TextStyle(
                                    fontSize: 13,
                                    fontWeight: FontWeight.bold,
                                    color: autoBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "bpm",
                                style: TextStyle(
                                    fontSize: 10,
                                    color: autoBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "60",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "1",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  autoBackupRrValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: autoBackupRr
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    autoBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: autoBackupRrValue != null
                                      ? autoBackupRrValue / 60
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    automaxValue = 101;
                    autominValue = 1;
                    autoparameterName = "Backup I:E";
                    autoparameterUnits = "";
                    autoItrig = false;
                    autoPeep = false;
                    autoIe = false;
                    autoPs = false;
                    autoTi = false;
                    autoVtMin = false;
                    autoVtMax = false;
                    autoFio2 = false;
                    autoAtime = false;
                    autoIe = true;
                    autoPc = false;
                    autoVt = false;
                    autoBackupRr = false;
                    autoMinTe = false;
                    autoPcMax = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: autoIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "Backup I:E",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: autoIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "1:8.0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "4.0:1",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  // autoIeValue,
                                  getIeData(autoIeValue, 1),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: autoIe
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    autoIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: autoIeValue != null
                                      ? autoIeValue / 101
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  setState(() {
                    automaxValue = 46;
                    autominValue = 1;
                    autoparameterName = "Ti";
                    autoparameterUnits = "s";
                    autoItrig = false;
                    autoPeep = false;
                    autoIe = false;
                    autoPs = false;
                    autoTi = true;
                    autoVtMin = false;
                    autoVtMax = false;
                    autoFio2 = false;
                    autoAtime = false;
                    autoEtrig = false;
                    autoPc = false;
                    autoVt = false;
                    autoBackupRr = false;
                    autoMinTe = false;
                    autoPcMax = false;
                  });
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 176 : 146,
                    height: _isTab10 ? 160 : 130,
                    child: Card(
                      elevation: 40,
                      color: autoTi ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "Ti",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: autoTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "s",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "5.0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0.5",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: autoTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  getTiValue(autoTiValue).toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: autoTi
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    autoTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: autoTiValue != null
                                      ? autoTiValue / 46
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),

              // Container(width: 146)
            ]),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            InkWell(
              onTap: () {
                setState(() {
                  automaxValue = _isTab10 ? 2500 : 600;
                  autominValue = _isTab10 ? 50 : 200;
                  autoparameterName = "VT";
                  autoparameterUnits = "mL";
                  autoItrig = false;
                  autoPeep = false;
                  autoIe = false;
                  autoPs = false;
                  autoTi = false;
                  autoVtMin = false;
                  autoVtMax = false;
                  autoFio2 = false;
                  autoAtime = false;
                  autoBackupRr = false;
                  autoEtrig = false;
                  autoPc = false;
                  autoVt = true;
                  autoMinTe = false;
                  autoPcMax = false;
                });
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: autoPc ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "VT",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: autoPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "mL",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "2500" : "600",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              _isTab10 ? "50" : "200",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: autoPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                autoVtValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: autoPc
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  autoPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: autoVtValue != null
                                    ? _isTab10
                                        ? autoVtValue / 2500
                                        : autoVtValue / 600
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        SizedBox(width: _isTab10 ? 30 : 140),
        SizedBox(width: _isTab10 ? 30 : 0),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                width: 400,
                height: 195,
                child: Center(
                  child: Column(
                    children: [
                      SizedBox(
                        height: 5,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: <Widget>[
                          IconButton(
                            icon: Icon(
                              Icons.remove,
                              color: Colors.black,
                              size: 45,
                            ),
                            onPressed: () {
                              setState(() {
                                if (autoItrig == true &&
                                    autoItrigValue != autominValue) {
                                  setState(() {
                                    autoItrigValue = autoItrigValue - 1;
                                  });
                                }
                                // else if (autoPeep == true &&
                                //     autoPeepValue != autominValue) {
                                //   setState(() {
                                //     autoPeepValue = autoPeepValue - 1;
                                //     if (autoItrigValue > 1 &&
                                //         autoItrigValue > autoPeepValue) {
                                //       autoItrigValue = autoPeepValue;
                                //     }
                                //   });
                                // }
                                else if (autoPeep == true &&
                                    autoPeepValue != autominValue) {
                                  setState(() {
                                    autoPeepValue = autoPeepValue - 1;
                                  });
                                } else if (autoPs == true &&
                                    autoautoalue != autoPcValue + 1 &&
                                    autoautoalue != 0) {
                                  setState(() {
                                    autoautoalue = autoautoalue - 1;
                                  });
                                } else if (autoIe == true &&
                                    autoIeValue != autominValue) {
                                  setState(() {
                                    autoIeValue = autoIeValue - 1;
                                  });
                                } else if (autoTi == true &&
                                    autoTiValue != autominValue) {
                                  setState(() {
                                    autoTiValue = autoTiValue - 1;
                                  });
                                } else if (autoVtMin == true &&
                                    autoVtMinValue != autominValue) {
                                  setState(() {
                                    autoVtMinValue = autoVtMinValue - 1;
                                    //  if (autoVtMinValue >= autoVtMaxValue) {
                                    //    autoVtMaxValue = autoVtMaxValue - 1;
                                    //  }
                                  });
                                } else if (autoVtMax == true &&
                                    autoVtMaxValue != autoVtMinValue + 1) {
                                  autoVtMaxValue = autoVtMaxValue - 1;
                                } else if (autoFio2 == true &&
                                    autoFio2Value != autominValue) {
                                  setState(() {
                                    autoFio2Value = autoFio2Value - 1;
                                  });
                                } else if (autoVt == true &&
                                    autoVtValue != autominValue) {
                                  setState(() {
                                    autoVtValue = autoVtValue - 1;
                                  });
                                } else if (autoPc == true &&
                                    autoPcValue != autominValue &&
                                    autoPcValue != 5) {
                                  setState(() {
                                    autoPcValue = autoPcValue - 1;
                                    if (autoPcValue < autoautoalue) {
                                      autoautoalue = autoPcValue;
                                    }
                                  });
                                } else if (autoAtime == true &&
                                    autoAtimeValue != autominValue) {
                                  setState(() {
                                    autoAtimeValue = autoAtimeValue - 1;
                                  });
                                } else if (autoEtrig == true &&
                                    autoEtrigValue != autominValue) {
                                  setState(() {
                                    autoEtrigValue = autoEtrigValue - 1;
                                  });
                                } else if (autoPcMax == true &&
                                    autoPcMaxValue != autominValue) {
                                  setState(() {
                                    autoPcMaxValue = autoPcMaxValue - 1;
                                  });
                                } else if (autoBackupRr == true &&
                                    autoBackupRrValue != autominValue) {
                                  setState(() {
                                    autoBackupRrValue = autoBackupRrValue - 1;
                                  });
                                } else if (autoMinTe == true &&
                                    autoMinTeValue != autominValue) {
                                  setState(() {
                                    autoMinTeValue = autoMinTeValue - 1;
                                  });
                                }
                              });
                            },
                          ),
                          SizedBox(
                            width: 40,
                          ),
                          Text(
                            autoparameterName,
                            style: TextStyle(
                                fontSize: 25, fontWeight: FontWeight.normal),
                          ),
                          SizedBox(
                            width: 40,
                          ),
                          IconButton(
                            icon: Icon(
                              Icons.add,
                              color: Colors.black,
                              size: 45,
                            ),
                            onPressed: () {
                              int maxPeep = _isTab10 ? 45 : 30;
                              int maxValue = _isTab10 ? 85 : 65;
                              int maxValuepcValue, maxValuepeepValue;
                              setState(() {
                                maxValuepcValue = maxValue - autoPeepValue;
                                if ((maxValue - autoPcValue) >= maxPeep) {
                                  maxValuepeepValue = maxPeep;
                                } else {
                                  maxValuepeepValue = maxValue - autoPcValue;
                                }
                                if (autoItrig == true &&
                                    autoItrigValue != automaxValue) {
                                  setState(() {
                                    autoItrigValue = autoItrigValue + 1;
                                  });
                                } else if (autoPeep == true &&
                                    autoPeepValue != automaxValue &&
                                    autoPeepValue < maxValuepeepValue) {
                                  setState(() {
                                    autoPeepValue = autoPeepValue + 1;
                                  });
                                } else if (autoPs == true &&
                                    autoautoalue != autoPcValue &&
                                    autoPcValue < maxValuepcValue) {
                                  setState(() {
                                    autoautoalue = autoautoalue + 1;
                                  });
                                } else if (autoIe == true &&
                                    autoIeValue != automaxValue) {
                                  setState(() {
                                    autoIeValue = autoIeValue + 1;
                                  });
                                } else if (autoVt == true &&
                                    autoVtValue != automaxValue) {
                                  setState(() {
                                    autoVtValue = autoVtValue + 1;
                                  });
                                } else if (autoTi == true &&
                                    autoTiValue != automaxValue) {
                                  setState(() {
                                    autoTiValue = autoTiValue + 1;
                                  });
                                } else if (autoVtMin == true &&
                                    autoVtMinValue != pacvmaxValue) {
                                  setState(() {
                                    if (autoVtMaxValue != 1190 &&
                                        autoVtMinValue != 1189) {
                                      autoVtMinValue = autoVtMinValue + 1;
                                      autoVtMaxValue = autoVtMinValue + 1;
                                    }
                                  });
                                } else if (autoVtMax == true &&
                                    autoVtMaxValue != pacvmaxValue) {
                                  setState(() {
                                    autoVtMaxValue = autoVtMaxValue + 1;
                                  });
                                } else if (autoFio2 == true &&
                                    autoFio2Value != automaxValue) {
                                  setState(() {
                                    autoFio2Value = autoFio2Value + 1;
                                  });
                                } else if (autoPc == true &&
                                    autoPcValue != automaxValue) {
                                  setState(() {
                                    autoPcValue = autoPcValue + 1;
                                  });
                                } else if (autoPcMax == true &&
                                    autoPcMaxValue != automaxValue) {
                                  setState(() {
                                    autoPcMaxValue = autoPcMaxValue + 1;
                                  });
                                } else if (autoAtime == true &&
                                    autoAtimeValue != automaxValue) {
                                  setState(() {
                                    autoAtimeValue = autoAtimeValue + 1;
                                  });
                                } else if (autoEtrig == true &&
                                    autoEtrigValue != automaxValue) {
                                  setState(() {
                                    autoEtrigValue = autoEtrigValue + 1;
                                  });
                                } else if (autoBackupRr == true &&
                                    autoBackupRrValue != automaxValue) {
                                  setState(() {
                                    autoBackupRrValue = autoBackupRrValue + 1;
                                  });
                                } else if (autoMinTe == true &&
                                    autoMinTeValue != automaxValue) {
                                  setState(() {
                                    autoMinTeValue = autoMinTeValue + 1;
                                  });
                                }
                              });
                            },
                          ),
                        ],
                      ),
                      Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Text(
                              autoItrig
                                  ? pItrig
                                      ? "-$autoItrigValue"
                                      : "$autoItrigValue"
                                  : autoPeep
                                      ? autoPeepValue.toInt().toString()
                                      : autoPs
                                          ? autoautoalue.toInt().toString()
                                          : autoIe
                                              // ? autoIeValue.toInt().toString()
                                              ? getIeData(autoIeValue, 1)
                                              : autoTi
                                                  ? getTiValue(autoTiValue)
                                                      .toString()
                                                  : autoVtMin
                                                      ? autoVtMinValue
                                                          .toInt()
                                                          .toString()
                                                      : autoVtMax
                                                          ? autoVtMaxValue
                                                              .toInt()
                                                              .toString()
                                                          : autoFio2
                                                              ? autoFio2Value
                                                                  .toInt()
                                                                  .toString()
                                                              : autoPc
                                                                  ? autoPcValue
                                                                      .toInt()
                                                                      .toString()
                                                                  : autoPcMax
                                                                      ? autoPcMaxValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : autoAtime
                                                                          ? autoAtimeValue
                                                                              .toInt()
                                                                              .toString()
                                                                          : autoEtrig
                                                                              ? autoEtrigValue.toInt().toString()
                                                                              : autoBackupRr ? autoBackupRrValue.toInt().toString() : autoMinTe ? autoMinTeValue.toInt().toString() : autoVt ? autoVtValue.toInt().toString() : "",
                              style: TextStyle(
                                  fontSize: 40,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(
                        height: 2,
                      ),
                      Container(
                          width: 350,
                          child: Slider(
                            min: autominValue.toDouble(),
                            max: automaxValue.toDouble(),
                            onChanged: (double value) {
                              int maxPeep = _isTab10 ? 45 : 30;
                              int maxValue = _isTab10 ? 85 : 65;
                              int maxValuepcValue, maxValuepeepValue;
                              setState(() {
                                maxValuepcValue = maxValue - autoPeepValue;
                                if ((maxValue - autoPcValue) >= maxPeep) {
                                  maxValuepeepValue = maxPeep;
                                } else {
                                  maxValuepeepValue = maxValue - autoPcValue;
                                }
                              });
                              if (autoItrig == true) {
                                setState(() {
                                  autoItrigValue = value.toInt();
                                });
                              } else if (autoVt == true) {
                                setState(() {
                                  autoVtValue = value.toInt();
                                });
                              } else if (autoPeep == true) {
                                setState(() {
                                  if (value.toInt() >= maxValuepeepValue) {
                                    autoPeepValue = maxValuepeepValue;
                                  } else {
                                    autoPeepValue = value.toInt();
                                  }
                                });
                              } else if (autoPs == true) {
                                setState(() {
                                  if (value.toInt() >= autoPcValue) {
                                    autoautoalue = autoPcValue;
                                  } else {
                                    autoautoalue = value.toInt();
                                  }
                                });
                              } else if (autoIe == true) {
                                setState(() {
                                  autoIeValue = value.toInt();
                                });
                              } else if (autoTi == true) {
                                setState(() {
                                  autoTiValue = value.toInt();
                                });
                              } else if (autoVtMin == true) {
                                if (value.toInt() < 1190) {
                                  autoVtMinValue = value.toInt();
                                  autoVtMaxValue = autoVtMinValue + 1;
                                }
                              } else if (autoVtMax == true) {
                                setState(() {
                                  if (value.toInt() <= autoVtMinValue + 1) {
                                    autoVtMaxValue = autoVtMinValue + 1;
                                  } else {
                                    autoVtMaxValue = value.toInt();
                                  }
                                });
                              } else if (autoFio2 == true) {
                                setState(() {
                                  autoFio2Value = value.toInt();
                                });
                              } else if (autoPc == true) {
                                setState(() {
                                  if (value.toInt() < autoautoalue) {
                                    if (value.toInt() >= maxValuepcValue) {
                                      autoPcValue = maxValuepcValue;
                                    } else {
                                      autoPcValue = value.toInt();
                                    }
                                    autoautoalue = autoPcValue;
                                  } else {
                                    if (value.toInt() >= maxValuepcValue) {
                                      autoPcValue = maxValuepcValue;
                                    } else {
                                      autoPcValue = value.toInt();
                                    }
                                  }
                                  // if(value.toInt())
                                });
                              } else if (autoEtrig == true) {
                                setState(() {
                                  autoEtrigValue = value.toInt();
                                });
                              } else if (autoAtime == true) {
                                setState(() {
                                  autoAtimeValue = value.toInt();
                                });
                              } else if (autoBackupRr == true) {
                                setState(() {
                                  autoBackupRrValue = value.toInt();
                                });
                              } else if (autoMinTe == true) {
                                setState(() {
                                  autoMinTeValue = value.toInt();
                                });
                              } else if (autoPcMax == true) {
                                setState(() {
                                  autoPcMaxValue = value.toInt();
                                });
                              }
                            },
                            value: autoItrig
                                ? autoItrigValue.toDouble()
                                : autoPeep
                                    ? autoPeepValue.toDouble()
                                    : autoPs
                                        ? autoautoalue.toDouble()
                                        : autoIe
                                            ? autoIeValue.toDouble()
                                            : autoTi
                                                ? autoTiValue.toDouble()
                                                : autoVtMin
                                                    ? autoVtMinValue.toDouble()
                                                    : autoVtMax
                                                        ? autoVtMaxValue
                                                            .toDouble()
                                                        : autoFio2
                                                            ? autoFio2Value
                                                                .toDouble()
                                                            : autoPc
                                                                ? autoPcValue
                                                                    .toDouble()
                                                                : autoPcMax
                                                                    ? autoPcMaxValue
                                                                        .toDouble()
                                                                    : autoEtrig
                                                                        ? autoEtrigValue
                                                                            .toDouble()
                                                                        : autoAtime
                                                                            ? autoAtimeValue
                                                                                .toDouble()
                                                                            : autoBackupRr
                                                                                ? autoBackupRrValue.toDouble()
                                                                                : autoMinTe ? autoMinTeValue.toDouble() : autoVt ? autoVtValue.toDouble() : "",
                          )),
                      SizedBox(
                        height: 5,
                      ),
                      Padding(
                        padding: const EdgeInsets.only(left: 45.0, right: 45.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(autoIe
                                ? getIeData(autominValue, 1)
                                : autoItrig
                                    ? pItrig
                                        ? "-$autominValue"
                                        : "$autominValue"
                                    : autoTi
                                        ? getTiValue(autominValue).toString()
                                        : autominValue.toString()),
                            Text(
                              autoItrig
                                  ? pItrig ? autoparameterUnits : "lpm"
                                  : autoparameterUnits,
                              style: TextStyle(fontSize: 16),
                            ),
                            Text(autoIe
                                ? getIeData(automaxValue, 1)
                                : autoItrig
                                    ? pItrig
                                        ? "-$automaxValue"
                                        : "$automaxValue"
                                    : autoTi
                                        ? getTiValue(automaxValue).toString()
                                        : automaxValue.toString())
                          ],
                        ),
                      )
                    ],
                  ),
                )),
          ],
        ),
      ],
    );
  }

  psvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              InkWell(
                onTap: () {
                  if (_parameterChangeEnabled == true) {
                    setState(() {
                      _parameterChangeEnabled = false;
                      psvmaxValue = 65;
                      psvminValue = 0;
                      psvparameterName = "PS";
                      psvparameterUnits = "cmH\u2082O above PEEP";
                      psvItrig = false;
                      psvPeep = false;
                      psvIe = false;
                      psvPs = true;
                      psvTi = false;
                      psvPlateau = false;
                      psvFlow = false;
                      psvFio2 = false;
                      psvAtime = false;
                      psvEtrig = false;
                      psvPc = false;
                      psvBackupRr = false;
                      psvMinTe = false;
                      psvVt = false;
                    });
                  }
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 156 : 146,
                    height: _isTab10 ? 130 : 130,
                    child: Card(
                      elevation: 40,
                      color: psvPs ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "PS",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: psvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "65",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  psvPsValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: psvPs
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    psvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value:
                                      psvPsValue != null ? psvPsValue / 65 : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              pControl == false
                  ? InkWell(
                      onTap: () {
                        if (_parameterChangeEnabled == true) {
                          setState(() {
                            _parameterChangeEnabled = false;
                            psvmaxValue = _isTab10 ? 2500 : 600;
                            psvminValue = _isTab10 ? 50 : 200;
                            psvparameterName = "VT";
                            psvparameterUnits = "mL";
                            psvItrig = false;
                            psvPeep = false;
                            psvIe = false;
                            psvPs = false;
                            psvTi = false;
                            psvPlateau = false;
                            psvFlow = false;
                            psvFio2 = false;
                            psvAtime = false;
                            psvBackupRr = false;
                            psvEtrig = false;
                            psvPc = false;
                            psvVt = true;
                            psvMinTe = false;
                          });
                        }
                      },
                      child: Center(
                        child: Container(
                          width: _isTab10 ? 156 : 146,
                          height: _isTab10 ? 130 : 130,
                          child: Card(
                            elevation: 40,
                            color:
                                psvVt ? Color(0xFFE0E0E0) : Color(0xFF213855),
                            child: Padding(
                              padding: const EdgeInsets.all(6.0),
                              child: Center(
                                  child: Stack(
                                children: [
                                  Align(
                                    alignment: Alignment.topLeft,
                                    child: Text(
                                      "VT",
                                      style: TextStyle(
                                          fontSize: 15,
                                          fontWeight: FontWeight.bold,
                                          color: psvVt
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.topRight,
                                    child: Text(
                                      "mL",
                                      style: TextStyle(
                                          fontSize: 12,
                                          color: psvVt
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.bottomRight,
                                    child: Text(
                                      _isTab10 ? "2500" : "600",
                                      style: TextStyle(
                                          fontSize: 12,
                                          color: psvVt
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      _isTab10 ? "50" : "200",
                                      style: TextStyle(
                                          fontSize: 12,
                                          color: psvVt
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.center,
                                    child: Padding(
                                      padding: const EdgeInsets.only(top: 1.0),
                                      child: Text(
                                        psvVtValue.toString(),
                                        style: TextStyle(
                                            fontSize: 35,
                                            color: psvVt
                                                ? Color(0xFF213855)
                                                : Color(0xFFE0E0E0)),
                                      ),
                                    ),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        bottom: 20.0, left: 10, right: 10),
                                    child: Align(
                                      alignment: Alignment.bottomCenter,
                                      child: LinearProgressIndicator(
                                        backgroundColor: Colors.grey,
                                        valueColor:
                                            AlwaysStoppedAnimation<Color>(
                                          psvVt
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0),
                                        ),
                                        value: psvVtValue != null
                                            ? _isTab10
                                                ? psvVtValue / 2500
                                                : psvVtValue / 600
                                            : 0,
                                      ),
                                    ),
                                  )
                                ],
                              )),
                            ),
                          ),
                        ),
                      ),
                    )
                  : InkWell(
                      onTap: () {
                        if (_parameterChangeEnabled == true &&
                            psvPsValue == 0) {
                          setState(() {
                            _parameterChangeEnabled = false;
                            psvmaxValue = _isTab10 ? 85 : 60;
                            psvminValue = 0;
                            psvparameterName = "PC";
                            psvparameterUnits = "cmH\u2082O above PEEP";
                            psvItrig = false;
                            psvPeep = false;
                            psvIe = false;
                            psvPs = false;
                            psvTi = false;
                            psvPlateau = false;
                            psvFlow = false;
                            psvFio2 = false;
                            psvAtime = false;
                            psvBackupRr = false;
                            psvEtrig = false;
                            psvPc = true;
                            psvVt = false;
                            psvMinTe = false;
                          });
                        }
                      },
                      child: Center(
                        child: Container(
                          width: _isTab10 ? 156 : 146,
                          height: _isTab10 ? 130 : 130,
                          child: Card(
                            elevation: 40,
                            color: psvPc
                                ? Color(0xFFE0E0E0)
                                : psvPsValue == 0
                                    ? Color(0xFF213855)
                                    : Colors.grey,
                            child: Padding(
                              padding: const EdgeInsets.all(6.0),
                              child: Center(
                                  child: Stack(
                                children: [
                                  Align(
                                    alignment: Alignment.topLeft,
                                    child: Text(
                                      "PC",
                                      style: TextStyle(
                                          fontSize: 15,
                                          fontWeight: FontWeight.bold,
                                          color: psvPc
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.topRight,
                                    child: Text(
                                      "cmH\u2082O",
                                      style: TextStyle(
                                          fontSize: 12,
                                          color: psvPc
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.bottomRight,
                                    child: Text(
                                      _isTab10 ? "85" : "60",
                                      style: TextStyle(
                                          fontSize: 12,
                                          color: psvPc
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      "0",
                                      style: TextStyle(
                                          fontSize: 12,
                                          color: psvPc
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                  Align(
                                    alignment: Alignment.center,
                                    child: Padding(
                                      padding: const EdgeInsets.only(top: 1.0),
                                      child: Text(
                                        psvPcValue.toString(),
                                        style: TextStyle(
                                            fontSize: 35,
                                            color: psvPc
                                                ? Color(0xFF213855)
                                                : Color(0xFFE0E0E0)),
                                      ),
                                    ),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.only(
                                        bottom: 20.0, left: 10, right: 10),
                                    child: Align(
                                      alignment: Alignment.bottomCenter,
                                      child: LinearProgressIndicator(
                                        backgroundColor: Colors.grey,
                                        valueColor:
                                            AlwaysStoppedAnimation<Color>(
                                          psvPc
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0),
                                        ),
                                        value: psvPcValue != null
                                            ? _isTab10
                                                ? psvPcValue / 85
                                                : psvPcValue / 60
                                            : 0,
                                      ),
                                    ),
                                  )
                                ],
                              )),
                            ),
                          ),
                        ),
                      ),
                    ),
              InkWell(
                onTap: () {
                  if (_parameterChangeEnabled == true) {
                    setState(() {
                      _parameterChangeEnabled = false;
                      psvmaxValue = _isTab10 ? 45 : 30;
                      psvminValue = 0;
                      psvparameterName = "PEEP";
                      psvparameterUnits = "";
                      psvItrig = false;
                      psvPeep = true;
                      psvIe = false;
                      psvPs = false;
                      psvTi = false;
                      psvPlateau = false;
                      psvFlow = false;
                      psvFio2 = false;
                      psvAtime = false;
                      psvEtrig = false;
                      psvPc = false;
                      psvVt = false;
                      psvBackupRr = false;
                      psvMinTe = false;
                    });
                  }
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 156 : 146,
                    height: _isTab10 ? 130 : 130,
                    child: Card(
                      elevation: 40,
                      color: psvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "PEEP",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: psvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "cmH\u2082O",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                _isTab10 ? "45" : "30",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  psvPeepValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: psvPeep
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    psvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: psvPeepValue != null
                                      ? _isTab10
                                          ? psvPeepValue / 45
                                          : psvPeepValue / 30
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              InkWell(
                onTap: () {
                  if (_parameterChangeEnabled == true) {
                    setState(() {
                      _parameterChangeEnabled = false;
                      psvmaxValue = 55;
                      psvminValue = 5;
                      psvparameterName = "A Time";
                      psvparameterUnits = "s";
                      psvItrig = false;
                      psvPeep = false;
                      psvIe = false;
                      psvPs = false;
                      psvTi = false;
                      psvPlateau = false;
                      psvFlow = false;
                      psvFio2 = false;
                      psvAtime = true;
                      psvEtrig = false;
                      psvPc = false;
                      psvVt = false;
                      psvBackupRr = false;
                      psvMinTe = false;
                    });
                  }
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 156 : 146,
                    height: _isTab10 ? 130 : 130,
                    child: Card(
                      elevation: 40,
                      color: psvAtime ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "Apnea Time",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: psvAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "s",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "55",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "5",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  psvAtimeValue.toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: psvAtime
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    psvAtime
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value: psvAtimeValue != null
                                      ? psvAtimeValue / 55
                                      : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
            ]),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psvmaxValue = 100;
                    psvminValue = 21;
                    psvparameterName = "FiO\u2082";
                    psvparameterUnits = "%";
                    psvItrig = false;
                    psvPeep = false;
                    psvIe = false;
                    psvPs = false;
                    psvTi = false;
                    psvPlateau = false;
                    psvFlow = false;
                    psvFio2 = true;
                    psvAtime = false;
                    psvEtrig = false;
                    psvPc = false;
                    psvVt = false;
                    psvBackupRr = false;
                    psvMinTe = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psvFio2Value != null
                                    ? psvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psvmaxValue = 10;
                    psvminValue = 1;
                    psvparameterName = "I Trig";
                    psvparameterUnits = "cmH\u2082O Below PEEP";
                    psvItrig = true;
                    psvPeep = false;
                    psvIe = false;
                    psvPs = false;
                    psvTi = false;
                    psvPlateau = false;
                    psvFlow = false;
                    psvFio2 = false;
                    psvAtime = false;
                    psvEtrig = false;
                    psvPc = false;
                    psvVt = false;
                    psvBackupRr = false;
                    psvMinTe = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psvItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig ? "-$psvItrigValue" : "$psvItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psvItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psvItrigValue != null
                                    ? psvItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psvmaxValue = 60;
                    psvminValue = 1;
                    psvparameterName = "Backup RR";
                    psvparameterUnits = "bpm";
                    psvItrig = false;
                    psvPeep = false;
                    psvIe = false;
                    psvPs = false;
                    psvTi = false;
                    psvPlateau = false;
                    psvFlow = false;
                    psvFio2 = false;
                    psvAtime = false;
                    psvEtrig = false;
                    psvPc = false;
                    psvVt = false;
                    psvBackupRr = true;
                    psvMinTe = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psvBackupRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Backup RR",
                              style: TextStyle(
                                  fontSize: 13,
                                  fontWeight: FontWeight.bold,
                                  color: psvBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 10,
                                  color: psvBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psvBackupRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psvBackupRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psvBackupRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psvBackupRrValue != null
                                    ? psvBackupRrValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psvmaxValue = 61;
                    psvminValue = 1;
                    psvparameterName = "Backup I:E";
                    psvparameterUnits = "";
                    psvItrig = false;
                    psvPeep = false;
                    psvIe = false;
                    psvPs = false;
                    psvTi = false;
                    psvPlateau = false;
                    psvFlow = false;
                    psvFio2 = false;
                    psvAtime = false;
                    psvIe = true;
                    psvPc = false;
                    psvVt = false;
                    psvBackupRr = false;
                    psvMinTe = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Backup I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                // psvIeValue,
                                getIeData(psvIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psvIe ? Color(0xFF213855) : Color(0xFFE0E0E0),
                                ),
                                value: psvIeValue != null ? psvIeValue / 61 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              InkWell(
                onTap: () {
                  if (_parameterChangeEnabled == true) {
                    setState(() {
                      _parameterChangeEnabled = false;
                      psvmaxValue = 46;
                      psvminValue = 1;
                      psvparameterName = "Ti";
                      psvparameterUnits = "s";
                      psvItrig = false;
                      psvPeep = false;
                      psvIe = false;
                      psvPs = false;
                      psvTi = true;
                      psvPlateau = false;
                      psvFlow = false;
                      psvFio2 = false;
                      psvAtime = false;
                      psvEtrig = false;
                      psvPc = false;
                      psvVt = false;
                      psvBackupRr = false;
                      psvMinTe = false;
                    });
                  }
                },
                child: Center(
                  child: Container(
                    width: _isTab10 ? 156 : 146,
                    height: _isTab10 ? 130 : 130,
                    child: Card(
                      elevation: 40,
                      color: psvTi ? Color(0xFFE0E0E0) : Color(0xFF213855),
                      child: Padding(
                        padding: const EdgeInsets.all(6.0),
                        child: Center(
                            child: Stack(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Text(
                                "Ti",
                                style: TextStyle(
                                    fontSize: 15,
                                    fontWeight: FontWeight.bold,
                                    color: psvTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: Text(
                                "s",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomRight,
                              child: Text(
                                "5.0",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Text(
                                "0.5",
                                style: TextStyle(
                                    fontSize: 12,
                                    color: psvTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 1.0),
                                child: Text(
                                  getTiValue(psvTiValue).toString(),
                                  style: TextStyle(
                                      fontSize: 35,
                                      color: psvTi
                                          ? Color(0xFF213855)
                                          : Color(0xFFE0E0E0)),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  bottom: 20.0, left: 10, right: 10),
                              child: Align(
                                alignment: Alignment.bottomCenter,
                                child: LinearProgressIndicator(
                                  backgroundColor: Colors.grey,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    psvTi
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                  value:
                                      psvTiValue != null ? psvTiValue / 46 : 0,
                                ),
                              ),
                            )
                          ],
                        )),
                      ),
                    ),
                  ),
                ),
              ),
              // InkWell(
              //   onTap: () {
              //     if (_parameterChangeEnabled == true) {
              //       setState(() {
              //         _parameterChangeEnabled = false;
              //       psvmaxValue = 50;
              //       psvminValue = 0;
              //       psvparameterName = "Plateau";
              //       psvparameterUnits = "L/m";
              //       psvItrig = false;
              //       psvPeep = false;
              //       psvIe = false;
              //       psvPs = false;
              //       psvTi = false;
              //       psvPlateau = true;
              //       psvFlow = false;
              //       psvFio2 = false;
              //       psvAtime = false;
              //       psvEtrig = false;
              //       psvBackupRr = false;
              //       psvPc = false;
              //       psvMinTe = false;
              //     });
              //   }
              //   },
              //   child: Center(
              //     child: Container(
              //     width: _isTab10 ? 156 : 146,
              //     height: _isTab10 ? 130 : 130,
              //       child: Card(
              //         elevation: 40,
              //         color: psvPlateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
              //         child: Padding(
              // padding: const EdgeInsets.all(6.0),
              // child: Center(
              //     child: Stack(
              //   children: [
              //     Align(
              //       alignment: Alignment.topLeft,
              //       child: Text(
              //         "Plateau",
              //         style: TextStyle(
              //   fontSize: 15,
              //   fontWeight: FontWeight.bold,
              //   color: psvPlateau
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.topRight,
              //       child: Text(
              //         "L/m",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: psvPlateau
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomRight,
              //       child: Text(
              //         "50",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: psvPlateau
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomLeft,
              //       child: Text(
              //         "0",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: psvPlateau
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.center,
              //       child: Padding(
              //         padding: const EdgeInsets.only(top: 1.0),
              //         child: Text(
              // psvPlateauValue.toString(),
              // style: TextStyle(
              //     fontSize: 35,
              //     color: psvPlateau
              //         ? Color(0xFF213855)
              //         : Color(0xFFE0E0E0)),
              //         ),
              //       ),
              //     ),
              //     Padding(
              //       padding: const EdgeInsets.only(
              // bottom: 20.0, left: 10, right: 10),
              //       child: Align(
              //         alignment: Alignment.bottomCenter,
              //         child: LinearProgressIndicator(
              // backgroundColor: Colors.grey,
              // valueColor: AlwaysStoppedAnimation<Color>(
              //   psvPlateau
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0),
              // ),
              // value: psvPlateauValue != null
              //     ? psvPlateauValue / 50
              //     : 0,
              //         ),
              //       ),
              //     )
              //   ],
              // )),
              //         ),
              //       ),
              //     ),
              //   ),
              // ),
              // InkWell(
              //   onTap: () {
              //      if (_parameterChangeEnabled == true) {
              //       setState(() {
              //         _parameterChangeEnabled = false;
              //       psvmaxValue = 150;
              //       psvminValue = 1;
              //       psvparameterName = "Flow";
              //       psvparameterUnits = "";
              //       psvItrig = false;
              //       psvPeep = false;
              //       psvIe = false;
              //       psvPs = false;
              //       psvTi = false;
              //       psvPlateau = false;
              //       psvFlow = true;
              //       psvBackupRr = false;
              //       psvFio2 = false;
              //       psvAtime = false;
              //       psvEtrig = false;
              //       psvPc = false;
              //       psvMinTe = false;
              //     });
              //   }
              //   },
              //   child: Center(
              //     child: Container(
              //       width: _isTab10 ? 156 : 146,
              //     height: _isTab10 ? 130 : 130,
              //       child: Card(
              //         elevation: 40,
              //         color: psvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
              //         child: Padding(
              // padding: const EdgeInsets.all(6.0),
              // child: Center(
              //     child: Stack(
              //   children: [
              //     Align(
              //       alignment: Alignment.topLeft,
              //       child: Text(
              //         "Flow",
              //         style: TextStyle(
              //   fontSize: 15,
              //   fontWeight: FontWeight.bold,
              //   color: psvFlow
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.topRight,
              //       child: Text(
              //         "",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: psvFlow
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomRight,
              //       child: Text(
              //         "150",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: psvFlow
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.bottomLeft,
              //       child: Text(
              //         "1",
              //         style: TextStyle(
              //   fontSize: 12,
              //   color: psvFlow
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0)),
              //       ),
              //     ),
              //     Align(
              //       alignment: Alignment.center,
              //       child: Padding(
              //         padding: const EdgeInsets.only(top: 1.0),
              //         child: Text(
              // psvFlowValue.toString(),
              // style: TextStyle(
              //     fontSize: 35,
              //     color: psvFlow
              //         ? Color(0xFF213855)
              //         : Color(0xFFE0E0E0)),
              //         ),
              //       ),
              //     ),
              //     Padding(
              //       padding: const EdgeInsets.only(
              // bottom: 20.0, left: 10, right: 10),
              //       child: Align(
              //         alignment: Alignment.bottomCenter,
              //         child: LinearProgressIndicator(
              // backgroundColor: Colors.grey,
              // valueColor: AlwaysStoppedAnimation<Color>(
              //   psvFlow
              //       ? Color(0xFF213855)
              //       : Color(0xFFE0E0E0),
              // ),
              // value: psvFlowValue != null
              //     ? psvFlowValue / 150
              //     : 0,
              //         ),
              //       ),
              //     )
              //   ],
              // )),
              //         ),
              //       ),
              //     ),
              //   ),
              // ),
            ]),
        SizedBox(width: 60),
        _isTab10
            ? Column(
                children: <Widget>[
                  _isTab10
                      ? Container(
                          margin: EdgeInsets.only(top: 160, bottom: 20),
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Colors.white),
                          height: 140,
                          width: 245,
                          child: Column(
                            children: <Widget>[
                              SizedBox(height: 20),
                              Center(
                                  child: Text("Patient Trigger",
                                      style: TextStyle(
                                          color: Colors.black, fontSize: 20))),
                              Container(
                                  padding: EdgeInsets.only(top: 20),
                                  width: 255,
                                  child: Row(
                                    children: [
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            pItrig = !pItrig;
                                          });
                                        },
                                        child: Card(
                                            color: pItrig
                                                ? Colors.green
                                                : Color(0xFFE0E0E0),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(22.0),
                                              child: Text(
                                                "  Pressure  ",
                                                style: TextStyle(
                                                  color: pItrig
                                                      ? Color(0xFFE0E0E0)
                                                      : Color(0xFF213855),
                                                ),
                                              ),
                                            )),
                                      ),
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            pItrig = !pItrig;
                                          });
                                        },
                                        child: Card(
                                            color: pItrig
                                                ? Color(0xFFE0E0E0)
                                                : Colors.green,
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(22.0),
                                              child: Text(
                                                "      Flow      ",
                                                style: TextStyle(
                                                  color: pItrig
                                                      ? Color(0xFF213855)
                                                      : Color(0xFFE0E0E0),
                                                ),
                                              ),
                                            )),
                                      ),
                                    ],
                                  )),
                            ],
                          ))
                      : Container(),
                  psvPsValue != 0 && pControl == true
                      ? Container()
                      : Container(
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Colors.white),
                          height: 140,
                          width: 245,
                          child: Column(
                            children: <Widget>[
                              SizedBox(height: 20),
                              Center(
                                  child: Text("Backup Apnea Type",
                                      style: TextStyle(
                                          color: Colors.black, fontSize: 16))),
                              SizedBox(height: 20),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  InkWell(
                                    onTap: () {
                                      setState(() {
                                        pControl = !pControl;
                                        psvVtValue = 300;
                                        psvPcValue = psvPsValue;
                                      });
                                    },
                                    child: Card(
                                        color: pControl
                                            ? Colors.green
                                            : Color(0xFFE0E0E0),
                                        child: Padding(
                                          padding: const EdgeInsets.all(22.0),
                                          child: Text(
                                            "Pressure",
                                            style: TextStyle(
                                              color: pControl
                                                  ? Color(0xFFE0E0E0)
                                                  : Color(0xFF213855),
                                            ),
                                          ),
                                        )),
                                  ),
                                  InkWell(
                                    onTap: () {
                                      setState(() {
                                        pControl = !pControl;
                                        psvVtValue = 300;
                                        psvPcValue = psvPsValue;
                                      });
                                    },
                                    child: Card(
                                        color: pControl
                                            ? Color(0xFFE0E0E0)
                                            : Colors.green,
                                        child: Padding(
                                          padding: const EdgeInsets.all(22.0),
                                          child: Text(
                                            "Volume",
                                            style: TextStyle(
                                              color: pControl
                                                  ? Color(0xFF213855)
                                                  : Color(0xFFE0E0E0),
                                            ),
                                          ),
                                        )),
                                  ),
                                ],
                              )
                            ],
                          )),
                ],
              )
            : Container(),
        SizedBox(width: 60),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (psvItrig == true &&
                                        psvItrigValue != psvminValue) {
                                      setState(() {
                                        psvItrigValue = psvItrigValue - 1;
                                      });
                                    } else if (psvPeep == true &&
                                        psvPeepValue != psvminValue) {
                                      setState(() {
                                        psvPeepValue = psvPeepValue - 1;
                                      });
                                    } else if (psvPs == true &&
                                        psvPsValue >= 0 &&
                                        psvPsValue != psvminValue) {
                                      setState(() {
                                        psvPsValue = psvPsValue - 1;
                                        // if (psvPsValue != 0) {
                                        // if (psvPsValue <= 5) {
                                        //   psvPcValue = 5;
                                        // } else {
                                        psvPcValue = psvPsValue;
                                        // }
                                        // }
                                      });
                                    } else if (psvIe == true &&
                                        psvIeValue != psvminValue) {
                                      setState(() {
                                        psvIeValue = psvIeValue - 1;
                                      });
                                    } else if (psvTi == true &&
                                        psvTiValue != psvminValue) {
                                      setState(() {
                                        psvTiValue = psvTiValue - 1;
                                      });
                                    } else if (psvPlateau == true &&
                                        psvPlateauValue != psvminValue) {
                                      setState(() {
                                        psvPlateauValue = psvPlateauValue - 1;
                                        //  if (psvPlateauValue >= psvFlowValue) {
                                        //    psvFlowValue = psvFlowValue - 1;
                                        //  }
                                      });
                                    } else if (psvFlow == true &&
                                        psvFlowValue != psvminValue) {
                                      psvFlowValue = psvFlowValue - 1;
                                    } else if (psvFio2 == true &&
                                        psvFio2Value != psvminValue) {
                                      setState(() {
                                        psvFio2Value = psvFio2Value - 1;
                                      });
                                    } else if (psvVt == true &&
                                        psvVtValue != psvminValue) {
                                      setState(() {
                                        psvVtValue = psvVtValue - 1;
                                      });
                                    } else if (psvPc == true &&
                                        psvPcValue != psvminValue) {
                                      setState(() {
                                        psvPcValue = psvPcValue - 1;
                                      });
                                    } else if (psvAtime == true &&
                                        psvAtimeValue != psvminValue) {
                                      setState(() {
                                        psvAtimeValue = psvAtimeValue - 1;
                                      });
                                    } else if (psvEtrig == true &&
                                        psvEtrigValue != psvminValue) {
                                      setState(() {
                                        psvEtrigValue = psvEtrigValue - 1;
                                      });
                                    } else if (psvBackupRr == true &&
                                        psvBackupRrValue != psvminValue) {
                                      setState(() {
                                        psvBackupRrValue = psvBackupRrValue - 1;
                                      });
                                    } else if (psvMinTe == true &&
                                        psvMinTeValue != psvminValue) {
                                      setState(() {
                                        psvMinTeValue = psvMinTeValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 40,
                              ),
                              Text(
                                psvparameterName,
                                style: TextStyle(
                                    fontSize: 25,
                                    fontWeight: FontWeight.normal),
                              ),
                              SizedBox(
                                width: 40,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  int maxPeep = _isTab10 ? 45 : 30;
                                  int maxValue = _isTab10 ? 85 : 65;
                                  int maxValuepcValue, maxValuepeepValue;
                                  setState(() {
                                    maxValuepcValue = maxValue - psvPeepValue;
                                    if ((maxValue - psvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue = maxValue - psvPcValue;
                                    }
                                    if (psvItrig == true &&
                                        psvItrigValue != psvmaxValue) {
                                      setState(() {
                                        psvItrigValue = psvItrigValue + 1;
                                      });
                                    } else if (psvPeep == true &&
                                        psvPeepValue != psvmaxValue &&
                                        psvPeepValue < maxValuepeepValue) {
                                      setState(() {
                                        psvPeepValue = psvPeepValue + 1;
                                      });
                                    } else if (psvPs == true &&
                                        psvPsValue >= 0 &&
                                        psvPsValue != psvmaxValue) {
                                      setState(() {
                                        psvPsValue = psvPsValue + 1;
                                        // if (psvPsValue != 0) {
                                        // if (psvPsValue <= 5) {
                                        //   psvPcValue = 5;
                                        // } else {
                                        psvPcValue = psvPsValue;
                                        // }
                                        // }
                                      });
                                    } else if (psvIe == true &&
                                        psvIeValue != psvmaxValue) {
                                      setState(() {
                                        psvIeValue = psvIeValue + 1;
                                      });
                                    } else if (psvVt == true &&
                                        psvVtValue != psvmaxValue) {
                                      setState(() {
                                        psvVtValue = psvVtValue + 1;
                                      });
                                    } else if (psvTi == true &&
                                        psvTiValue != psvmaxValue) {
                                      setState(() {
                                        psvTiValue = psvTiValue + 1;
                                      });
                                    } else if (psvPlateau == true &&
                                        psvPlateauValue != psvmaxValue) {
                                      setState(() {
                                        // if (psvFlowValue != 1190 &&
                                        //     psvPlateauValue != 1189) {
                                        psvPlateauValue = psvPlateauValue + 1;
                                        // psvFlowValue = psvPlateauValue + 1;
                                        // }
                                      });
                                    } else if (psvFlow == true &&
                                        psvFlowValue != psvmaxValue) {
                                      setState(() {
                                        psvFlowValue = psvFlowValue + 1;
                                      });
                                    } else if (psvFio2 == true &&
                                        psvFio2Value != psvmaxValue) {
                                      setState(() {
                                        psvFio2Value = psvFio2Value + 1;
                                      });
                                    } else if (psvPc == true &&
                                        psvPcValue != psvmaxValue) {
                                      setState(() {
                                        psvPcValue = psvPcValue + 1;
                                      });
                                    } else if (psvAtime == true &&
                                        psvAtimeValue != psvmaxValue) {
                                      setState(() {
                                        psvAtimeValue = psvAtimeValue + 1;
                                      });
                                    } else if (psvEtrig == true &&
                                        psvEtrigValue != psvmaxValue) {
                                      setState(() {
                                        psvEtrigValue = psvEtrigValue + 1;
                                      });
                                    } else if (psvBackupRr == true &&
                                        psvBackupRrValue != psvmaxValue) {
                                      setState(() {
                                        psvBackupRrValue = psvBackupRrValue + 1;
                                      });
                                    } else if (psvMinTe == true &&
                                        psvMinTeValue != psvmaxValue) {
                                      setState(() {
                                        psvMinTeValue = psvMinTeValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  psvItrig
                                      ? pItrig
                                          ? "-$psvItrigValue"
                                          : "$psvItrigValue"
                                      : psvPeep
                                          ? psvPeepValue.toInt().toString()
                                          : psvPs
                                              ? psvPsValue.toInt().toString()
                                              : psvIe
                                                  // ? psvIeValue.toInt().toString()
                                                  ? getIeData(psvIeValue, 1)
                                                  : psvTi
                                                      ? getTiValue(psvTiValue)
                                                          .toString()
                                                      : psvPlateau
                                                          ? psvPlateauValue
                                                              .toInt()
                                                              .toString()
                                                          : psvFlow
                                                              ? psvFlowValue
                                                                  .toInt()
                                                                  .toString()
                                                              : psvFio2
                                                                  ? psvFio2Value
                                                                      .toInt()
                                                                      .toString()
                                                                  : psvPc
                                                                      ? psvPcValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : psvAtime
                                                                          ? psvAtimeValue
                                                                              .toInt()
                                                                              .toString()
                                                                          : psvEtrig
                                                                              ? psvEtrigValue.toInt().toString()
                                                                              : psvBackupRr ? psvBackupRrValue.toInt().toString() : psvMinTe ? psvMinTeValue.toInt().toString() : psvVt ? psvVtValue.toInt().toString() : "",
                                  style: TextStyle(
                                      fontSize: 40,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 2,
                          ),
                          Container(
                              width: 350,
                              child: Slider(
                                min: psvminValue.toDouble(),
                                max: psvmaxValue.toDouble(),
                                onChanged: (double value) {
                                  int maxPeep = _isTab10 ? 45 : 30;
                                  int maxValue = _isTab10 ? 85 : 65;
                                  int maxValuepcValue, maxValuepeepValue;
                                  setState(() {
                                    maxValuepcValue = maxValue - psvPeepValue;
                                    if ((maxValue - psvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue = maxValue - psvPcValue;
                                    }
                                  });
                                  if (psvItrig == true) {
                                    setState(() {
                                      psvItrigValue = value.toInt();
                                    });
                                  } else if (psvVt == true) {
                                    setState(() {
                                      psvVtValue = value.toInt();
                                    });
                                  } else if (psvPeep == true) {
                                    setState(() {
                                      if (value.toInt() >= maxValuepeepValue) {
                                        psvPeepValue = maxValuepeepValue;
                                      } else {
                                        psvPeepValue = value.toInt();
                                      }
                                    });
                                  } else if (psvPs == true &&
                                      psvPsValue >= 0 &&
                                      pControl == true) {
                                    setState(() {
                                      psvPsValue = value.toInt();
                                      // if (psvPsValue != 0) {
                                      // if (psvPsValue <= 5) {
                                      //   psvPcValue = 5;
                                      // } else {
                                      psvPcValue = psvPsValue;
                                      // }
                                      // }
                                    });
                                  } else if (psvPs == true &&
                                      pControl == false) {
                                    setState(() {
                                      psvPsValue = value.toInt();
                                    });
                                  } else if (psvIe == true) {
                                    setState(() {
                                      psvIeValue = value.toInt();
                                    });
                                  } else if (psvTi == true) {
                                    setState(() {
                                      psvTiValue = value.toInt();
                                    });
                                  } else if (psvPlateau == true) {
                                    // if (value.toInt() < 1190) {
                                    psvPlateauValue = value.toInt();
                                    // psvFlowValue = psvPlateauValue + 1;
                                    // }
                                  } else if (psvFlow == true) {
                                    setState(() {
                                      // if (value.toInt() <= psvPlateauValue + 1) {
                                      // psvFlowValue = psvPlateauValue + 1;
                                      // } else {
                                      psvFlowValue = value.toInt();
                                      // }
                                    });
                                  } else if (psvFio2 == true) {
                                    setState(() {
                                      psvFio2Value = value.toInt();
                                    });
                                  } else if (psvPc == true) {
                                    setState(() {
                                      // if (value.toInt() < psvPsValue) {
                                      // if (value.toInt() >= maxValuepcValue) {
                                      //   psvPcValue = maxValuepcValue;
                                      // } else {
                                      psvPcValue = value.toInt();
                                      // }
                                      //   psvPsValue = psvPcValue;
                                      // } else {
                                      //   if (value.toInt() >= maxValuepcValue) {
                                      //     psvPcValue = maxValuepcValue;
                                      //   } else {
                                      //     psvPcValue = value.toInt();
                                      //   }
                                      // }
                                      // if(value.toInt())
                                    });
                                  } else if (psvEtrig == true) {
                                    setState(() {
                                      psvEtrigValue = value.toInt();
                                    });
                                  } else if (psvAtime == true) {
                                    setState(() {
                                      psvAtimeValue = value.toInt();
                                    });
                                  } else if (psvBackupRr == true) {
                                    setState(() {
                                      psvBackupRrValue = value.toInt();
                                    });
                                  } else if (psvMinTe == true) {
                                    setState(() {
                                      psvMinTeValue = value.toInt();
                                    });
                                  }
                                },
                                value: psvItrig
                                    ? psvItrigValue.toDouble()
                                    : psvPeep
                                        ? psvPeepValue.toDouble()
                                        : psvPs
                                            ? psvPsValue.toDouble()
                                            : psvIe
                                                ? psvIeValue.toDouble()
                                                : psvTi
                                                    ? psvTiValue.toDouble()
                                                    : psvPlateau
                                                        ? psvPlateauValue
                                                            .toDouble()
                                                        : psvFlow
                                                            ? psvFlowValue
                                                                .toDouble()
                                                            : psvFio2
                                                                ? psvFio2Value
                                                                    .toDouble()
                                                                : psvPc
                                                                    ? psvPcValue
                                                                        .toDouble()
                                                                    : psvEtrig
                                                                        ? psvEtrigValue
                                                                            .toDouble()
                                                                        : psvAtime
                                                                            ? psvAtimeValue
                                                                                .toDouble()
                                                                            : psvBackupRr
                                                                                ? psvBackupRrValue.toDouble()
                                                                                : psvMinTe ? psvMinTeValue.toDouble() : psvVt ? psvVtValue.toDouble() : "",
                              )),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(psvIe
                                    ? getIeData(psvminValue, 1)
                                    : psvItrig
                                        ? pItrig
                                            ? "-$psvminValue"
                                            : "$psvminValue"
                                        : psvTi
                                            ? getTiValue(psvminValue).toString()
                                            : psvminValue.toString()),
                                Text(
                                  psvItrig
                                      ? pItrig ? psvparameterUnits : "lpm"
                                      : psvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(psvIe
                                    ? getIeData(psvmaxValue, 1)
                                    : psvItrig
                                        ? pItrig
                                            ? "-$psvmaxValue"
                                            : "$psvmaxValue"
                                        : psvTi
                                            ? getTiValue(psvmaxValue).toString()
                                            : psvmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  pacvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pacvmaxValue = 60;
                    pacvminValue = 1;
                    pacvparameterName = "RR";
                    pacvparameterUnits = "bpm";
                    pacvItrig = false;
                    pacvRr = true;
                    pacvIe = false;
                    pacvPeep = false;
                    pacvPc = false;
                    pacvPplateau = false;
                    pacvFlow = false;
                    pacvFio2 = false;
                    pacvFlowRamp = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pacvRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pacvRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pacvRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value:
                                    pacvRrValue != null ? pacvRrValue / 60 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pacvmaxValue = 61;
                    pacvminValue = 1;
                    pacvparameterName = "I:E";
                    pacvparameterUnits = "";
                    pacvItrig = false;
                    pacvRr = false;
                    pacvIe = true;
                    pacvPeep = false;
                    pacvPc = false;
                    pacvPplateau = false;
                    pacvFlow = false;
                    pacvFio2 = false;
                    pacvFlowRamp = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pacvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                getIeData(pacvIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pacvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value:
                                    pacvIeValue != null ? pacvIeValue / 61 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pacvmaxValue = _isTab10 ? 45 : 30;
                    pacvminValue = 0;
                    pacvparameterName = "PEEP";
                    pacvparameterUnits = "cmH\u2082O";
                    pacvItrig = false;
                    pacvRr = false;
                    pacvIe = false;
                    pacvPeep = true;
                    pacvPc = false;
                    pacvPplateau = false;
                    pacvFlow = false;
                    pacvFio2 = false;
                    pacvFlowRamp = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pacvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pacvPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pacvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pacvPeepValue != null
                                    ? _isTab10
                                        ? pacvPeepValue / 45
                                        : pacvPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pacvmaxValue = 10;
                    pacvminValue = 1;
                    pacvparameterName = "I Trig";
                    pacvparameterUnits = "cmH\u2082O Below PEEP";
                    pacvItrig = true;
                    pacvRr = false;
                    pacvIe = false;
                    pacvPeep = false;
                    pacvPc = false;
                    pacvPplateau = false;
                    pacvFlow = false;
                    pacvFio2 = false;
                    pacvFlowRamp = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pacvItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig ? "-$pacvItrigValue" : "$pacvItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pacvItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pacvItrigValue != null
                                    ? pacvItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pacvmaxValue = _isTab10 ? 85 : 60;
                    pacvminValue = 5;
                    pacvparameterName = "PC";
                    pacvparameterUnits = "cmH\u2082O above PEEP";
                    pacvItrig = false;
                    pacvRr = false;
                    pacvIe = false;
                    pacvPeep = false;
                    pacvPc = true;
                    pacvPplateau = false;
                    pacvFlow = false;
                    pacvFio2 = false;
                    pacvFlowRamp = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pacvPc ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pacvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "85" : "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "5",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pacvPcValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pacvPc
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pacvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pacvPcValue != null
                                    ? _isTab10
                                        ? pacvPcValue / 80
                                        : pacvPcValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pacvmaxValue = 100;
                    pacvminValue = 21;
                    pacvparameterName = "FiO\u2082";
                    pacvparameterUnits = "%";
                    pacvItrig = false;
                    pacvRr = false;
                    pacvIe = false;
                    pacvPeep = false;
                    pacvPc = false;
                    pacvPplateau = false;
                    pacvFlow = false;
                    pacvFio2 = true;
                    pacvFlowRamp = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pacvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pacvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pacvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pacvFio2Value != null
                                    ? pacvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            // InkWell(
            //   onTap: () {
            //     if (_parameterChangeEnabled == true) {
            //       setState(() {
            //         _parameterChangeEnabled = false;
            //       pacvmaxValue = 50;
            //       pacvminValue = 0;
            //       pacvparameterName = "Plateau";
            //       pacvparameterUnits = "L/m";
            //       pacvItrig = false;
            //       pacvRr = false;
            //       pacvIe = false;
            //       pacvPeep = false;
            //       pacvPc = false;
            //       pacvPplateau = true;
            //       pacvFlow = false;
            //       pacvFio2 = false;
            //       pacvFlowRamp = false;
            //     });
            //   }
            //   },
            //   child: Center(
            //     child: Container(
            //        width: _isTab10 ? 156 : 146,
            //       height: _isTab10 ? 130 : 130,
            //       child: Card(
            //         elevation: 40,
            //         color: pacvPplateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            // padding: const EdgeInsets.all(6.0),
            // child: Center(
            //     child: Stack(
            //   children: [
            //     Align(
            //       alignment: Alignment.topLeft,
            //       child: Text(
            //         "Plateau",
            //         style: TextStyle(
            //   fontSize: 15,
            //   fontWeight: FontWeight.bold,
            //   color: pacvPplateau
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.topRight,
            //       child: Text(
            //         "L/m",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: pacvPplateau
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.bottomRight,
            //       child: Text(
            //         "50",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: pacvPplateau
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.bottomLeft,
            //       child: Text(
            //         "0",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: pacvPplateau
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.center,
            //       child: Padding(
            //         padding: const EdgeInsets.only(top: 1.0),
            //         child: Text(
            // pacvPplateauValue.toString(),
            // style: TextStyle(
            //     fontSize: 35,
            //     color: pacvPplateau
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //     ),
            //     Padding(
            //       padding: const EdgeInsets.only(
            // bottom: 20.0, left: 10, right: 10),
            //       child: Align(
            //         alignment: Alignment.bottomCenter,
            //         child: LinearProgressIndicator(
            // backgroundColor: Colors.grey,
            // valueColor: AlwaysStoppedAnimation<Color>(
            //   pacvPplateau
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0),
            // ),
            // value: pacvPplateauValue != null
            //     ? pacvPplateauValue / 50
            //     : 0,
            //         ),
            //       ),
            //     )
            //   ],
            // )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
            // InkWell(
            //   onTap: () {
            //     if (_parameterChangeEnabled == true) {
            //       setState(() {
            //         _parameterChangeEnabled = false;
            //       pacvmaxValue = 150;
            //       pacvminValue = 1;
            //       pacvparameterName = "Flow";
            //       pacvparameterUnits = "%";
            //       pacvItrig = false;
            //       pacvRr = false;
            //       pacvIe = false;
            //       pacvPeep = false;
            //       pacvPc = false;
            //       pacvPplateau = false;
            //       pacvFlow = true;
            //       pacvFio2 = false;
            //       pacvFlowRamp = false;
            //     });
            //   }
            //   },
            //   child: Center(
            //     child: Container(
            //         width: _isTab10 ? 156 : 146,
            //       height: _isTab10 ? 130 : 130,
            //       child: Card(
            //         elevation: 40,
            //         color: pacvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            // padding: const EdgeInsets.all(6.0),
            // child: Center(
            //     child: Stack(
            //   children: [
            //     Align(
            //       alignment: Alignment.topLeft,
            //       child: Text(
            //         "Flow",
            //         style: TextStyle(
            //   fontSize: 15,
            //   fontWeight: FontWeight.bold,
            //   color: pacvFlow
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.topRight,
            //       child: Text(
            //         "%",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: pacvFlow
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.bottomRight,
            //       child: Text(
            //         "150",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: pacvFlow
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.bottomLeft,
            //       child: Text(
            //         "1",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: pacvFlow
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.center,
            //       child: Padding(
            //         padding: const EdgeInsets.only(top: 1.0),
            //         child: Text(
            // pacvFlowValue.toString(),
            // style: TextStyle(
            //     fontSize: 35,
            //     color: pacvFlow
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //     ),
            //     Padding(
            //       padding: const EdgeInsets.only(
            // bottom: 20.0, left: 10, right: 10),
            //       child: Align(
            //         alignment: Alignment.bottomCenter,
            //         child: LinearProgressIndicator(
            // backgroundColor: Colors.grey,
            // valueColor: AlwaysStoppedAnimation<Color>(
            //   pacvFlow
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0),
            // ),
            // value: pacvFlowValue != null
            //     ? pacvFlowValue / 150
            //     : 0,
            //         ),
            //       ),
            //     )
            //   ],
            // )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
          ],
        ),
        SizedBox(width: 140),
        Column(
          children: <Widget>[
            _isTab10
                ? Container(
                    margin: EdgeInsets.only(top: 160, bottom: 20),
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.white),
                    height: 140,
                    width: 245,
                    child: Column(
                      children: <Widget>[
                        SizedBox(height: 20),
                        Center(
                            child: Text("Patient Trigger",
                                style: TextStyle(
                                    color: Colors.black, fontSize: 20))),
                        Container(
                            padding: EdgeInsets.only(top: 20),
                            width: 255,
                            child: Row(
                              children: [
                                InkWell(
                                  onTap: () {
                                    setState(() {
                                      pItrig = !pItrig;
                                    });
                                  },
                                  child: Card(
                                      color: pItrig
                                          ? Colors.green
                                          : Color(0xFFE0E0E0),
                                      child: Padding(
                                        padding: const EdgeInsets.all(22.0),
                                        child: Text(
                                          "  Pressure  ",
                                          style: TextStyle(
                                            color: pItrig
                                                ? Color(0xFFE0E0E0)
                                                : Color(0xFF213855),
                                          ),
                                        ),
                                      )),
                                ),
                                InkWell(
                                  onTap: () {
                                    setState(() {
                                      pItrig = !pItrig;
                                    });
                                  },
                                  child: Card(
                                      color: pItrig
                                          ? Color(0xFFE0E0E0)
                                          : Colors.green,
                                      child: Padding(
                                        padding: const EdgeInsets.all(22.0),
                                        child: Text(
                                          "      Flow      ",
                                          style: TextStyle(
                                            color: pItrig
                                                ? Color(0xFF213855)
                                                : Color(0xFFE0E0E0),
                                          ),
                                        ),
                                      )),
                                ),
                              ],
                            )),
                      ],
                    ))
                : Container(),
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Assist",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        InkWell(
                          onTap: () {
                            if (_modeChangeEnabled == true) {
                              setState(() {
                                _modeChangeEnabled = false;
                                assistmodePressureOn = !assistmodePressureOn;
                                if (assistmodePressureOn == true) {
                                  pacvEnabled = true;
                                  pccmvEnabled = false;
                                } else {
                                  pccmvEnabled = true;
                                  pacvEnabled = false;
                                }
                              });
                            }
                          },
                          child: Card(
                              color: assistmodePressureOn
                                  ? Color(0xFFE0E0E0)
                                  : Color(0xFF213855),
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "Off",
                                  style: TextStyle(
                                    color: assistmodePressureOn
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                ),
                              )),
                        ),
                        SizedBox(height: 10),
                        InkWell(
                          onTap: () {
                            if (_modeChangeEnabled == true) {
                              setState(() {
                                _modeChangeEnabled = false;
                                assistmodePressureOn = !assistmodePressureOn;
                                if (assistmodePressureOn == true) {
                                  pacvEnabled = true;
                                  pccmvEnabled = false;
                                } else {
                                  pccmvEnabled = true;
                                  pacvEnabled = false;
                                }
                              });
                            }
                          },
                          child: Card(
                              color: assistmodePressureOn
                                  ? Colors.green
                                  : Color(0xFFE0E0E0),
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "On",
                                  style: TextStyle(
                                    color: assistmodePressureOn
                                        ? Color(0xFFE0E0E0)
                                        : Color(0xFF213855),
                                  ),
                                ),
                              )),
                        ),
                      ],
                    ),
                  ],
                )),
          ],
        ),
        SizedBox(width: 140),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (pacvItrig == true &&
                                        pacvItrigValue != pacvminValue) {
                                      setState(() {
                                        pacvItrigValue = pacvItrigValue - 1;
                                      });
                                    }
                                    // else if (pacvPeep == true &&
                                    //     pacvPeepValue != pacvminValue) {
                                    //   setState(() {
                                    //     pacvPeepValue = pacvPeepValue - 1;
                                    //     if (pacvItrigValue > 1 &&
                                    //         pacvItrigValue > pacvPeepValue) {
                                    //       pacvItrigValue = pacvPeepValue;
                                    //     }
                                    //   });
                                    // }

                                    else if (pacvPeep == true &&
                                        pacvPeepValue != pacvminValue) {
                                      setState(() {
                                        pacvPeepValue = pacvPeepValue - 1;
                                      });
                                    } else if (pacvRr == true &&
                                        pacvRrValue != pacvminValue) {
                                      setState(() {
                                        pacvRrValue = pacvRrValue - 1;
                                      });
                                    } else if (pacvIe == true &&
                                        pacvIeValue != pacvminValue) {
                                      setState(() {
                                        pacvIeValue = pacvIeValue - 1;
                                      });
                                    } else if (pacvPc == true &&
                                        pacvPcValue != pacvminValue) {
                                      setState(() {
                                        pacvPcValue = pacvPcValue - 1;
                                      });
                                    } else if (pacvPplateau == true &&
                                        pacvPplateauValue != pacvminValue) {
                                      setState(() {
                                        pacvPplateauValue =
                                            pacvPplateauValue - 1;
                                      });
                                    } else if (pacvFlow == true &&
                                        pacvFlowValue != pacvminValue) {
                                      pacvFlowValue = pacvFlowValue - 1;
                                    } else if (pacvFio2 == true &&
                                        pacvFio2Value != pacvminValue) {
                                      setState(() {
                                        pacvFio2Value = pacvFio2Value - 1;
                                      });
                                    } else if (pacvFlowRamp == true &&
                                        pacvFlowRampValue != pacvminValue) {
                                      setState(() {
                                        pacvFlowRampValue =
                                            pacvFlowRampValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                pacvparameterName,
                                style: TextStyle(
                                    fontSize: 36,
                                    fontWeight: FontWeight.normal),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    // if (pacvItrig == true &&
                                    //     pacvItrigValue != pacvmaxValue) {
                                    //   setState(() {
                                    //     pacvItrigValue = pacvItrigValue + 1;
                                    //     if (pacvPeepValue <= pacvItrigValue) {
                                    //       if (pacvPeepValue == 0) {
                                    //         pacvItrigValue = 1;
                                    //       } else {
                                    //         pacvItrigValue = pacvPeepValue;
                                    //       }
                                    //     }
                                    //   });
                                    // }
                                    int maxValue = _isTab10 ? 90 : 65;
                                    int maxPeep = _isTab10 ? 45 : 30;
                                    int maxValuepcValue, maxValuepeepValue;
                                    maxValuepcValue = maxValue - pacvPeepValue;
                                    if ((maxValue - pacvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue =
                                          maxValue - pacvPcValue;
                                    }
                                    if (pacvItrig == true &&
                                        pacvItrigValue != pacvmaxValue) {
                                      setState(() {
                                        pacvItrigValue = pacvItrigValue + 1;
                                      });
                                    } else if (pacvPeep == true &&
                                        pacvPeepValue != pacvmaxValue &&
                                        pacvPeepValue < maxValuepeepValue) {
                                      setState(() {
                                        pacvPeepValue = pacvPeepValue + 1;
                                        // if (pacvPcValue <= pacvPeepValue) {
                                        //   pacvPcValue = pacvPeepValue + 1;
                                        // }
                                      });
                                    } else if (pacvRr == true &&
                                        pacvRrValue != pacvmaxValue) {
                                      setState(() {
                                        pacvRrValue = pacvRrValue + 1;
                                      });
                                    } else if (pacvIe == true &&
                                        pacvIeValue != pacvmaxValue) {
                                      setState(() {
                                        pacvIeValue = pacvIeValue + 1;
                                      });
                                    } else if (pacvPc == true &&
                                        pacvPcValue != pacvmaxValue &&
                                        pacvPcValue < maxValuepcValue) {
                                      setState(() {
                                        pacvPcValue = pacvPcValue + 1;
                                      });
                                    } else if (pacvPplateau == true &&
                                        pacvPplateauValue != pacvmaxValue) {
                                      setState(() {
                                        // if (pacvFlowValue != 1190 &&
                                        //     pacvPplateauValue != 1189) {
                                        pacvPplateauValue =
                                            pacvPplateauValue + 1;
                                        // pacvFlowValue = pacvPplateauValue + 1;
                                        // }
                                      });
                                    } else if (pacvFlow == true &&
                                        pacvFlowValue != pacvmaxValue) {
                                      setState(() {
                                        // if (pacvPplateauValue < pacvFlowValue)
                                        pacvFlowValue = pacvFlowValue + 1;
                                      });
                                    } else if (pacvFio2 == true &&
                                        pacvFio2Value != pacvmaxValue) {
                                      setState(() {
                                        pacvFio2Value = pacvFio2Value + 1;
                                      });
                                    } else if (pacvFlowRamp == true &&
                                        pacvFlowRampValue != pacvmaxValue) {
                                      setState(() {
                                        pacvFlowRampValue =
                                            pacvFlowRampValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  pacvItrig
                                      ? pItrig
                                          ? "-$pacvItrigValue"
                                          : "$pacvItrigValue"
                                      : pacvPeep
                                          ? pacvPeepValue.toInt().toString()
                                          : pacvRr
                                              ? pacvRrValue.toInt().toString()
                                              : pacvIe
                                                  ? getIeData(pacvIeValue, 1)
                                                  : pacvPc
                                                      ? pacvPcValue
                                                          .toInt()
                                                          .toString()
                                                      : pacvPplateau
                                                          ? pacvPplateauValue
                                                              .toInt()
                                                              .toString()
                                                          : pacvFlow
                                                              ? pacvFlowValue
                                                                  .toInt()
                                                                  .toString()
                                                              : pacvFio2
                                                                  ? pacvFio2Value
                                                                      .toInt()
                                                                      .toString()
                                                                  : pacvFlowRamp
                                                                      ? pacvFlowRampValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : "",
                                  style: TextStyle(
                                      fontSize: 40,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          // pacvFio2
                          //     ? Container()
                          //     :
                          Container(
                              width: 350,
                              child: Slider(
                                min: pacvminValue.toDouble() ?? 0,
                                max: pacvmaxValue.toDouble() ?? 0,
                                onChanged: (double value) {
                                  int maxPeep = _isTab10 ? 45 : 30;
                                  int maxPValue = _isTab10 ? 90 : 65;
                                  int maxValuepcValue, maxValuepeepValue;
                                  setState(() {
                                    maxValuepcValue = maxPValue - pacvPeepValue;
                                    if ((maxPValue - pacvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue =
                                          maxPValue - pacvPcValue;
                                    }
                                  });
                                  if (pacvItrig == true) {
                                    setState(() {
                                      pacvItrigValue = value.toInt();
                                    });
                                  } else if (pacvPeep == true) {
                                    if (value.toInt() >= maxValuepeepValue) {
                                      pacvPeepValue = maxValuepeepValue;
                                    } else {
                                      pacvPeepValue = value.toInt();
                                    }
                                  } else if (pacvRr == true) {
                                    setState(() {
                                      pacvRrValue = value.toInt();
                                    });
                                  } else if (pacvIe == true) {
                                    setState(() {
                                      pacvIeValue = value.toInt();
                                    });
                                  } else if (pacvPc == true) {
                                    setState(() {
                                      if (value.toInt() >= maxValuepcValue) {
                                        pacvPcValue = maxValuepcValue;
                                      } else {
                                        pacvPcValue = value.toInt();
                                      }
                                    });
                                  } else if (pacvPplateau == true) {
                                    // if (value.toInt() < 1190) {
                                    pacvPplateauValue = value.toInt();
                                    // }
                                  } else if (pacvFlow == true) {
                                    setState(() {
                                      if (value.toInt() <=
                                          pacvPplateauValue + 1) {
                                        pacvFlowValue = pacvPplateauValue + 1;
                                      } else {
                                        pacvFlowValue = value.toInt();
                                      }
                                    });
                                  } else if (pacvFio2 == true) {
                                    setState(() {
                                      pacvFio2Value = value.toInt();
                                    });
                                  } else if (pacvFlowRamp == true) {
                                    setState(() {
                                      pacvFlowRampValue = value.toInt();
                                    });
                                  }
                                },
                                value: pacvItrig
                                    ? pacvItrigValue.toDouble()
                                    : pacvPeep
                                        ? pacvPeepValue.toDouble()
                                        : pacvRr
                                            ? pacvRrValue.toDouble()
                                            : pacvIe
                                                ? pacvIeValue.toDouble()
                                                : pacvPc
                                                    ? pacvPcValue.toDouble()
                                                    : pacvPplateau
                                                        ? pacvPplateauValue
                                                            .toDouble()
                                                        : pacvFlow
                                                            ? pacvFlowValue
                                                                .toDouble()
                                                            : pacvFio2
                                                                ? pacvFio2Value
                                                                    .toDouble()
                                                                : pacvFlowRamp
                                                                    ? pacvFlowRampValue
                                                                        .toDouble()
                                                                    : "",
                              )),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(pacvIe
                                    ? getIeData(pacvminValue, 1)
                                    : pacvItrig
                                        ? pItrig
                                            ? "-$pacvminValue"
                                            : "$pacvminValue"
                                        : pacvminValue.toString()),
                                Text(
                                  pacvItrig
                                      ? pItrig ? pacvparameterUnits : "lpm"
                                      : pacvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(pacvIe
                                    ? getIeData(pacvmaxValue, 1)
                                    : pacvItrig
                                        ? pItrig
                                            ? "-$pacvmaxValue"
                                            : "$pacvmaxValue"
                                        : pacvmaxValue.toString()),
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  prvcData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = 30;
                    prvcminValue = 1;
                    prvcparameterName = "RR";
                    prvcparameterUnits = "bpm";
                    prvcItrig = false;
                    prvcRr = true;
                    prvcIe = false;
                    prvcPeep = false;
                    prvcVt = false;
                    prvcPlateau = false;
                    prvcPcMax = false;
                    prvcFio2 = false;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                prvcRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value:
                                    prvcRrValue != null ? prvcRrValue / 30 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = 61;
                    prvcminValue = 1;
                    prvcparameterName = "I:E";
                    prvcparameterUnits = "";
                    prvcItrig = false;
                    prvcRr = false;
                    prvcIe = true;
                    prvcPeep = false;
                    prvcVt = false;
                    prvcPlateau = false;
                    prvcPcMax = false;
                    prvcFio2 = false;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                // prvcIeValue,
                                getIeData(prvcIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value:
                                    prvcIeValue != null ? prvcIeValue / 61 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = _isTab10 ? 45 : 30;
                    prvcminValue = 0;
                    prvcparameterName = "PEEP";
                    prvcparameterUnits = "cmH\u2082O";
                    prvcItrig = false;
                    prvcRr = false;
                    prvcIe = false;
                    prvcPeep = true;
                    prvcVt = false;
                    prvcPlateau = false;
                    prvcPcMax = false;
                    prvcFio2 = false;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                prvcPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: prvcPeepValue != null
                                    ? _isTab10
                                        ? prvcPeepValue / 45
                                        : prvcPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = 1200;
                    prvcminValue = 200;
                    prvcparameterName = "Target Vt";
                    prvcparameterUnits = "mL";
                    prvcItrig = false;
                    prvcRr = false;
                    prvcIe = false;
                    prvcPeep = false;
                    prvcVt = true;
                    prvcPlateau = false;
                    prvcPcMax = false;
                    prvcFio2 = false;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcVt ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Target Vt",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "mL",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1200",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "200",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                prvcVtValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcVt
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: prvcVtValue != null
                                    ? prvcVtValue / 1200
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = 100;
                    prvcminValue = 21;
                    prvcparameterName = "FiO\u2082";
                    prvcparameterUnits = "%";
                    prvcItrig = false;
                    prvcRr = false;
                    prvcIe = false;
                    prvcPeep = false;
                    prvcVt = false;
                    prvcPlateau = false;
                    prvcPcMax = false;
                    prvcFio2 = true;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                prvcFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: prvcFio2Value != null
                                    ? prvcFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = 10;
                    prvcminValue = 1;
                    prvcparameterName = "I Trig";
                    prvcparameterUnits = "cmH\u2082O Below PEEP";
                    prvcItrig = true;
                    prvcRr = false;
                    prvcIe = false;
                    prvcPeep = false;
                    prvcVt = false;
                    prvcPlateau = false;
                    prvcPcMax = false;
                    prvcFio2 = false;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig ? "-$prvcItrigValue" : "$prvcItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: prvcItrigValue != null
                                    ? prvcItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    prvcmaxValue = 100;
                    prvcminValue = 10;
                    prvcparameterName = "PC Max";
                    prvcparameterUnits = "cmH\u2082O above PEEP";
                    prvcItrig = false;
                    prvcRr = false;
                    prvcIe = false;
                    prvcPeep = false;
                    prvcVt = false;
                    prvcPlateau = false;
                    prvcPcMax = true;
                    prvcFio2 = false;
                    prvcFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: prvcPcMax ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC Max",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: prvcPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: prvcPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                prvcPcMaxValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: prvcPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  prvcPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: prvcPcMaxValue != null
                                    ? prvcPcMaxValue / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            //      InkWell(
            //       onTap: () {
            //         setState(() {
            //           prvcmaxValue = 50;
            //           prvcminValue = 0;
            //           prvcparameterName = "Plateau";
            //           prvcparameterUnits = "";
            //           prvcItrig = false;
            //           prvcRr = false;
            //           prvcIe = false;
            //           prvcPeep = false;
            //           prvcVt = false;
            //           prvcPlateau = true;
            //           prvcPcMax = false;
            //           prvcFio2 = false;
            //           prvcFlow = false;
            //         });
            //       },
            //       child: Center(
            //         child: Container(
            //            width: _isTab10 ? 156 : 146,
            //           height: _isTab10 ? 130 : 130,
            //           child: Card(
            //             elevation: 40,
            //             color: prvcPlateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //             child: Padding(
            //     padding: const EdgeInsets.all(6.0),
            //     child: Center(
            //         child: Stack(
            //       children: [
            //         Align(
            //           alignment: Alignment.topLeft,
            //           child: Text(
            //             "Plateau",
            //             style: TextStyle(
            //       fontSize: 15,
            //       fontWeight: FontWeight.bold,
            //       color: prvcPlateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.topRight,
            //           child: Text(
            //             "",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: prvcPlateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomRight,
            //           child: Text(
            //             "50",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: prvcPlateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomLeft,
            //           child: Text(
            //             "0",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: prvcPlateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.center,
            //           child: Padding(
            //             padding: const EdgeInsets.only(top: 1.0),
            //             child: Text(
            //     prvcPlateauValue.toString(),
            //     style: TextStyle(
            //         fontSize: 35,
            //         color: prvcPlateau
            //             ? Color(0xFF213855)
            //             : Color(0xFFE0E0E0)),
            //             ),
            //           ),
            //         ),
            //         Padding(
            //           padding: const EdgeInsets.only(
            //     bottom: 20.0, left: 10, right: 10),
            //           child: Align(
            //             alignment: Alignment.bottomCenter,
            //             child: LinearProgressIndicator(
            //     backgroundColor: Colors.grey,
            //     valueColor: AlwaysStoppedAnimation<Color>(
            //       prvcPlateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0),
            //     ),
            //     value: prvcPlateauValue != null
            //         ? prvcPlateauValue / 50
            //         : 0,
            //             ),
            //           ),
            //         )
            //       ],
            //     )),
            //             ),
            //           ),
            //         ),
            //       ),
            //     ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            //     InkWell(
            //       onTap: () {
            //         setState(() {
            //           prvcmaxValue = 4;
            //           prvcminValue = 0;
            //           prvcparameterName = "Flow";
            //           prvcparameterUnits = "";
            //           prvcItrig = false;
            //           prvcRr = false;
            //           prvcIe = false;
            //           prvcPeep = false;
            //           prvcVt = false;
            //           prvcPlateau = false;
            //           prvcPcMax = false;
            //           prvcFio2 = false;
            //           prvcFlow = true;
            //         });
            //       },
            //       child: Center(
            //         child: Container(
            //            width: _isTab10 ? 156 : 146,
            //           height: _isTab10 ? 130 : 130,
            //           child: Card(
            //             elevation: 40,
            //             color: prvcFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //             child: Padding(
            //     padding: const EdgeInsets.all(6.0),
            //     child: Center(
            //         child: Stack(
            //       children: [
            //         Align(
            //           alignment: Alignment.topLeft,
            //           child: Text(
            //             "Flow",
            //             style: TextStyle(
            //       fontSize: 15,
            //       fontWeight: FontWeight.bold,
            //       color: prvcFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.topRight,
            //           child: Text(
            //             "",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: prvcFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomRight,
            //           child: Text(
            //             "150",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: prvcFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomLeft,
            //           child: Text(
            //             "1",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: prvcFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.center,
            //           child: Padding(
            //             padding: const EdgeInsets.only(top: 1.0),
            //             child: Text(
            //     prvcFlowValue.toString(),
            //     style: TextStyle(
            //         fontSize: 35,
            //         color: prvcFlow
            //             ? Color(0xFF213855)
            //             : Color(0xFFE0E0E0)),
            //             ),
            //           ),
            //         ),
            //         Padding(
            //           padding: const EdgeInsets.only(
            //     bottom: 20.0, left: 10, right: 10),
            //           child: Align(
            //             alignment: Alignment.bottomCenter,
            //             child: LinearProgressIndicator(
            //     backgroundColor: Colors.grey,
            //     valueColor: AlwaysStoppedAnimation<Color>(
            //       prvcFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0),
            //     ),
            //     value: prvcFlowValue != null
            //         ? prvcFlowValue / 150
            //         : 0,
            //             ),
            //           ),
            //         )
            //       ],
            //     )),
            //             ),
            //           ),
            //         ),
            //       ),
            //     ),
            Container(
              width: 156,
            )
          ],
        ),
        SizedBox(width: 60),
        _isTab10
            ? Container(
                margin: EdgeInsets.only(top: 160, bottom: 20),
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Patient Trigger",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    Container(
                        padding: EdgeInsets.only(top: 20),
                        width: 255,
                        child: Row(
                          children: [
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Colors.green : Color(0xFFE0E0E0),
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "  Pressure  ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFFE0E0E0)
                                            : Color(0xFF213855),
                                      ),
                                    ),
                                  )),
                            ),
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Color(0xFFE0E0E0) : Colors.green,
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "      Flow      ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0),
                                      ),
                                    ),
                                  )),
                            ),
                          ],
                        )),
                  ],
                ))
            : Container(),
        SizedBox(width: 60),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (prvcItrig == true &&
                                        prvcItrigValue != prvcminValue) {
                                      setState(() {
                                        prvcItrigValue = prvcItrigValue - 1;
                                      });
                                    } else if (prvcPeep == true &&
                                        prvcPeepValue != prvcminValue) {
                                      setState(() {
                                        prvcPeepValue = prvcPeepValue - 1;
                                        if (prvcItrigValue > 1 &&
                                            prvcItrigValue > prvcPeepValue) {
                                          prvcItrigValue = prvcPeepValue;
                                        }
                                      });
                                    } else if (prvcRr == true &&
                                        prvcRrValue != prvcminValue) {
                                      setState(() {
                                        prvcRrValue = prvcRrValue - 1;
                                      });
                                    } else if (prvcIe == true &&
                                        prvcIeValue != prvcminValue) {
                                      setState(() {
                                        prvcIeValue = prvcIeValue - 1;
                                      });
                                    } else if (prvcVt == true &&
                                        prvcVtValue != prvcminValue) {
                                      setState(() {
                                        prvcVtValue = prvcVtValue - 1;
                                      });
                                    } else if (prvcPlateau == true &&
                                        prvcPlateauValue != prvcminValue) {
                                      setState(() {
                                        prvcPlateauValue = prvcPlateauValue - 1;
                                        // if (prvcPlateauValue >= prvcPcMaxValue) {
                                        //   prvcPcMaxValue = prvcPcMaxValue - 1;
                                        // }
                                      });
                                    } else if (prvcPcMax == true &&
                                        prvcPcMaxValue != prvcminValue) {
                                      prvcPcMaxValue = prvcPcMaxValue - 1;
                                    } else if (prvcFio2 == true &&
                                        prvcFio2Value != prvcminValue) {
                                      setState(() {
                                        prvcFio2Value = prvcFio2Value - 1;
                                      });
                                    } else if (prvcFlow == true &&
                                        prvcFlowValue != prvcminValue) {
                                      setState(() {
                                        prvcFlowValue = prvcFlowValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                prvcparameterName,
                                style: TextStyle(
                                    fontSize: 36,
                                    fontWeight: FontWeight.normal),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (prvcItrig == true &&
                                        prvcItrigValue != prvcmaxValue) {
                                      setState(() {
                                        prvcItrigValue = prvcItrigValue + 1;
                                        if (prvcPeepValue <= prvcItrigValue) {
                                          if (prvcPeepValue == 0) {
                                            prvcItrigValue = 1;
                                          } else {
                                            prvcItrigValue = prvcPeepValue;
                                          }
                                        }
                                      });
                                    } else if (prvcPeep == true &&
                                        prvcPeepValue != prvcmaxValue) {
                                      setState(() {
                                        prvcPeepValue = prvcPeepValue + 1;
                                        // if (prvcPlateauValue <= prvcPeepValue) {
                                        //   prvcPlateauValue = prvcPeepValue + 1;
                                        //   if (prvcPcMaxValue <= prvcPlateauValue) {
                                        //     prvcPcMaxValue = prvcPlateauValue + 1;
                                        //   }
                                        // }
                                      });
                                    } else if (prvcRr == true &&
                                        prvcRrValue != prvcmaxValue) {
                                      setState(() {
                                        prvcRrValue = prvcRrValue + 1;
                                      });
                                    } else if (prvcIe == true &&
                                        prvcIeValue != prvcmaxValue) {
                                      setState(() {
                                        prvcIeValue = prvcIeValue + 1;
                                      });
                                    } else if (prvcVt == true &&
                                        prvcVtValue != prvcmaxValue) {
                                      setState(() {
                                        prvcVtValue = prvcVtValue + 1;
                                      });
                                    } else if (prvcPlateau == true &&
                                        prvcPlateauValue != prvcmaxValue) {
                                      setState(() {
                                        // if (prvcPcMaxValue < 90) {
                                        // prvcPlateauValue = prvcPlateauValue + 1;
                                        prvcPcMaxValue = prvcPcMaxValue + 1;
                                        // }
                                      });
                                    } else if (prvcPcMax == true &&
                                        prvcPcMaxValue != prvcmaxValue) {
                                      setState(() {
                                        prvcPcMaxValue = prvcPcMaxValue + 1;
                                      });
                                    } else if (prvcFio2 == true &&
                                        prvcFio2Value != prvcmaxValue) {
                                      setState(() {
                                        prvcFio2Value = prvcFio2Value + 1;
                                      });
                                    } else if (prvcFlow == true &&
                                        prvcFlowValue != prvcmaxValue) {
                                      setState(() {
                                        prvcFlowValue = prvcFlowValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  prvcItrig
                                      ? pItrig
                                          ? "-$prvcItrigValue"
                                          : "$prvcItrigValue"
                                      : prvcPeep
                                          ? prvcPeepValue.toInt().toString()
                                          : prvcRr
                                              ? prvcRrValue.toInt().toString()
                                              : prvcIe
                                                  ? getIeData(prvcIeValue, 1)
                                                  : prvcVt
                                                      ? prvcVtValue
                                                          .toInt()
                                                          .toString()
                                                      : prvcPlateau
                                                          ? prvcPlateauValue
                                                              .toInt()
                                                              .toString()
                                                          : prvcPcMax
                                                              ? prvcPcMaxValue
                                                                  .toInt()
                                                                  .toString()
                                                              : prvcFio2
                                                                  ? prvcFio2Value
                                                                      .toInt()
                                                                      .toString()
                                                                  : prvcFlow
                                                                      ? prvcFlowValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : "",
                                  style: TextStyle(
                                      fontSize: 40,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          // prvcFio2
                          //     ? Container()
                          //     :
                          Container(
                              width: 350,
                              child: Slider(
                                min: prvcminValue.toDouble(),
                                max: prvcmaxValue.toDouble(),
                                onChanged: (double value) {
                                  if (prvcItrig == true &&
                                      prvcItrigValue != 10) {
                                    setState(() {
                                      if (prvcPeepValue == 0) {
                                        prvcItrigValue = 1;
                                      } else {
                                        if (value.toInt() > prvcPeepValue) {
                                          prvcItrigValue = prvcPeepValue;
                                        } else {
                                          prvcItrigValue = value.toInt();
                                        }
                                      }
                                    });
                                  } else if (prvcPeep == true) {
                                    setState(() {
                                      prvcPeepValue = value.toInt();
                                      if (prvcItrigValue > 1 &&
                                          prvcItrigValue > prvcPeepValue) {
                                        if (prvcPeepValue == 0) {
                                          prvcItrigValue = 1;
                                        } else {
                                          prvcItrigValue = prvcPeepValue;
                                        }
                                      }
                                    });
                                  } else if (prvcRr == true) {
                                    setState(() {
                                      prvcRrValue = value.toInt();
                                    });
                                  } else if (prvcIe == true) {
                                    setState(() {
                                      prvcIeValue = value.toInt();
                                    });
                                  } else if (prvcVt == true) {
                                    setState(() {
                                      prvcVtValue = value.toInt();
                                    });
                                  } else if (prvcPlateau == true) {
                                    if (value.toInt() < 90) {
                                      prvcPlateauValue = value.toInt();
                                      prvcPcMaxValue = prvcPlateauValue + 1;
                                    }
                                  } else if (prvcPcMax == true) {
                                    setState(() {
                                      // if (value.toInt() <= prvcminValue ) {
                                      //   prvcPcMaxValue = prvcPlateauValue + 1;
                                      // } else {
                                      prvcPcMaxValue = value.toInt();
                                      // }
                                    });
                                  } else if (prvcFio2 == true) {
                                    setState(() {
                                      prvcFio2Value = value.toInt();
                                    });
                                  } else if (prvcFlow == true) {
                                    setState(() {
                                      prvcFlowValue = value.toInt();
                                    });
                                  }
                                },
                                value: prvcItrig
                                    ? prvcItrigValue.toDouble()
                                    : prvcPeep
                                        ? prvcPeepValue.toDouble()
                                        : prvcRr
                                            ? prvcRrValue.toDouble()
                                            : prvcIe
                                                ? prvcIeValue.toDouble()
                                                : prvcVt
                                                    ? prvcVtValue.toDouble()
                                                    : prvcPlateau
                                                        ? prvcPlateauValue
                                                            .toDouble()
                                                        : prvcPcMax
                                                            ? prvcPcMaxValue
                                                                .toDouble()
                                                            : prvcFio2
                                                                ? prvcFio2Value
                                                                    .toDouble()
                                                                : prvcFlow
                                                                    ? prvcFlowValue
                                                                        .toDouble()
                                                                    : "",
                              )),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(prvcIe
                                    ? getIeData(prvcminValue, 1)
                                    : prvcItrig
                                        ? pItrig
                                            ? "-$prvcminValue"
                                            : "$prvcminValue"
                                        : prvcminValue.toString()),
                                Text(
                                  prvcItrig
                                      ? pItrig ? prvcparameterUnits : "lpm"
                                      : prvcparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(prvcIe
                                    ? getIeData(prvcmaxValue, 1)
                                    : prvcItrig
                                        ? pItrig
                                            ? "-$prvcmaxValue"
                                            : "$prvcmaxValue"
                                        : prvcmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  psimvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = 30;
                    psimvminValue = 1;
                    psimvparameterName = "RR";
                    psimvparameterUnits = "bpm";
                    psimvItrig = false;
                    psimvRr = true;
                    psimvIe = false;
                    psimvPeep = false;
                    psimvPc = false;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = false;
                    psimvFlow = false;
                    psimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psimvRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvRrValue != null
                                    ? psimvRrValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = 61;
                    psimvminValue = 1;
                    psimvparameterName = "I:E";
                    psimvparameterUnits = "";
                    psimvItrig = false;
                    psimvRr = false;
                    psimvIe = true;
                    psimvPeep = false;
                    psimvPc = false;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = false;
                    psimvFlow = false;
                    psimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                // psimvIeValue.toString(),
                                getIeData(psimvIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvIeValue != null
                                    ? psimvIeValue / 61
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = _isTab10 ? 45 : 30;
                    psimvminValue = 0;
                    psimvparameterName = "PEEP";
                    psimvparameterUnits = "cmH\u2082O";
                    psimvItrig = false;
                    psimvRr = false;
                    psimvIe = false;
                    psimvPeep = true;
                    psimvPc = false;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = false;
                    psimvFlow = false;
                    psimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psimvPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvPeepValue != null
                                    ? _isTab10
                                        ? psimvPeepValue / 45
                                        : psimvPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = _isTab10 ? 85 : 60;
                    psimvminValue = 5;
                    psimvparameterName = "PC";
                    psimvparameterUnits = "cmH\u2082O above PEEP";
                    psimvItrig = false;
                    psimvRr = false;
                    psimvIe = false;
                    psimvPeep = false;
                    psimvPc = true;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = false;
                    psimvFlow = false;
                    psimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvPc ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "85" : "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "5",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psimvPcValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvPc
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvPcValue != null
                                    ? _isTab10
                                        ? psimvPcValue / 85
                                        : psimvPcValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = 100;
                    psimvminValue = 21;
                    psimvparameterName = "FiO\u2082";
                    psimvparameterUnits = "%";
                    psimvItrig = false;
                    psimvRr = false;
                    psimvIe = false;
                    psimvPeep = false;
                    psimvPc = false;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = true;
                    psimvFlow = false;
                    psimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psimvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvFio2Value != null
                                    ? psimvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = 10;
                    psimvminValue = 1;
                    psimvparameterName = "I Trig";
                    psimvparameterUnits = "cmH\u2082O Below PEEP";
                    psimvItrig = true;
                    psimvRr = false;
                    psimvIe = false;
                    psimvPeep = false;
                    psimvPc = false;
                    psimvPs = false;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = false;
                    psimvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig
                                    ? "-$psimvItrigValue"
                                    : "$psimvItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvItrigValue != null
                                    ? psimvItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    psimvmaxValue = 65;
                    psimvminValue = 0;
                    psimvparameterName = "PS";
                    psimvparameterUnits = "cmH\u2082O above PEEP";
                    psimvItrig = false;
                    psimvRr = false;
                    psimvIe = false;
                    psimvPeep = false;
                    psimvPc = false;
                    psimvPplateau = false;
                    psimvVtMax = false;
                    psimvFio2 = false;
                    psimvFlow = false;
                    psimvPs = true;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: psimvPs ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PS",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: psimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "65",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: psimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                psimvPsValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: psimvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  psimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: psimvPsValue != null
                                    ? psimvPsValue / 65
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            //     InkWell(
            //       onTap: () {
            //        if (_parameterChangeEnabled == true) {
            //           setState(() {
            //             _parameterChangeEnabled = false;
            //           psimvmaxValue = 50;
            //           psimvminValue = 0;
            //           psimvparameterName = "Plateau";
            //           psimvparameterUnits = "L/m";
            //           psimvItrig = false;
            //           psimvRr = false;
            //           psimvIe = false;
            //           psimvPeep = false;
            //           psimvPc = false;
            //           psimvPplateau = true;
            //           psimvVtMax = false;
            //           psimvFio2 = false;
            //           psimvFlow = false;
            //           psimvPs = false;
            //         });
            //       }
            //       },
            //       child: Center(
            //         child: Container(
            //            width: _isTab10 ? 156 : 146,
            //           height: _isTab10 ? 130 : 130,
            //           child: Card(
            //             elevation: 40,
            //             color: psimvPplateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //             child: Padding(
            //     padding: const EdgeInsets.all(6.0),
            //     child: Center(
            //         child: Stack(
            //       children: [
            //         Align(
            //           alignment: Alignment.topLeft,
            //           child: Text(
            //             "Plateau",
            //             style: TextStyle(
            //       fontSize: 15,
            //       fontWeight: FontWeight.bold,
            //       color: psimvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.topRight,
            //           child: Text(
            //             "L/m",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: psimvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomRight,
            //           child: Text(
            //             "50",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: psimvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomLeft,
            //           child: Text(
            //             "0",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: psimvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.center,
            //           child: Padding(
            //             padding: const EdgeInsets.only(top: 1.0),
            //             child: Text(
            //     psimvPplateauValue.toString(),
            //     style: TextStyle(
            //         fontSize: 35,
            //         color: psimvPplateau
            //             ? Color(0xFF213855)
            //             : Color(0xFFE0E0E0)),
            //             ),
            //           ),
            //         ),
            //         Padding(
            //           padding: const EdgeInsets.only(
            //     bottom: 20.0, left: 10, right: 10),
            //           child: Align(
            //             alignment: Alignment.bottomCenter,
            //             child: LinearProgressIndicator(
            //     backgroundColor: Colors.grey,
            //     valueColor: AlwaysStoppedAnimation<Color>(
            //       psimvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0),
            //     ),
            //     value: psimvPplateauValue != null
            //         ? psimvPplateauValue / 50
            //         : 0,
            //             ),
            //           ),
            //         )
            //       ],
            //     )),
            //             ),
            //           ),
            //         ),
            //       ),
            //     ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            //     InkWell(
            //       onTap: () {
            //         if (_parameterChangeEnabled == true) {
            //           setState(() {
            //           _parameterChangeEnabled = false;
            //           psimvmaxValue = 150;
            //           psimvminValue = 1;
            //           psimvparameterName = "Flow";
            //           psimvparameterUnits = "";
            //           psimvItrig = false;
            //           psimvRr = false;
            //           psimvIe = false;
            //           psimvPeep = false;
            //           psimvPc = false;
            //           psimvPplateau = false;
            //           psimvVtMax = false;
            //           psimvFio2 = false;
            //           psimvFlow = true;
            //         });
            //       }
            //       },
            //       child: Center(
            //         child: Container(
            //           width: _isTab10 ? 156 : 146,
            //           height: _isTab10 ? 130 : 130,
            //           child: Card(
            //             elevation: 40,
            //             color:
            //       psimvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //             child: Padding(
            //     padding: const EdgeInsets.all(6.0),
            //     child: Center(
            //         child: Stack(
            //       children: [
            //         Align(
            //           alignment: Alignment.topLeft,
            //           child: Text(
            //             "Flow",
            //             style: TextStyle(
            //       fontSize: 15,
            //       fontWeight: FontWeight.bold,
            //       color: psimvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.topRight,
            //           child: Text(
            //             "",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: psimvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomRight,
            //           child: Text(
            //             "150",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: psimvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomLeft,
            //           child: Text(
            //             "1",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: psimvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.center,
            //           child: Padding(
            //             padding: const EdgeInsets.only(top: 1.0),
            //             child: Text(
            //     psimvFlowValue.toString(),
            //     style: TextStyle(
            //         fontSize: 35,
            //         color: psimvFlow
            //             ? Color(0xFF213855)
            //             : Color(0xFFE0E0E0)),
            //             ),
            //           ),
            //         ),
            //         Padding(
            //           padding: const EdgeInsets.only(
            //     bottom: 20.0, left: 10, right: 10),
            //           child: Align(
            //             alignment: Alignment.bottomCenter,
            //             child: LinearProgressIndicator(
            //     backgroundColor: Colors.grey,
            //     valueColor: AlwaysStoppedAnimation<Color>(
            //       psimvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0),
            //     ),
            //     value: psimvFlowValue != null
            //         ? psimvFlowValue / 150
            //         : 0,
            //             ),
            //           ),
            //         )
            //       ],
            //     )),
            //             ),
            //           ),
            //         ),
            //       ),
            //     ),
            Container(width: 156),
          ],
        ),
        SizedBox(width: 60),
        _isTab10
            ? Container(
                margin: EdgeInsets.only(top: 160, bottom: 20),
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Patient Trigger",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    Container(
                        padding: EdgeInsets.only(top: 20),
                        width: 255,
                        child: Row(
                          children: [
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Colors.green : Color(0xFFE0E0E0),
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "  Pressure  ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFFE0E0E0)
                                            : Color(0xFF213855),
                                      ),
                                    ),
                                  )),
                            ),
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Color(0xFFE0E0E0) : Colors.green,
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "      Flow      ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0),
                                      ),
                                    ),
                                  )),
                            ),
                          ],
                        )),
                  ],
                ))
            : Container(),
        SizedBox(width: 60),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (psimvItrig == true &&
                                        psimvItrigValue != psimvminValue) {
                                      setState(() {
                                        psimvItrigValue = psimvItrigValue - 1;
                                      });
                                    }
                                    // else if (psimvPeep == true &&
                                    //     psimvPeepValue != psimvminValue) {
                                    //   setState(() {
                                    //     psimvPeepValue = psimvPeepValue - 1;
                                    //     if (psimvItrigValue > 1 &&
                                    //         psimvItrigValue > psimvPeepValue) {
                                    //       psimvItrigValue = psimvPeepValue;
                                    //     }
                                    //   });
                                    // }
                                    else if (psimvPeep == true &&
                                        psimvPeepValue != psimvminValue) {
                                      setState(() {
                                        psimvPeepValue = psimvPeepValue - 1;
                                      });
                                    } else if (psimvRr == true &&
                                        psimvRrValue != psimvminValue) {
                                      setState(() {
                                        psimvRrValue = psimvRrValue - 1;
                                      });
                                    } else if (psimvIe == true &&
                                        psimvIeValue != psimvminValue) {
                                      setState(() {
                                        psimvIeValue = psimvIeValue - 1;
                                      });
                                    } else if (psimvPc == true &&
                                        psimvPcValue != psimvminValue &&
                                        psimvPcValue != 5) {
                                      setState(() {
                                        psimvPcValue = psimvPcValue - 1;
                                        if (psimvPcValue < psimvPsValue) {
                                          psimvPsValue = psimvPcValue;
                                        }
                                      });
                                    } else if (psimvPplateau == true &&
                                        psimvPplateauValue != psimvminValue) {
                                      setState(() {
                                        psimvPplateauValue =
                                            psimvPplateauValue - 1;
                                      });
                                    } else if (psimvVtMax == true &&
                                        psimvVtMaxValue != psimvminValue) {
                                      psimvVtMaxValue = psimvVtMaxValue - 1;
                                    } else if (psimvFio2 == true &&
                                        psimvFio2Value != psimvminValue) {
                                      setState(() {
                                        psimvFio2Value = psimvFio2Value - 1;
                                      });
                                    } else if (psimvFlow == true &&
                                        psimvFlowValue != psimvminValue) {
                                      setState(() {
                                        psimvFlowValue = psimvFlowValue - 1;
                                      });
                                    } else if (psimvPs == true &&
                                        psimvPsValue != psimvPcValue + 1 &&
                                        psimvPsValue != 0) {
                                      setState(() {
                                        psimvPsValue = psimvPsValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                psimvparameterName,
                                style: TextStyle(
                                    fontSize: 36,
                                    fontWeight: FontWeight.normal),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  int maxPeep = _isTab10 ? 45 : 30;
                                  int maxValue = _isTab10 ? 90 : 65;
                                  int maxValuepcValue, maxValuepeepValue;
                                  setState(() {
                                    // if (psimvItrig == true &&
                                    //     psimvItrigValue != psimvmaxValue) {
                                    //   setState(() {
                                    //     psimvItrigValue = psimvItrigValue + 1;
                                    //     if (psimvPeepValue <= psimvItrigValue) {
                                    //       if (psimvPeepValue == 0) {
                                    //         psimvItrigValue = 1;
                                    //       } else {
                                    //         psimvItrigValue = psimvPeepValue;
                                    //       }
                                    //     }
                                    //   });
                                    // }

                                    maxValuepcValue = maxValue - psimvPeepValue;
                                    if ((maxValue - psimvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue =
                                          maxValue - psimvPcValue;
                                    }
                                    if (psimvItrig == true &&
                                        psimvItrigValue != psimvmaxValue) {
                                      setState(() {
                                        psimvItrigValue = psimvItrigValue + 1;
                                      });
                                    } else if (psimvPeep == true &&
                                        psimvPeepValue != psimvmaxValue &&
                                        psimvPeepValue < maxValuepeepValue) {
                                      setState(() {
                                        psimvPeepValue = psimvPeepValue + 1;
                                      });
                                    } else if (psimvRr == true &&
                                        psimvRrValue != psimvmaxValue) {
                                      setState(() {
                                        psimvRrValue = psimvRrValue + 1;
                                      });
                                    } else if (psimvIe == true &&
                                        psimvIeValue != psimvmaxValue) {
                                      setState(() {
                                        psimvIeValue = psimvIeValue + 1;
                                      });
                                    } else if (psimvPc == true &&
                                        psimvPcValue != psvmaxValue &&
                                        psimvPcValue < maxValuepcValue) {
                                      setState(() {
                                        psimvPcValue = psimvPcValue + 1;
                                      });
                                    } else if (psimvPplateau == true &&
                                        psimvPplateauValue != psimvmaxValue) {
                                      setState(() {
                                        psimvPplateauValue =
                                            psimvPplateauValue + 1;
                                      });
                                    } else if (psimvVtMax == true &&
                                        psimvVtMaxValue != psimvmaxValue) {
                                      setState(() {
                                        psimvVtMaxValue = psimvVtMaxValue + 1;
                                      });
                                    } else if (psimvFlow == true &&
                                        psimvFlowValue != psimvmaxValue) {
                                      setState(() {
                                        psimvFlowValue = psimvFlowValue + 1;
                                      });
                                    } else if (psimvPs == true &&
                                        psimvPsValue != psimvPcValue) {
                                      setState(() {
                                        psimvPsValue = psimvPsValue + 1;
                                      });
                                    } else if (psimvFio2 == true &&
                                        psimvFio2Value != psimvmaxValue) {
                                      setState(() {
                                        psimvFio2Value = psimvFio2Value + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  psimvItrig
                                      ? pItrig
                                          ? "-$psimvItrigValue"
                                          : "$psimvItrigValue"
                                      : psimvPeep
                                          ? psimvPeepValue.toInt().toString()
                                          : psimvRr
                                              ? psimvRrValue.toInt().toString()
                                              : psimvIe
                                                  ? getIeData(psimvIeValue, 1)
                                                  : psimvPc
                                                      ? psimvPcValue
                                                          .toInt()
                                                          .toString()
                                                      : psimvPplateau
                                                          ? psimvPplateauValue
                                                              .toInt()
                                                              .toString()
                                                          : psimvVtMax
                                                              ? psimvVtMaxValue
                                                                  .toInt()
                                                                  .toString()
                                                              : psimvFio2
                                                                  ? psimvFio2Value
                                                                      .toInt()
                                                                      .toString()
                                                                  : psimvFlow
                                                                      ? psimvFlowValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : psimvPs
                                                                          ? psimvPsValue
                                                                              .toInt()
                                                                              .toString()
                                                                          : "",
                                  style: TextStyle(
                                      fontSize: 40,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          Container(
                              width: 350,
                              child: Slider(
                                min: psimvminValue.toDouble() ?? 0,
                                max: psimvmaxValue.toDouble(),
                                onChanged: (double value) {
                                  int maxPeep = _isTab10 ? 45 : 30;
                                  int maxValue = _isTab10 ? 90 : 65;
                                  int maxValuepcValue, maxValuepeepValue;
                                  setState(() {
                                    maxValuepcValue = maxValue - psimvPeepValue;
                                    if ((maxValue - psimvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue =
                                          maxValue - psimvPcValue;
                                    }
                                  });
                                  if (psimvItrig == true) {
                                    setState(() {
                                      psimvItrigValue = value.toInt();
                                    });
                                  } else if (psimvPeep == true) {
                                    setState(() {
                                      if (value.toInt() >= maxValuepeepValue) {
                                        psimvPeepValue = maxValuepeepValue;
                                      } else {
                                        psimvPeepValue = value.toInt();
                                      }
                                    });
                                  } else if (psimvRr == true) {
                                    setState(() {
                                      psimvRrValue = value.toInt();
                                    });
                                  } else if (psimvIe == true) {
                                    setState(() {
                                      psimvIeValue = value.toInt();
                                    });
                                  } else if (psimvPc == true) {
                                    setState(() {
                                      if (value.toInt() < psimvPsValue) {
                                        if (value.toInt() >= maxValuepcValue) {
                                          psimvPcValue = maxValuepcValue;
                                        } else {
                                          psimvPcValue = value.toInt();
                                        }
                                        psimvPsValue = psimvPcValue;
                                      } else {
                                        if (value.toInt() >= maxValuepcValue) {
                                          psimvPcValue = maxValuepcValue;
                                        } else {
                                          psimvPcValue = value.toInt();
                                        }
                                      }
                                      // if(value.toInt())
                                    });
                                  } else if (psimvPplateau == true) {
                                    psimvPplateauValue = value.toInt();
                                  } else if (psimvVtMax == true) {
                                    setState(() {
                                      psimvVtMaxValue = value.toInt();
                                    });
                                  } else if (psimvFio2 == true) {
                                    setState(() {
                                      psimvFio2Value = value.toInt();
                                    });
                                  } else if (psimvFlow == true) {
                                    setState(() {
                                      psimvFlowValue = value.toInt();
                                    });
                                  } else if (psimvPs == true) {
                                    setState(() {
                                      if (value.toInt() >= psimvPcValue) {
                                        psimvPsValue = psimvPcValue;
                                      } else {
                                        psimvPsValue = value.toInt();
                                      }
                                    });
                                  }
                                },
                                value: psimvItrig
                                    ? psimvItrigValue.toDouble()
                                    : psimvPeep
                                        ? psimvPeepValue.toDouble()
                                        : psimvRr
                                            ? psimvRrValue.toDouble()
                                            : psimvIe
                                                ? psimvIeValue.toDouble()
                                                : psimvPc
                                                    ? psimvPcValue.toDouble()
                                                    : psimvPplateau
                                                        ? psimvPplateauValue
                                                            .toDouble()
                                                        : psimvVtMax
                                                            ? psimvVtMaxValue
                                                                .toDouble()
                                                            : psimvFio2
                                                                ? psimvFio2Value
                                                                    .toDouble()
                                                                : psimvFlow
                                                                    ? psimvFlowValue
                                                                        .toDouble()
                                                                    : psimvPs
                                                                        ? psimvPsValue
                                                                            .toDouble()
                                                                        : "",
                              )),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(psimvIe
                                    ? getIeData(psimvminValue, 1)
                                    : psimvItrig
                                        ? pItrig
                                            ? "-$psimvminValue"
                                            : "$psimvminValue"
                                        : psimvminValue.toString()),
                                Text(
                                  psimvItrig
                                      ? pItrig ? psimvparameterUnits : "lpm"
                                      : psimvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(psimvIe
                                    ? getIeData(psimvmaxValue, 1)
                                    : psimvItrig
                                        ? pItrig
                                            ? "-$psimvmaxValue"
                                            : "$psimvmaxValue"
                                        : psimvmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  pccmvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pccmvmaxValue = 60;
                    pccmvminValue = 1;
                    pccmvparameterName = "RR";
                    pccmvparameterUnits = "bpm";
                    // pccmvTempValue = pccmvRRValue;
                    pccmvRRChanged = true;
                    pccmvRR = true;
                    pccmvIe = false;
                    pccmvPeep = false;
                    pccmvPc = false;
                    pccmvFio2 = false;
                    pccmvVtmin = false;
                    pccmvPplateau = false;
                    pccmvFlow = false;
                    pccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pccmvRR ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: pccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pccmvRRValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pccmvRR
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pccmvRRValue != null
                                    ? pccmvRRValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pccmvmaxValue = 61;
                    pccmvminValue = 1;
                    pccmvparameterName = "I:E";
                    pccmvparameterUnits = "";
                    pccmvRR = false;
                    pccmvIe = true;
                    pccmvPeep = false;
                    pccmvPc = false;
                    pccmvFio2 = false;
                    pccmvVtmin = false;
                    pccmvPplateau = false;
                    pccmvFlow = false;
                    pccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pccmvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: pccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                getIeData(pccmvIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pccmvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pccmvIeValue != null
                                    ? pccmvIeValue / 61
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pccmvmaxValue = _isTab10 ? 45 : 30;
                    pccmvminValue = 0;
                    pccmvparameterName = "PEEP";
                    pccmvparameterUnits = "cmH\u2082O";
                    pccmvRR = false;
                    pccmvIe = false;
                    pccmvPeep = true;
                    pccmvPc = false;
                    pccmvFio2 = false;
                    pccmvVtmin = false;
                    pccmvPplateau = false;
                    pccmvFlow = false;
                    pccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pccmvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: pccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pccmvPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pccmvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pccmvPeepValue != null
                                    ? _isTab10
                                        ? pccmvPeepValue / 45
                                        : pccmvPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pccmvmaxValue = _isTab10 ? 85 : 60;
                    pccmvminValue = 5;
                    pccmvparameterName = "PC";
                    pccmvparameterUnits = "cmH\u2082O above PEEP";
                    pccmvRR = false;
                    pccmvIe = false;
                    pccmvPeep = false;
                    pccmvPc = true;
                    pccmvFio2 = false;
                    pccmvVtmin = false;
                    pccmvPplateau = false;
                    pccmvFlow = false;
                    pccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pccmvPc ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pccmvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: pccmvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "85" : "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "5",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pccmvPcValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pccmvPc
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pccmvPc
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pccmvPcValue != null
                                    ? _isTab10
                                        ? pccmvPcValue / 85
                                        : pccmvPcValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    pccmvmaxValue = 100;
                    pccmvminValue = 21;
                    pccmvparameterName = "FiO\u2082";
                    pccmvparameterUnits = "%";
                    pccmvRR = false;
                    pccmvIe = false;
                    pccmvPeep = false;
                    pccmvPc = false;
                    pccmvFio2 = true;
                    pccmvVtmin = false;
                    pccmvPplateau = false;
                    pccmvFlow = false;
                    pccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: pccmvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO" + '\u2082',
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: pccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: pccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: pccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pccmvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: pccmvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  pccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: pccmvFio2Value != null
                                    ? pccmvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            // InkWell(
            //   onTap: () {
            //     if (_parameterChangeEnabled == true) {
            //       setState(() {
            //         _parameterChangeEnabled = false;
            //         pccmvmaxValue = 50;
            //         pccmvminValue = 0;
            //         pccmvparameterName = "P Plateau";
            //         pccmvparameterUnits = "L/m";
            //         pccmvRR = false;
            //         pccmvIe = false;
            //         pccmvPeep = false;
            //         pccmvPc = false;
            //         pccmvFio2 = false;
            //         pccmvVtmin = false;
            //         pccmvPplateau = true;
            //         pccmvFlow = false;
            //         pccmvTih = false;
            //       });
            //     }
            //   },
            //   child: Center(
            //     child: Container(
            //        width: _isTab10 ? 156 : 146,
            //       height: _isTab10 ? 130 : 130,
            //       child: Card(
            //         elevation: 40,
            //         color:
            //             pccmvPplateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            //           padding: const EdgeInsets.all(6.0),
            //           child: Center(
            //               child: Stack(
            //             children: [
            //               Align(
            //                 alignment: Alignment.topLeft,
            //                 child: Text(
            //                   "P plateau",
            //                   style: TextStyle(
            //                       fontSize: 15,
            //                       fontWeight: FontWeight.bold,
            //                       color: pccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.topRight,
            //                 child: Text(
            //                   "L/m",
            //                   style: TextStyle(
            //                       fontSize: 9,
            //                       color: pccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomRight,
            //                 child: Text(
            //                   "50",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: pccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomLeft,
            //                 child: Text(
            //                   "0",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: pccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.center,
            //                 child: Padding(
            //                   padding: const EdgeInsets.only(top: 1.0),
            //                   child: Text(
            //                     pccmvPplateauValue.toString(),
            //                     style: TextStyle(
            //                         fontSize: 35,
            //                         color: pccmvPplateau
            //                             ? Color(0xFF213855)
            //                             : Color(0xFFE0E0E0)),
            //                   ),
            //                 ),
            //               ),
            //               Padding(
            //                 padding: const EdgeInsets.only(
            //                     bottom: 20.0, left: 10, right: 10),
            //                 child: Align(
            //                   alignment: Alignment.bottomCenter,
            //                   child: LinearProgressIndicator(
            //                     backgroundColor: Colors.grey,
            //                     valueColor: AlwaysStoppedAnimation<Color>(
            //                       pccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0),
            //                     ),
            //                     value: pccmvPplateauValue != null
            //                         ? pccmvPplateauValue / 50
            //                         : 0,
            //                   ),
            //                 ),
            //               )
            //             ],
            //           )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
            // InkWell(
            //   onTap: () {
            //     if (_parameterChangeEnabled == true) {
            //       setState(() {
            //         _parameterChangeEnabled = false;
            //         pccmvmaxValue = 150;
            //         pccmvminValue = 1;
            //         pccmvparameterName = "Flow";
            //         pccmvparameterUnits = "";
            //         pccmvRR = false;
            //         pccmvIe = false;
            //         pccmvPeep = false;
            //         pccmvPc = false;
            //         pccmvFio2 = false;
            //         pccmvVtmin = false;
            //         pccmvPplateau = false;
            //         pccmvFlow = true;
            //         pccmvTih = false;
            //       });
            //     }
            //   },
            //   child: Center(
            //     child: Container(
            //       width: _isTab10 ? 156 : 146,
            //       height: _isTab10 ? 130 : 130,
            //       child: Card(
            //         elevation: 40,
            //         color: pccmvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            //           padding: const EdgeInsets.all(6.0),
            //           child: Center(
            //               child: Stack(
            //             children: [
            //               Align(
            //                 alignment: Alignment.topLeft,
            //                 child: Text(
            //                   "Flow",
            //                   style: TextStyle(
            //                       fontSize: 15,
            //                       fontWeight: FontWeight.bold,
            //                       color: pccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.topRight,
            //                 child: Text(
            //                   "",
            //                   style: TextStyle(
            //                       fontSize: 9,
            //                       color: pccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomRight,
            //                 child: Text(
            //                   "150",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: pccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomLeft,
            //                 child: Text(
            //                   "1",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: pccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.center,
            //                 child: Padding(
            //                   padding: const EdgeInsets.only(top: 1.0),
            //                   child: Text(
            //                     pccmvFlowValue.toString(),
            //                     style: TextStyle(
            //                         fontSize: 35,
            //                         color: pccmvFlow
            //                             ? Color(0xFF213855)
            //                             : Color(0xFFE0E0E0)),
            //                   ),
            //                 ),
            //               ),
            //               Padding(
            //                 padding: const EdgeInsets.only(
            //                     bottom: 20.0, left: 10, right: 10),
            //                 child: Align(
            //                   alignment: Alignment.bottomCenter,
            //                   child: LinearProgressIndicator(
            //                     backgroundColor: Colors.grey,
            //                     valueColor: AlwaysStoppedAnimation<Color>(
            //                       pccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0),
            //                     ),
            //                     value: pccmvFlowValue != null
            //                         ? pccmvFlowValue / 150
            //                         : 0,
            //                   ),
            //                 ),
            //               )
            //             ],
            //           )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
          ],
        ),
        SizedBox(width: 140),
        Column(
          children: <Widget>[
            SizedBox(height: 320),
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Assist",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        InkWell(
                          onTap: () {
                            if (_modeChangeEnabled == true) {
                              setState(() {
                                _modeChangeEnabled = false;
                                assistmodePressureOn = !assistmodePressureOn;
                                if (assistmodePressureOn == true) {
                                  pacvEnabled = true;
                                  pccmvEnabled = false;
                                } else {
                                  pccmvEnabled = true;
                                  pacvEnabled = false;
                                }
                              });
                            }
                          },
                          child: Card(
                              color: assistmodePressureOn
                                  ? Color(0xFFE0E0E0)
                                  : Colors.green,
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "Off",
                                  style: TextStyle(
                                    color: assistmodePressureOn
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                ),
                              )),
                        ),
                        SizedBox(height: 10),
                        InkWell(
                          onTap: () {
                            if (_modeChangeEnabled == true) {
                              setState(() {
                                _modeChangeEnabled = false;
                                assistmodePressureOn = !assistmodePressureOn;
                                if (assistmodePressureOn == true) {
                                  pacvEnabled = true;
                                  pccmvEnabled = false;
                                } else {
                                  pccmvEnabled = true;
                                  pacvEnabled = false;
                                }
                              });
                            }
                          },
                          child: Card(
                              color: assistmodePressureOn
                                  ? Colors.green
                                  : Color(0xFFE0E0E0),
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "On",
                                  style: TextStyle(
                                    color: assistmodePressureOn
                                        ? Color(0xFFE0E0E0)
                                        : Color(0xFF213855),
                                  ),
                                ),
                              )),
                        ),
                      ],
                    ),
                  ],
                )),
          ],
        ),
        SizedBox(width: 140),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight ?? 0.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight ?? 0) * 6)
                                  .toString() +
                              " - " +
                              (int.tryParse(patientWeight ?? 0) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 55,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (pccmvRR == true &&
                                        pccmvRRValue != pccmvminValue) {
                                      setState(() {
                                        pccmvRRValue = pccmvRRValue - 1;
                                      });
                                    } else if (pccmvIe == true &&
                                        pccmvIeValue != pccmvminValue) {
                                      setState(() {
                                        pccmvIeValue = pccmvIeValue - 1;
                                      });
                                    } else if (pccmvPeep == true &&
                                        pccmvPeepValue != pccmvminValue) {
                                      setState(() {
                                        pccmvPeepValue = pccmvPeepValue - 1;
                                      });
                                    } else if (pccmvPc == true &&
                                        pccmvPcValue != pccmvminValue) {
                                      setState(() {
                                        pccmvPcValue = pccmvPcValue - 1;
                                      });
                                    } else if (pccmvFio2 == true &&
                                        pccmvFio2Value != pccmvminValue) {
                                      setState(() {
                                        pccmvFio2Value = pccmvFio2Value - 1;
                                      });
                                    } else if (pccmvVtmin == true &&
                                        pccmvVtminValue != pccmvminValue) {
                                      setState(() {
                                        pccmvVtminValue = pccmvVtminValue - 1;
                                      });
                                    } else if (pccmvPplateau == true &&
                                        pccmvPplateauValue != pccmvminValue) {
                                      pccmvPplateauValue =
                                          pccmvPplateauValue - 1;
                                    } else if (pccmvFlow == true &&
                                        pccmvFlowValue != pccmvminValue) {
                                      setState(() {
                                        pccmvFlowValue = pccmvFlowValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                pccmvparameterName,
                                style: TextStyle(fontSize: 36),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 55,
                                ),
                                onPressed: () {
                                  setState(() {
                                    int maxValue = _isTab10 ? 90 : 65;
                                    int maxPeep = _isTab10 ? 45 : 30;
                                    int maxValuepcValue, maxValuepeepValue;
                                    maxValuepcValue = maxValue - pccmvPeepValue;
                                    if ((maxValue - pccmvPcValue) >= maxPeep) {
                                      maxValuepeepValue = maxPeep;
                                    } else {
                                      maxValuepeepValue =
                                          maxValue - pccmvPcValue;
                                    }
                                    if (pccmvRR == true &&
                                        pccmvRRValue != pccmvmaxValue) {
                                      setState(() {
                                        pccmvRRValue = pccmvRRValue + 1;
                                      });
                                    } else if (pccmvIe == true &&
                                        pccmvIeValue != pccmvmaxValue) {
                                      setState(() {
                                        pccmvIeValue = pccmvIeValue + 1;
                                      });
                                    } else if (pccmvPeep == true &&
                                        pccmvPeepValue != pccmvmaxValue &&
                                        pccmvPeepValue < maxValuepeepValue) {
                                      setState(() {
                                        pccmvPeepValue = pccmvPeepValue + 1;
                                        // if (pccmvPcValue <= pccmvPeepValue) {
                                        //   pccmvPcValue = pccmvPeepValue + 1;
                                        // }
                                      });
                                    } else if (pccmvPc == true &&
                                        pccmvPcValue != pccmvmaxValue &&
                                        pccmvPcValue < maxValuepcValue) {
                                      setState(() {
                                        pccmvPcValue = pccmvPcValue + 1;
                                      });
                                    } else if (pccmvFio2 == true &&
                                        pccmvFio2Value != pccmvmaxValue) {
                                      setState(() {
                                        pccmvFio2Value = pccmvFio2Value + 1;
                                      });
                                    } else if (pccmvPplateau == true &&
                                        pccmvPplateauValue != pccmvmaxValue) {
                                      setState(() {
                                        pccmvPplateauValue =
                                            pccmvPplateauValue + 1;
                                      });
                                    } else if (pccmvFlow == true &&
                                        pccmvFlowValue != pccmvmaxValue) {
                                      setState(() {
                                        pccmvFlowValue = pccmvFlowValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  pccmvRR
                                      ? pccmvRRValue.toInt().toString()
                                      // : pccmvIe
                                      //     ? "1:" + pccmvIeValue.toInt().toString()

                                      : pccmvIe
                                          ? getIeData(pccmvIeValue, 1)
                                          : pccmvPeep
                                              ? pccmvPeepValue
                                                  .toInt()
                                                  .toString()
                                              : pccmvPc
                                                  ? pccmvPcValue
                                                      .toInt()
                                                      .toString()
                                                  : pccmvFio2
                                                      ? pccmvFio2Value
                                                          .toInt()
                                                          .toString()
                                                      : pccmvVtmin
                                                          ? pccmvVtminValue
                                                              .toInt()
                                                              .toString()
                                                          : pccmvPplateau
                                                              ? pccmvPplateauValue
                                                                  .toInt()
                                                                  .toString()
                                                              : pccmvFlow
                                                                  ? pccmvFlowValue
                                                                      .toString()
                                                                  : "",
                                  style: TextStyle(
                                    fontSize: 40,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          // pccmvFio2
                          //     ? Container()
                          //     :
                          Container(
                            width: 350,
                            child: Slider(
                              activeColor: Colors.black,
                              inactiveColor: Colors.black,
                              min: pccmvminValue.toDouble() ?? 0,
                              max: pccmvmaxValue.toDouble() ?? 0,
                              value: pccmvRR
                                  ? pccmvRRValue.toDouble()
                                  : pccmvIe
                                      ? pccmvIeValue.toDouble()
                                      : pccmvPeep
                                          ? pccmvPeepValue.toDouble()
                                          : pccmvPc
                                              ? pccmvPcValue.toDouble()
                                              : pccmvFio2
                                                  ? pccmvFio2Value.toDouble()
                                                  : pccmvVtmin
                                                      ? pccmvVtminValue
                                                          .toDouble()
                                                      : pccmvPplateau
                                                          ? pccmvPplateauValue
                                                              .toDouble()
                                                          : pccmvFlow
                                                              ? pccmvFlowValue
                                                                  .toDouble()
                                                              : "",
                              onChanged: (double value) {
                                setState(() {
                                  int maxValue = _isTab10 ? 90 : 65;
                                  int maxValuepcValue, maxValuepeepValue;
                                  maxValuepcValue = maxValue - pccmvPeepValue;
                                  if ((maxValue - pccmvPcValue) >= 30) {
                                    maxValuepeepValue = 30;
                                  } else {
                                    maxValuepeepValue = maxValue - pccmvPcValue;
                                  }
                                  if (pccmvRR == true) {
                                    setState(() {
                                      pccmvRRValue = value.toInt();
                                    });
                                  } else if (pccmvIe == true) {
                                    setState(() {
                                      pccmvIeValue = value.toInt();
                                    });
                                  } else if (pccmvPeep == true) {
                                    setState(() {
                                      if (value.toInt() >= maxValuepeepValue) {
                                        pccmvPeepValue = maxValuepeepValue;
                                      } else {
                                        pccmvPeepValue = value.toInt();
                                      }
                                    });
                                  } else if (pccmvPc == true) {
                                    setState(() {
                                      if (value.toInt() >= maxValuepcValue) {
                                        pccmvPcValue = maxValuepcValue;
                                      } else {
                                        pccmvPcValue = value.toInt();
                                      }
                                    });
                                  } else if (pccmvFio2 == true) {
                                    setState(() {
                                      pccmvFio2Value = value.toInt();
                                    });
                                  } else if (pccmvPplateau == true) {
                                    setState(() {
                                      pccmvPplateauValue = value.toInt();
                                    });
                                  } else if (pccmvFlow == true) {
                                    setState(() {
                                      pccmvFlowValue = value.toInt();
                                    });
                                  }
                                });
                              },
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(pccmvIe
                                    ? getIeData(pccmvminValue, 1)
                                    : pccmvminValue.toString()),
                                Text(
                                  pccmvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(pccmvIe
                                    ? getIeData(pccmvmaxValue, 1)
                                    : pccmvmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  vccmvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vccmvmaxValue = 60;
                    vccmvminValue = 1;
                    vccmvparameterName = "RR";
                    vccmvparameterUnits = "bpm";
                    vccmvRR = true;
                    vccmvIe = false;
                    vccmvPeep = false;
                    vccmvPcMax = false;
                    vccmvPplateau = false;
                    vccmvFio2 = false;
                    vccmvVt = false;
                    vccmvFlow = false;
                    vccmvTih = false;
                  });
                }
                // sleep(const Duration(milliseconds: 200));
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vccmvRR ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: vccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vccmvRRValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vccmvRR
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vccmvRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vccmvRRValue != null
                                    ? vccmvRRValue / 60
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vccmvmaxValue = 61;
                    vccmvminValue = 1;
                    vccmvparameterName = "I:E";
                    vccmvparameterUnits = "";
                    vccmvRR = false;
                    vccmvIe = true;
                    vccmvPeep = false;
                    vccmvPcMax = false;
                    vccmvPplateau = false;
                    vccmvFio2 = false;
                    vccmvVt = false;
                    vccmvFlow = false;
                    vccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vccmvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: vccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                getIeData(vccmvIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vccmvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vccmvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vccmvIeValue != null
                                    ? vccmvIeValue / 61
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vccmvmaxValue = _isTab10 ? 45 : 30;
                    vccmvminValue = 0;
                    vccmvparameterName = "PEEP";
                    vccmvparameterUnits = "cmH\u2082O";
                    vccmvRR = false;
                    vccmvIe = false;
                    vccmvPeep = true;
                    vccmvPcMax = false;

                    vccmvPplateau = false;
                    vccmvFio2 = false;
                    vccmvVt = false;
                    vccmvFlow = false;
                    vccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vccmvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: vccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vccmvPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vccmvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vccmvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vccmvPeepValue != null
                                    ? _isTab10
                                        ? vccmvPeepValue / 45
                                        : vccmvPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vccmvmaxValue = _isTab10 ? 2500 : 600;
                    vccmvminValue = _isTab10 ? 50 : 200;
                    vccmvparameterName = "VT";
                    vccmvparameterUnits = "mL";
                    vccmvRR = false;
                    vccmvIe = false;
                    vccmvPeep = false;
                    vccmvVt = true;
                    vccmvPcMax = false;
                    vccmvPplateau = false;
                    vccmvFio2 = false;
                    vccmvFlow = false;
                    vccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vccmvVt ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "VT",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vccmvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "mL",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: vccmvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "2500" : "600",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              _isTab10 ? "50" : "200",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vccmvVtValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vccmvVt
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vccmvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vccmvVtValue != null
                                    ? _isTab10
                                        ? vccmvVtValue / 2500
                                        : vccmvVtValue / 600
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vccmvmaxValue = 100;
                    vccmvminValue = 21;
                    vccmvparameterName = "FiO\u2082";
                    vccmvparameterUnits = "%";
                    vccmvRR = false;
                    vccmvIe = false;
                    vccmvPeep = false;
                    vccmvVt = false;
                    vccmvPcMax = false;
                    vccmvPplateau = false;
                    vccmvFio2 = true;
                    vccmvFlow = false;
                    vccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vccmvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: vccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vccmvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vccmvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vccmvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vccmvFio2Value != null
                                    ? vccmvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vccmvmaxValue = 100;
                    vccmvminValue = 0;
                    vccmvparameterName = "PC Max";
                    vccmvparameterUnits = "cmH\u2082O above PEEP";
                    vccmvRR = false;
                    vccmvIe = false;
                    vccmvPeep = false;
                    vccmvVt = false;
                    vccmvPcMax = true;
                    vccmvPplateau = false;
                    vccmvFio2 = false;
                    vccmvFlow = false;
                    vccmvTih = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vccmvPcMax ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC Max",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vccmvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: vccmvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vccmvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vccmvPcMaxValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vccmvPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vccmvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vccmvPcMaxValue != null
                                    ? vccmvPcMaxValue / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            //  InkWell(
            //   onTap: () async {
            //     if (_parameterChangeEnabled == true) {
            //       setState(() {
            //         _parameterChangeEnabled = false;
            //         vccmvmaxValue = 50;
            //         vccmvminValue = 0;
            //         vccmvparameterName = "P Plateau";
            //         vccmvparameterUnits = "L/m";
            //         vccmvRR = false;
            //         vccmvIe = false;
            //         vccmvPeep = false;
            //         vccmvVt = false;
            //         vccmvPcMax = false;
            //         vccmvPplateau = true;
            //         vccmvFio2 = false;
            //         vccmvFlow = false;
            //         vccmvTih = false;
            //       });
            //     }
            //     // sleep(const Duration(milliseconds: 200));
            //   },
            //   child: Center(
            //     child: Container(
            //        width: _isTab10 ? 156 : 146,
            //       height: _isTab10 ? 130 : 130,
            //       child: Card(
            //         elevation: 40,
            //         color:
            //             vccmvPplateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            //           padding: const EdgeInsets.all(6.0),
            //           child: Center(
            //               child: Stack(
            //             children: [
            //               Align(
            //                 alignment: Alignment.topLeft,
            //                 child: Text(
            //                   "P Plateau",
            //                   style: TextStyle(
            //                       fontSize: 15,
            //                       fontWeight: FontWeight.bold,
            //                       color: vccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.topRight,
            //                 child: Text(
            //                   "",
            //                   style: TextStyle(
            //                       fontSize: 9,
            //                       color: vccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomRight,
            //                 child: Text(
            //                   "50",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: vccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomLeft,
            //                 child: Text(
            //                   "0",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: vccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.center,
            //                 child: Padding(
            //                   padding: const EdgeInsets.only(top: 1.0),
            //                   child: Text(
            //                     vccmvPplateauValue.toString(),
            //                     style: TextStyle(
            //                         fontSize: 35,
            //                         color: vccmvPplateau
            //                             ? Color(0xFF213855)
            //                             : Color(0xFFE0E0E0)),
            //                   ),
            //                 ),
            //               ),
            //               Padding(
            //                 padding: const EdgeInsets.only(
            //                     bottom: 20.0, left: 10, right: 10),
            //                 child: Align(
            //                   alignment: Alignment.bottomCenter,
            //                   child: LinearProgressIndicator(
            //                     backgroundColor: Colors.grey,
            //                     valueColor: AlwaysStoppedAnimation<Color>(
            //                       vccmvPplateau
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0),
            //                     ),
            //                     value: vccmvPplateauValue != null
            //                         ? vccmvPplateauValue / 50
            //                         : 0,
            //                   ),
            //                 ),
            //               )
            //             ],
            //           )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
            // InkWell(
            //   onTap: () async {
            //     if (_parameterChangeEnabled == true) {
            //       setState(() {
            //         _parameterChangeEnabled = false;
            //         vccmvmaxValue = 150;
            //         vccmvminValue = 1;
            //         vccmvparameterName = "Flow";
            //         vccmvparameterUnits = "cmH\u2082O";
            //         vccmvRR = false;
            //         vccmvIe = false;
            //         vccmvPeep = false;
            //         vccmvVt = false;
            //         vccmvPcMax = false;
            //         vccmvFlow = true;
            //         vccmvFio2 = false;
            //         vccmvPplateau = false;
            //         vccmvTih = false;
            //       });
            //     }
            //   },
            //   child: Center(
            //     child: Container(
            //      width: _isTab10 ? 156 : 146,
            //       height: _isTab10 ? 130 : 130,
            //       child: Card(
            //         elevation: 40,
            //         color: vccmvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            //           padding: const EdgeInsets.all(6.0),
            //           child: Center(
            //               child: Stack(
            //             children: [
            //               Align(
            //                 alignment: Alignment.topLeft,
            //                 child: Text(
            //                   "Flow",
            //                   style: TextStyle(
            //                       fontSize: 15,
            //                       fontWeight: FontWeight.bold,
            //                       color: vccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.topRight,
            //                 child: Text(
            //                   "",
            //                   style: TextStyle(
            //                       fontSize: 9,
            //                       color: vccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomRight,
            //                 child: Text(
            //                   "150",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: vccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.bottomLeft,
            //                 child: Text(
            //                   "1",
            //                   style: TextStyle(
            //                       fontSize: 12,
            //                       color: vccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0)),
            //                 ),
            //               ),
            //               Align(
            //                 alignment: Alignment.center,
            //                 child: Padding(
            //                   padding: const EdgeInsets.only(top: 1.0),
            //                   child: Text(
            //                     vccmvFlowValue.toString(),
            //                     style: TextStyle(
            //                         fontSize: 35,
            //                         color: vccmvFlow
            //                             ? Color(0xFF213855)
            //                             : Color(0xFFE0E0E0)),
            //                   ),
            //                 ),
            //               ),
            //               Padding(
            //                 padding: const EdgeInsets.only(
            //                     bottom: 20.0, left: 10, right: 10),
            //                 child: Align(
            //                   alignment: Alignment.bottomCenter,
            //                   child: LinearProgressIndicator(
            //                     backgroundColor: Colors.grey,
            //                     valueColor: AlwaysStoppedAnimation<Color>(
            //                       vccmvFlow
            //                           ? Color(0xFF213855)
            //                           : Color(0xFFE0E0E0),
            //                     ),
            //                     value: vccmvFlowValue != null
            //                         ? vccmvFlowValue / 150
            //                         : 0,
            //                   ),
            //                 ),
            //               )
            //             ],
            //           )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
          ],
        ),
        SizedBox(width: 140),
        Column(
          children: <Widget>[
            SizedBox(height: 320),
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Assist",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        InkWell(
                          onTap: () {
                            if (_modeChangeEnabled == true) {
                              setState(() {
                                _modeChangeEnabled = false;
                                assistmodeVolumeOn = !assistmodeVolumeOn;
                                if (assistmodeVolumeOn == true) {
                                  vacvEnabled = true;
                                  vccmvEnabled = false;
                                } else {
                                  vccmvEnabled = true;
                                  vacvEnabled = false;
                                }
                              });
                            }
                          },
                          child: Card(
                              color: assistmodeVolumeOn
                                  ? Color(0xFFE0E0E0)
                                  : Colors.green,
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "Off",
                                  style: TextStyle(
                                    color: assistmodeVolumeOn
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0),
                                  ),
                                ),
                              )),
                        ),
                        SizedBox(height: 10),
                        InkWell(
                          onTap: () {
                            if (_modeChangeEnabled == true) {
                              setState(() {
                                _modeChangeEnabled = false;
                                assistmodeVolumeOn = !assistmodeVolumeOn;
                                if (assistmodeVolumeOn == true) {
                                  vacvEnabled = true;
                                  vccmvEnabled = false;
                                } else {
                                  vccmvEnabled = true;
                                  vacvEnabled = false;
                                }
                              });
                            }
                          },
                          child: Card(
                              color: assistmodeVolumeOn
                                  ? Colors.green
                                  : Color(0xFFE0E0E0),
                              child: Padding(
                                padding: const EdgeInsets.all(22.0),
                                child: Text(
                                  "On",
                                  style: TextStyle(
                                    color: assistmodeVolumeOn
                                        ? Color(0xFFE0E0E0)
                                        : Color(0xFF213855),
                                  ),
                                ),
                              )),
                        ),
                      ],
                    ),
                  ],
                )),
          ],
        ),
        SizedBox(width: 140),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (vccmvRR == true &&
                                        vccmvRRValue != vccmvminValue) {
                                      setState(() {
                                        vccmvRRValue = vccmvRRValue - 1;
                                      });
                                    } else if (vccmvIe == true &&
                                        vccmvIeValue != vccmvminValue) {
                                      setState(() {
                                        vccmvIeValue = vccmvIeValue - 1;
                                      });
                                    } else if (vccmvPeep == true &&
                                        vccmvPeepValue != vccmvminValue) {
                                      setState(() {
                                        vccmvPeepValue = vccmvPeepValue - 1;
                                        // if (vccmvPplateauValue <= vccmvPeepValue) {
                                        //   vccmvPplateauValue = vccmvPeepValue + 1;
                                        //   if (vccmvPcMaxValue <=
                                        //       vccmvPplateauValue) {
                                        //     vccmvPcMaxValue = vccmvPplateauValue + 1;
                                        //   }
                                        // }
                                      });
                                    } else if (vccmvPcMax == true &&
                                        vccmvPcMaxValue != vccmvminValue) {
                                      vccmvPcMaxValue = vccmvPcMaxValue - 1;
                                    } else if (vccmvFio2 == true &&
                                        vccmvFio2Value != vccmvminValue) {
                                      setState(() {
                                        vccmvFio2Value = vccmvFio2Value - 1;
                                      });
                                    } else if (vccmvPplateau == true &&
                                        vccmvPplateauValue != vccmvminValue) {
                                      setState(() {
                                        vccmvPplateauValue =
                                            vccmvPplateauValue - 1;
                                        // if (vccmvPplateauValue >= vccmvPcMaxValue) {
                                        //   vccmvPcMaxValue = vccmvPcMaxValue - 1;
                                        // }
                                      });
                                    } else if (vccmvVt == true &&
                                        vccmvVtValue != vccmvminValue) {
                                      setState(() {
                                        vccmvVtValue = vccmvVtValue - 1;
                                      });
                                    } else if (vccmvFlow == true &&
                                        vccmvFlowValue != vccmvminValue) {
                                      setState(() {
                                        vccmvFlowValue = vccmvFlowValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                vccmvparameterName,
                                style: TextStyle(fontSize: 36),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (vccmvRR == true &&
                                        vccmvRRValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvRRValue = vccmvRRValue + 1;
                                      });
                                    } else if (vccmvIe == true &&
                                        vccmvIeValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvIeValue = vccmvIeValue + 1;
                                      });
                                    } else if (vccmvPeep == true &&
                                        vccmvPeepValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvPeepValue = vccmvPeepValue + 1;
                                        // if (vccmvPplateauValue <= vccmvPeepValue) {
                                        //   vccmvPplateauValue = vccmvPeepValue + 1;
                                        //   if (vccmvPcMaxValue <=
                                        //       vccmvPplateauValue) {
                                        //     vccmvPcMaxValue = vccmvPplateauValue + 1;
                                        //   }
                                        // }
                                      });
                                    } else if (vccmvFio2 == true &&
                                        vccmvFio2Value != vccmvmaxValue) {
                                      setState(() {
                                        vccmvFio2Value = vccmvFio2Value + 1;
                                      });
                                    } else if (vccmvVt == true &&
                                        vccmvVtValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvVtValue = vccmvVtValue + 1;
                                      });
                                    } else if (vccmvPplateau == true &&
                                        vccmvPplateauValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvPcMaxValue =
                                            vccmvPplateauValue + 1;
                                      });
                                    } else if (vccmvPcMax == true &&
                                        vccmvPcMaxValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvPcMaxValue = vccmvPcMaxValue + 1;
                                      });
                                    } else if (vccmvFlow == true &&
                                        vccmvFlowValue != vccmvmaxValue) {
                                      setState(() {
                                        vccmvFlowValue = vccmvFlowValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  vccmvRR
                                      ? vccmvRRValue.toInt().toString()
                                      : vccmvIe
                                          ? getIeData(vccmvIeValue, 1)
                                          : vccmvPeep
                                              ? vccmvPeepValue
                                                  .toInt()
                                                  .toString()
                                              : vccmvPplateau
                                                  ? vccmvPplateauValue
                                                      .toInt()
                                                      .toString()
                                                  : vccmvFio2
                                                      ? vccmvFio2Value
                                                          .toInt()
                                                          .toString()
                                                      : vccmvPcMax
                                                          ? vccmvPcMaxValue
                                                              .toInt()
                                                              .toString()
                                                          : vccmvVt
                                                              ? vccmvVtValue
                                                                  .toInt()
                                                                  .toString()
                                                              : vccmvFlow
                                                                  ? vccmvFlowValue
                                                                      .toString()
                                                                  : "",
                                  style: TextStyle(
                                    fontSize: 40,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          // vccmvFio2
                          //     ? Container()
                          //     :
                          Container(
                            width: 350,
                            child: Slider(
                              min: vccmvminValue.toDouble() ?? 0,
                              max: vccmvmaxValue.toDouble() ?? 0,
                              value: vccmvRR
                                  ? vccmvRRValue.toDouble()
                                  : vccmvIe
                                      ? vccmvIeValue.toDouble()
                                      : vccmvPeep
                                          ? vccmvPeepValue.toDouble()
                                          : vccmvPcMax
                                              ? vccmvPcMaxValue.toDouble()
                                              : vccmvFio2
                                                  ? vccmvFio2Value.toDouble()
                                                  : vccmvVt
                                                      ? vccmvVtValue.toDouble()
                                                      : vccmvPplateau
                                                          ? vccmvPplateauValue
                                                              .toDouble()
                                                          : vccmvFlow
                                                              ? vccmvFlowValue
                                                                  .toDouble()
                                                              : "",
                              onChanged: (double value) {
                                setState(() {
                                  if (vccmvRR == true) {
                                    setState(() {
                                      vccmvRRValue = value.toInt();
                                    });
                                  } else if (vccmvIe == true) {
                                    setState(() {
                                      vccmvIeValue = value.toInt();
                                    });
                                  } else if (vccmvPeep == true) {
                                    setState(() {
                                      vccmvPeepValue = value.toInt();
                                      // if (vccmvPplateauValue <= vccmvPeepValue) {
                                      //   vccmvPplateauValue = value.toInt() + 1;
                                      // if (vccmvPcMaxValue <= vccmvPplateauValue) {
                                      //   vccmvPcMaxValue = value.toInt() + 1;
                                      // }
                                      // }
                                    });
                                  } else if (vccmvFio2 == true) {
                                    setState(() {
                                      vccmvFio2Value = value.toInt();
                                    });
                                  } else if (vccmvVt == true) {
                                    setState(() {
                                      vccmvVtValue = value.toInt();
                                    });
                                  } else if (vccmvPplateau == true) {
                                    // if (value.toInt() < 90) {
                                    vccmvPplateauValue = value.toInt();
                                    //   vccmvPcMaxValue = vccmvPplateauValue + 1;
                                    // }
                                  } else if (vccmvPcMax == true) {
                                    setState(() {
                                      // if (value.toInt() <= vccmvPplateauValue + 1) {
                                      //   vccmvPcMaxValue = vccmvPplateauValue + 1;
                                      // } else {
                                      vccmvPcMaxValue = value.toInt();
                                      // }
                                    });
                                  } else if (vccmvFlow == true) {
                                    setState(() {
                                      vccmvFlowValue = value.toInt();
                                    });
                                  }
                                });
                              },
                            ),
                          ),
                          SizedBox(
                            height: 1,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(vccmvIe
                                    ? getIeData(vccmvIeValue, 1)
                                    : vccmvminValue.toString()),
                                Text(
                                  vccmvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(vccmvIe
                                    ? getIeData(vccmvmaxValue, 1)
                                    : vccmvmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  vsimvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = 30;
                    vsimvminValue = 1;
                    vsimvparameterName = "RR";
                    vsimvparameterUnits = "bpm";
                    vsimvItrig = false;
                    vsimvRr = true;
                    vsimvIe = false;
                    vsimvPeep = false;
                    vsimvVt = false;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vsimvRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvRrValue != null
                                    ? vsimvRrValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = 61;
                    vsimvminValue = 1;
                    vsimvparameterName = "I:E";
                    vsimvparameterUnits = "";
                    vsimvItrig = false;
                    vsimvRr = false;
                    vsimvIe = true;
                    vsimvPeep = false;
                    vsimvVt = false;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                getIeData(vsimvIeValue, 1),
                                // ,
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvIeValue != null
                                    ? vsimvIeValue / 61
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = _isTab10 ? 45 : 30;
                    vsimvminValue = 0;
                    vsimvparameterName = "PEEP";
                    vsimvparameterUnits = "cmH\u2082O";
                    vsimvItrig = false;
                    vsimvRr = false;
                    vsimvIe = false;
                    vsimvPeep = true;
                    vsimvVt = false;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vsimvPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvPeepValue != null
                                    ? _isTab10
                                        ? vsimvPeepValue / 45
                                        : vsimvPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = _isTab10 ? 2500 : 600;
                    vsimvminValue = _isTab10 ? 50 : 200;
                    vsimvparameterName = "Vt";
                    vsimvparameterUnits = "mL";
                    vsimvItrig = false;
                    vsimvRr = false;
                    vsimvIe = false;
                    vsimvPeep = false;
                    vsimvVt = true;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvVt ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Vt",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "mL",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "2500" : "600",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              _isTab10 ? "50" : "200",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vsimvVtValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvVt
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: _isTab10
                                    ? vsimvVtValue / 2500
                                    : vsimvVtValue / 600,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = 100;
                    vsimvminValue = 21;
                    vsimvparameterName = "FiO\u2082";
                    vsimvparameterUnits = "%";
                    vsimvItrig = false;
                    vsimvRr = false;
                    vsimvIe = false;
                    vsimvPeep = false;
                    vsimvVt = false;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = true;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vsimvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvFio2Value != null
                                    ? vsimvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = 10;
                    vsimvminValue = 1;
                    vsimvparameterName = "I Trig";
                    vsimvparameterUnits = "cmH\u2082O Below PEEP";
                    vsimvItrig = true;
                    vsimvRr = false;
                    vsimvIe = false;
                    vsimvPeep = false;
                    vsimvVt = false;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig
                                    ? "-$vsimvItrigValue"
                                    : "$vsimvItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvItrigValue != null
                                    ? vsimvItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = 100;
                    vsimvminValue = 0;
                    vsimvparameterName = "PC Max";
                    vsimvparameterUnits = "cmH\u2082O above PEEP";
                    vsimvItrig = false;
                    vsimvRr = false;
                    vsimvIe = false;
                    vsimvPeep = false;
                    vsimvVt = false;
                    vsimvPlateau = false;
                    vsimvPcMax = true;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                    vsimvPs = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvPcMax ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC Max",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vsimvPcMaxValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvPcMaxValue != null
                                    ? vsimvPcMaxValue / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vsimvmaxValue = 65;
                    vsimvminValue = 0;
                    vsimvparameterName = "PS";
                    vsimvparameterUnits = "cmH\u2082O above PEEP";
                    vsimvItrig = false;
                    vsimvRr = false;
                    vsimvIe = false;
                    vsimvPeep = false;
                    vsimvVt = false;
                    vsimvPs = true;
                    vsimvPlateau = false;
                    vsimvPcMax = false;
                    vsimvFio2 = false;
                    vsimvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vsimvPs ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PS",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vsimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "65",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vsimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vsimvPsValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vsimvPs
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vsimvPs
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vsimvPsValue != null
                                    ? vsimvPsValue / 65
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          children: <Widget>[
            // InkWell(
            //     onTap: () {
            //        if (_parameterChangeEnabled == true) {
            //         setState(() {
            //           _parameterChangeEnabled = false;
            //         vsimvmaxValue = 50;
            //         vsimvminValue = 0;
            //         vsimvparameterName = "Plateau";
            //         vsimvparameterUnits = "";
            //         vsimvItrig = false;
            //         vsimvRr = false;
            //         vsimvIe = false;
            //         vsimvPeep = false;
            //         vsimvVt = false;
            //         vsimvPlateau = true;
            //         vsimvPcMax = false;
            //         vsimvFio2 = false;
            //         vsimvFlow = false;
            //       });
            //     }
            //     },
            //     child: Center(
            //       child: Container(
            //        width: _isTab10 ? 156 : 146,
            //         height: _isTab10 ? 130 : 130,
            //         child: Card(
            //           elevation: 40,
            //           color:
            //     vsimvPlateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //           child: Padding(
            //   padding: const EdgeInsets.all(6.0),
            //   child: Center(
            //       child: Stack(
            //     children: [
            //       Align(
            //         alignment: Alignment.topLeft,
            //         child: Text(
            //           "Flow",
            //           style: TextStyle(
            //     fontSize: 15,
            //     fontWeight: FontWeight.bold,
            //     color: vsimvPlateau
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.topRight,
            //         child: Text(
            //           "",
            //           style: TextStyle(
            //     fontSize: 12,
            //     color: vsimvPlateau
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.bottomRight,
            //         child: Text(
            //           "50",
            //           style: TextStyle(
            //     fontSize: 12,
            //     color: vsimvPlateau
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.bottomLeft,
            //         child: Text(
            //           "0",
            //           style: TextStyle(
            //     fontSize: 12,
            //     color: vsimvPlateau
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.center,
            //         child: Padding(
            //           padding: const EdgeInsets.only(top: 1.0),
            //           child: Text(
            //   vsimvPlateauValue.toString(),
            //   style: TextStyle(
            //       fontSize: 35,
            //       color: vsimvPlateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //       ),
            //       Padding(
            //         padding: const EdgeInsets.only(
            //   bottom: 20.0, left: 10, right: 10),
            //         child: Align(
            //           alignment: Alignment.bottomCenter,
            //           child: LinearProgressIndicator(
            //   backgroundColor: Colors.grey,
            //   valueColor: AlwaysStoppedAnimation<Color>(
            //     vsimvPlateau
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0),
            //   ),
            //   value: vsimvPlateauValue != null
            //       ? vsimvPlateauValue / 50
            //       : 0,
            //           ),
            //         ),
            //       )
            //     ],
            //   )),
            //           ),
            //         ),
            //       ),
            //     ),
            //   ),
            //   InkWell(
            //     onTap: () {
            //        if (_parameterChangeEnabled == true) {
            //         setState(() {
            //           _parameterChangeEnabled = false;
            //         vsimvmaxValue = 150;
            //         vsimvminValue = 1;
            //         vsimvparameterName = "Flow";
            //         vsimvparameterUnits = "";
            //         vsimvItrig = false;
            //         vsimvRr = false;
            //         vsimvIe = false;
            //         vsimvPeep = false;
            //         vsimvVt = false;
            //         vsimvPlateau = false;
            //         vsimvPcMax = false;
            //         vsimvFio2 = false;
            //         vsimvFlow = true;
            //       });
            //     }
            //     },
            //     child: Center(
            //       child: Container(
            //         width: _isTab10 ? 156 : 146,
            //         height: _isTab10 ? 130 : 130,
            //         child: Card(
            //           elevation: 40,
            //           color:
            //     vsimvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //           child: Padding(
            //   padding: const EdgeInsets.all(6.0),
            //   child: Center(
            //       child: Stack(
            //     children: [
            //       Align(
            //         alignment: Alignment.topLeft,
            //         child: Text(
            //           "Flow",
            //           style: TextStyle(
            //     fontSize: 15,
            //     fontWeight: FontWeight.bold,
            //     color: vsimvFlow
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.topRight,
            //         child: Text(
            //           "",
            //           style: TextStyle(
            //     fontSize: 12,
            //     color: vsimvFlow
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.bottomRight,
            //         child: Text(
            //           "150",
            //           style: TextStyle(
            //     fontSize: 12,
            //     color: vsimvFlow
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.bottomLeft,
            //         child: Text(
            //           "1",
            //           style: TextStyle(
            //     fontSize: 12,
            //     color: vsimvFlow
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //       Align(
            //         alignment: Alignment.center,
            //         child: Padding(
            //           padding: const EdgeInsets.only(top: 1.0),
            //           child: Text(
            //   vsimvFlowValue.toString(),
            //   style: TextStyle(
            //       fontSize: 35,
            //       color: vsimvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //       ),
            //       Padding(
            //         padding: const EdgeInsets.only(
            //   bottom: 20.0, left: 10, right: 10),
            //         child: Align(
            //           alignment: Alignment.bottomCenter,
            //           child: LinearProgressIndicator(
            //   backgroundColor: Colors.grey,
            //   valueColor: AlwaysStoppedAnimation<Color>(
            //     vsimvFlow
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0),
            //   ),
            //   value: vsimvFlowValue != null
            //       ? vsimvFlowValue / 150
            //       : 0,
            //           ),
            //         ),
            //       )
            //     ],
            //   )),
            //           ),
            //         ),
            //       ),
            //     ),
            //   ),
            Container(
              width: _isTab10 ? 156 : 146,
            )
          ],
        ),
        SizedBox(width: _isTab10 ? 60 : 140),
        _isTab10
            ? Container(
                margin: EdgeInsets.only(top: 160, bottom: 20),
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.white),
                height: 140,
                width: 245,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 20),
                    Center(
                        child: Text("Patient Trigger",
                            style:
                                TextStyle(color: Colors.black, fontSize: 20))),
                    Container(
                        padding: EdgeInsets.only(top: 20),
                        width: 255,
                        child: Row(
                          children: [
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Colors.green : Color(0xFFE0E0E0),
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "  Pressure  ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFFE0E0E0)
                                            : Color(0xFF213855),
                                      ),
                                    ),
                                  )),
                            ),
                            InkWell(
                              onTap: () {
                                setState(() {
                                  pItrig = !pItrig;
                                });
                              },
                              child: Card(
                                  color:
                                      pItrig ? Color(0xFFE0E0E0) : Colors.green,
                                  child: Padding(
                                    padding: const EdgeInsets.all(22.0),
                                    child: Text(
                                      "      Flow      ",
                                      style: TextStyle(
                                        color: pItrig
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0),
                                      ),
                                    ),
                                  )),
                            ),
                          ],
                        )),
                  ],
                ))
            : Container(),
        SizedBox(width: _isTab10 ? 60 : 0),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (vsimvItrig == true &&
                                        vsimvItrigValue != vsimvminValue) {
                                      setState(() {
                                        vsimvItrigValue = vsimvItrigValue - 1;
                                      });
                                    }
                                    // else if (vsimvPeep == true &&
                                    //     vsimvPeepValue != vsimvminValue) {
                                    //   setState(() {
                                    //     vsimvPeepValue = vsimvPeepValue - 1;
                                    //     if (vsimvItrigValue > 1 &&
                                    //         vsimvItrigValue > vsimvPeepValue) {
                                    //       vsimvItrigValue = vsimvPeepValue;
                                    //     }
                                    //   });
                                    // }
                                    else if (vsimvPeep == true &&
                                        vsimvPeepValue != vsimvminValue) {
                                      setState(() {
                                        vsimvPeepValue = vsimvPeepValue - 1;
                                      });
                                    } else if (vsimvRr == true &&
                                        vsimvRrValue != vsimvminValue) {
                                      setState(() {
                                        vsimvRrValue = vsimvRrValue - 1;
                                      });
                                    } else if (vsimvIe == true &&
                                        vsimvIeValue != vsimvminValue) {
                                      setState(() {
                                        vsimvIeValue = vsimvIeValue - 1;
                                      });
                                    } else if (vsimvVt == true &&
                                        vsimvVtValue != vsimvminValue) {
                                      setState(() {
                                        vsimvVtValue = vsimvVtValue - 1;
                                      });
                                    } else if (vsimvPlateau == true &&
                                        vsimvPlateauValue != vsimvminValue) {
                                      setState(() {
                                        vsimvPlateauValue =
                                            vsimvPlateauValue - 1;
                                        // if (vsimvPlateauValue >= vsimvPcMaxValue) {
                                        //   vsimvPcMaxValue = vsimvPcMaxValue - 1;
                                        // }
                                      });
                                    } else if (vsimvPcMax == true &&
                                        vsimvPcMaxValue != vsimvminValue) {
                                      vsimvPcMaxValue = vsimvPcMaxValue - 1;
                                    } else if (vsimvFio2 == true &&
                                        vsimvFio2Value != vsimvminValue) {
                                      setState(() {
                                        vsimvFio2Value = vsimvFio2Value - 1;
                                      });
                                    } else if (vsimvFlow == true &&
                                        vsimvFlowValue != vsimvminValue) {
                                      setState(() {
                                        vsimvFlowValue = vsimvFlowValue - 1;
                                      });
                                    } else if (vsimvPs == true &&
                                        vsimvPsValue != vsimvminValue) {
                                      setState(() {
                                        vsimvPsValue = vsimvPsValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                vsimvparameterName,
                                style: TextStyle(
                                    fontSize: 36,
                                    fontWeight: FontWeight.normal),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  int vmaxValuepsValue, vmaxValuepeepValue;
                                  setState(() {
                                    vmaxValuepsValue = 65 - vsimvPeepValue;
                                    if ((65.0 - vsimvPsValue) >= 30) {
                                      vmaxValuepeepValue = 30;
                                    } else {
                                      vmaxValuepeepValue = 65 - vsimvPsValue;
                                    }
                                    // if (vsimvItrig == true &&
                                    //     vsimvItrigValue != vsimvmaxValue) {
                                    //   setState(() {
                                    //     vsimvItrigValue = vsimvItrigValue + 1;
                                    //     if (vsimvPeepValue <= vsimvItrigValue) {
                                    //       if (vsimvPeepValue == 0) {
                                    //         vsimvItrigValue = 1;
                                    //       } else {
                                    //         vsimvItrigValue = vsimvPeepValue;
                                    //       }
                                    //     }
                                    //   });
                                    // }
                                    if (vsimvItrig == true &&
                                        vsimvItrigValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvItrigValue = vsimvItrigValue + 1;
                                      });
                                    } else if (vsimvPeep == true &&
                                        vsimvPeepValue != vsimvmaxValue &&
                                        vsimvPeepValue < vmaxValuepeepValue) {
                                      setState(() {
                                        vsimvPeepValue = vsimvPeepValue + 1;
                                      });
                                    } else if (vsimvRr == true &&
                                        vsimvRrValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvRrValue = vsimvRrValue + 1;
                                      });
                                    } else if (vsimvIe == true &&
                                        vsimvIeValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvIeValue = vsimvIeValue + 1;
                                      });
                                    } else if (vsimvVt == true &&
                                        vsimvVtValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvVtValue = vsimvVtValue + 1;
                                      });
                                    } else if (vsimvPlateau == true &&
                                        vsimvPlateauValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvPlateauValue =
                                            vsimvPlateauValue + 1;
                                      });
                                    } else if (vsimvPcMax == true &&
                                        vsimvPcMaxValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvPcMaxValue = vsimvPcMaxValue + 1;
                                      });
                                    } else if (vsimvFio2 == true &&
                                        vsimvFio2Value != vsimvmaxValue) {
                                      setState(() {
                                        vsimvFio2Value = vsimvFio2Value + 1;
                                      });
                                    } else if (vsimvFlow == true &&
                                        vsimvFlowValue != vsimvmaxValue) {
                                      setState(() {
                                        vsimvFlowValue = vsimvFlowValue + 1;
                                      });
                                    } else if (vsimvPs == true &&
                                        vsimvPsValue != vsimvmaxValue &&
                                        vsimvPsValue < vmaxValuepsValue) {
                                      setState(() {
                                        vsimvPsValue = vsimvPsValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  vsimvItrig
                                      ? pItrig
                                          ? "-$vsimvItrigValue"
                                          : "$vsimvItrigValue"
                                      : vsimvPeep
                                          ? vsimvPeepValue.toInt().toString()
                                          : vsimvRr
                                              ? vsimvRrValue.toInt().toString()
                                              : vsimvIe
                                                  ? getIeData(vsimvIeValue, 1)
                                                      .toString()
                                                  : vsimvVt
                                                      ? vsimvVtValue
                                                          .toInt()
                                                          .toString()
                                                      : vsimvPlateau
                                                          ? vsimvPlateauValue
                                                              .toInt()
                                                              .toString()
                                                          : vsimvPcMax
                                                              ? vsimvPcMaxValue
                                                                  .toInt()
                                                                  .toString()
                                                              : vsimvFio2
                                                                  ? vsimvFio2Value
                                                                      .toInt()
                                                                      .toString()
                                                                  : vsimvFlow
                                                                      ? vsimvFlowValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : vsimvPs
                                                                          ? vsimvPsValue
                                                                              .toInt()
                                                                              .toString()
                                                                          : "",
                                  style: TextStyle(
                                      fontSize: 40,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          Container(
                              width: 350,
                              child: Slider(
                                min: vsimvminValue.toDouble() ?? 0,
                                max: vsimvmaxValue.toDouble(),
                                onChanged: (double value) {
                                  int vmaxValuepsValue, vmaxValuepeepValue;
                                  vmaxValuepsValue = 65 - vsimvPeepValue;
                                  if ((65.0 - vsimvPsValue) >= 30) {
                                    vmaxValuepeepValue = 30;
                                  } else {
                                    vmaxValuepeepValue = 65 - vsimvPsValue;
                                  }
                                  if (vsimvItrig == true &&
                                      vsimvItrigValue != 10) {
                                    setState(() {
                                      vsimvItrigValue = value.toInt();
                                    });
                                  } else if (vsimvPeep == true) {
                                    setState(() {
                                      if (value.toInt() >= vmaxValuepeepValue) {
                                        vsimvPeepValue = vmaxValuepeepValue;
                                      } else {
                                        vsimvPeepValue = value.toInt();
                                      }
                                    });
                                  } else if (vsimvRr == true) {
                                    setState(() {
                                      vsimvRrValue = value.toInt();
                                    });
                                  } else if (vsimvIe == true) {
                                    setState(() {
                                      vsimvIeValue = value.toInt();
                                    });
                                  } else if (vsimvVt == true) {
                                    setState(() {
                                      vsimvVtValue = value.toInt();
                                    });
                                  } else if (vsimvPlateau == true) {
                                    vsimvPlateauValue = value.toInt();
                                  } else if (vsimvPcMax == true) {
                                    setState(() {
                                      vsimvPcMaxValue = value.toInt();
                                    });
                                  } else if (vsimvFio2 == true) {
                                    setState(() {
                                      vsimvFio2Value = value.toInt();
                                    });
                                  } else if (vsimvFlow == true) {
                                    setState(() {
                                      vsimvFlowValue = value.toInt();
                                    });
                                  } else if (vsimvPs == true) {
                                    setState(() {
                                      if (value.toInt() >= vmaxValuepsValue) {
                                        vsimvPsValue = vmaxValuepsValue;
                                      } else {
                                        vsimvPsValue = value.toInt();
                                      }
                                    });
                                  }
                                },
                                value: vsimvItrig
                                    ? vsimvItrigValue.toDouble()
                                    : vsimvPeep
                                        ? vsimvPeepValue.toDouble()
                                        : vsimvRr
                                            ? vsimvRrValue.toDouble()
                                            : vsimvIe
                                                ? vsimvIeValue.toDouble()
                                                : vsimvVt
                                                    ? vsimvVtValue.toDouble()
                                                    : vsimvPlateau
                                                        ? vsimvPlateauValue
                                                            .toDouble()
                                                        : vsimvPcMax
                                                            ? vsimvPcMaxValue
                                                                .toDouble()
                                                            : vsimvFio2
                                                                ? vsimvFio2Value
                                                                    .toDouble()
                                                                : vsimvFlow
                                                                    ? vsimvFlowValue
                                                                        .toDouble()
                                                                    : vsimvPs
                                                                        ? vsimvPsValue
                                                                            .toDouble()
                                                                        : "",
                              )),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(vsimvIe
                                    ? getIeData(vsimvminValue, 1)
                                    : vsimvItrig
                                        ? pItrig
                                            ? "-$vsimvminValue"
                                            : "$vsimvminValue"
                                        : vsimvminValue.toString()),
                                Text(
                                  vsimvItrig
                                      ? pItrig ? vsimvparameterUnits : "lpm"
                                      : vsimvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(vsimvIe
                                    ? getIeData(vsimvmaxValue, 1)
                                    : vsimvItrig
                                        ? pItrig
                                            ? "-$vsimvmaxValue"
                                            : "$vsimvmaxValue"
                                        : vsimvmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  vacvData() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = 60;
                    vacvminValue = 1;
                    vacvparameterName = "RR";
                    vacvparameterUnits = "bpm";
                    vacvItrig = false;
                    vacvRr = true;
                    vacvIe = false;
                    vacvPeep = false;
                    vacvVt = false;
                    vacvPplateau = false;
                    vacvPcMax = false;
                    vacvFio2 = false;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvRr ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "60",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vacvRrValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvRr
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvRr
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value:
                                    vacvRrValue != null ? vacvRrValue / 60 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = 61;
                    vacvminValue = 1;
                    vacvparameterName = "I:E";
                    vacvparameterUnits = "";
                    vacvItrig = false;
                    vacvRr = false;
                    vacvIe = true;
                    vacvPeep = false;
                    vacvVt = false;
                    vacvPplateau = false;
                    vacvPcMax = false;
                    vacvFio2 = false;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvIe ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I:E",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "1:4.0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "4.0:1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                // vacvIeValue,
                                getIeData(vacvIeValue, 1),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvIe
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvIe
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value:
                                    vacvIeValue != null ? vacvIeValue / 61 : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = _isTab10 ? 45 : 30;
                    vacvminValue = 0;
                    vacvparameterName = "PEEP";
                    vacvparameterUnits = "cmH\u2082O";
                    vacvItrig = false;
                    vacvRr = false;
                    vacvIe = false;
                    vacvPeep = true;
                    vacvVt = false;
                    vacvPplateau = false;
                    vacvPcMax = false;
                    vacvFio2 = false;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvPeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "45" : "30",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vacvPeepValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvPeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvPeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vacvPeepValue != null
                                    ? _isTab10
                                        ? vacvPeepValue / 45
                                        : vacvPeepValue / 30
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = _isTab10 ? 2500 : 600;
                    vacvminValue = _isTab10 ? 50 : 200;
                    vacvparameterName = "Vt";
                    vacvparameterUnits = "mL";
                    vacvItrig = false;
                    vacvRr = false;
                    vacvIe = false;
                    vacvPeep = false;
                    vacvVt = true;
                    vacvPplateau = false;
                    vacvPcMax = false;
                    vacvFio2 = false;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvVt ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Vt",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "mL",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "2500" : "600",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              _isTab10 ? "50" : "200",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vacvVtValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvVt
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvVt
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vacvVtValue != null
                                    ? _isTab10
                                        ? vacvVtValue / 2500
                                        : vacvVtValue / 600
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = 100;
                    vacvminValue = 21;
                    vacvparameterName = "FiO\u2082";
                    vacvparameterUnits = "%";
                    vacvItrig = false;
                    vacvRr = false;
                    vacvIe = false;
                    vacvPeep = false;
                    vacvVt = false;
                    vacvPplateau = false;
                    vacvPcMax = false;
                    vacvFio2 = true;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "FiO\u2082",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "%",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "21",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vacvFio2Value.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvFio2
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvFio2
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vacvFio2Value != null
                                    ? vacvFio2Value / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = 10;
                    vacvminValue = 1;
                    vacvparameterName = "I Trig";
                    vacvparameterUnits = "cmH\u2082O Below PEEP";
                    vacvItrig = true;
                    vacvRr = false;
                    vacvIe = false;
                    vacvPeep = false;
                    vacvVt = false;
                    vacvPplateau = false;
                    vacvPcMax = false;
                    vacvFio2 = false;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvItrig ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "I Trig",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              pItrig ? "cmH\u2082O" : "lpm",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              pItrig ? "-10" : "10",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              pItrig ? "-1" : "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                pItrig ? "-$vacvItrigValue" : "$vacvItrigValue",
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvItrig
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvItrig
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vacvItrigValue != null
                                    ? vacvItrigValue / 10
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                if (_parameterChangeEnabled == true) {
                  setState(() {
                    _parameterChangeEnabled = false;
                    vacvmaxValue = 100;
                    vacvminValue = 0;
                    vacvparameterName = "PC Max";
                    vacvparameterUnits = "cmH\u2082O above PEEP";
                    vacvItrig = false;
                    vacvRr = false;
                    vacvIe = false;
                    vacvPeep = false;
                    vacvVt = false;
                    vacvPplateau = false;
                    vacvPcMax = true;
                    vacvFio2 = false;
                    vacvFlow = false;
                  });
                }
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 156 : 146,
                  height: _isTab10 ? 130 : 130,
                  child: Card(
                    elevation: 40,
                    color: vacvPcMax ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PC Max",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: vacvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: vacvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                vacvPcMaxValue.toString(),
                                style: TextStyle(
                                    fontSize: 35,
                                    color: vacvPcMax
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                bottom: 20.0, left: 10, right: 10),
                            child: Align(
                              alignment: Alignment.bottomCenter,
                              child: LinearProgressIndicator(
                                backgroundColor: Colors.grey,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                  vacvPcMax
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0),
                                ),
                                value: vacvPcMaxValue != null
                                    ? vacvPcMaxValue / 100
                                    : 0,
                              ),
                            ),
                          )
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),

            //     InkWell(
            //       onTap: () {
            //         if (_parameterChangeEnabled == true) {
            //           setState(() {
            //             _parameterChangeEnabled = false;
            //           vacvmaxValue = 50;
            //           vacvminValue = 0;
            //           vacvparameterName = "Plateau";
            //           vacvparameterUnits = "L/m";
            //           vacvItrig = false;
            //           vacvRr = false;
            //           vacvIe = false;
            //           vacvPeep = false;
            //           vacvVt = false;
            //           vacvPplateau = true;
            //           vacvPcMax = false;
            //           vacvFio2 = false;
            //           vacvFlow = false;
            //         });
            //       }
            //       },
            //       child: Center(
            //         child: Container(
            //             width: _isTab10 ? 156 : 146,
            //           height: _isTab10 ? 130 : 130,
            //           child: Card(
            //             elevation: 40,
            //             color: vacvPplateau ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //             child: Padding(
            //     padding: const EdgeInsets.all(6.0),
            //     child: Center(
            //         child: Stack(
            //       children: [
            //         Align(
            //           alignment: Alignment.topLeft,
            //           child: Text(
            //             "Plateau",
            //             style: TextStyle(
            //       fontSize: 15,
            //       fontWeight: FontWeight.bold,
            //       color: vacvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.topRight,
            //           child: Text(
            //             "L/m",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: vacvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomRight,
            //           child: Text(
            //             "50",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: vacvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomLeft,
            //           child: Text(
            //             "0",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: vacvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.center,
            //           child: Padding(
            //             padding: const EdgeInsets.only(top: 1.0),
            //             child: Text(
            //     vacvPplateauValue.toString(),
            //     style: TextStyle(
            //         fontSize: 35,
            //         color: vacvPplateau
            //             ? Color(0xFF213855)
            //             : Color(0xFFE0E0E0)),
            //             ),
            //           ),
            //         ),
            //         Padding(
            //           padding: const EdgeInsets.only(
            //     bottom: 20.0, left: 10, right: 10),
            //           child: Align(
            //             alignment: Alignment.bottomCenter,
            //             child: LinearProgressIndicator(
            //     backgroundColor: Colors.grey,
            //     valueColor: AlwaysStoppedAnimation<Color>(
            //       vacvPplateau
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0),
            //     ),
            //     value: vacvPplateauValue != null
            //         ? vacvPplateauValue / 50
            //         : 0,
            //             ),
            //           ),
            //         )
            //       ],
            //     )),
            //             ),
            //           ),
            //         ),
            //       ),
            //     ),
          ],
        ),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            //     InkWell(
            //       onTap: () {
            //        if (_parameterChangeEnabled == true) {
            //           setState(() {
            //             _parameterChangeEnabled = false;
            //           vacvmaxValue = 150;
            //           vacvminValue = 1;
            //           vacvparameterName = "Flow";
            //           vacvparameterUnits = "";
            //           vacvItrig = false;
            //           vacvRr = false;
            //           vacvIe = false;
            //           vacvPeep = false;
            //           vacvVt = false;
            //           vacvPplateau = false;
            //           vacvPcMax = false;
            //           vacvFio2 = false;
            //           vacvFlow = true;
            //         });
            //       }
            //       },
            //       child: Center(
            //         child: Container(
            //             width: _isTab10 ? 156 : 146,
            //           height: _isTab10 ? 130 : 130,
            //           child: Card(
            //             elevation: 40,
            //             color: vacvFlow ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //             child: Padding(
            //     padding: const EdgeInsets.all(6.0),
            //     child: Center(
            //         child: Stack(
            //       children: [
            //         Align(
            //           alignment: Alignment.topLeft,
            //           child: Text(
            //             "Flow",
            //             style: TextStyle(
            //       fontSize: 15,
            //       fontWeight: FontWeight.bold,
            //       color: vacvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.topRight,
            //           child: Text(
            //             "",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: vacvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomRight,
            //           child: Text(
            //             "150",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: vacvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.bottomLeft,
            //           child: Text(
            //             "1",
            //             style: TextStyle(
            //       fontSize: 12,
            //       color: vacvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0)),
            //           ),
            //         ),
            //         Align(
            //           alignment: Alignment.center,
            //           child: Padding(
            //             padding: const EdgeInsets.only(top: 1.0),
            //             child: Text(
            //     vacvFlowValue.toString(),
            //     style: TextStyle(
            //         fontSize: 35,
            //         color: vacvFlow
            //             ? Color(0xFF213855)
            //             : Color(0xFFE0E0E0)),
            //             ),
            //           ),
            //         ),
            //         Padding(
            //           padding: const EdgeInsets.only(
            //     bottom: 20.0, left: 10, right: 10),
            //           child: Align(
            //             alignment: Alignment.bottomCenter,
            //             child: LinearProgressIndicator(
            //     backgroundColor: Colors.grey,
            //     valueColor: AlwaysStoppedAnimation<Color>(
            //       vacvFlow
            //           ? Color(0xFF213855)
            //           : Color(0xFFE0E0E0),
            //     ),
            //     value: vacvFlowValue != null
            //         ? vacvFlowValue / 150
            //         : 0,
            //             ),
            //           ),
            //         )
            //       ],
            //     )),
            //             ),
            //           ),
            //         ),
            //       ),
            //     ),
            Container(
              width: _isTab10 ? 156 : 146,
              height: _isTab10 ? 130 : 130,
            ),
          ],
        ),
        SizedBox(width: 50),
        _isTab10
            ? Column(
                children: <Widget>[
                  _isTab10
                      ? Container(
                          margin: EdgeInsets.only(top: 160, bottom: 20),
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Colors.white),
                          height: 140,
                          width: 245,
                          child: Column(
                            children: <Widget>[
                              SizedBox(height: 20),
                              Center(
                                  child: Text("Patient Trigger",
                                      style: TextStyle(
                                          color: Colors.black, fontSize: 20))),
                              Container(
                                  padding: EdgeInsets.only(top: 20),
                                  width: 255,
                                  child: Row(
                                    children: [
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            pItrig = !pItrig;
                                          });
                                        },
                                        child: Card(
                                            color: pItrig
                                                ? Colors.green
                                                : Color(0xFFE0E0E0),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(22.0),
                                              child: Text(
                                                "  Pressure  ",
                                                style: TextStyle(
                                                  color: pItrig
                                                      ? Color(0xFFE0E0E0)
                                                      : Color(0xFF213855),
                                                ),
                                              ),
                                            )),
                                      ),
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            pItrig = !pItrig;
                                          });
                                        },
                                        child: Card(
                                            color: pItrig
                                                ? Color(0xFFE0E0E0)
                                                : Colors.green,
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(22.0),
                                              child: Text(
                                                "      Flow      ",
                                                style: TextStyle(
                                                  color: pItrig
                                                      ? Color(0xFF213855)
                                                      : Color(0xFFE0E0E0),
                                                ),
                                              ),
                                            )),
                                      ),
                                    ],
                                  )),
                            ],
                          ))
                      : Container(),
                  Container(
                      decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          color: Colors.white),
                      height: 140,
                      width: 245,
                      child: Column(
                        children: <Widget>[
                          SizedBox(height: 20),
                          Center(
                              child: Text("Assist",
                                  style: TextStyle(
                                      color: Colors.black, fontSize: 20))),
                          SizedBox(height: 20),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              InkWell(
                                onTap: () {
                                  if (_modeChangeEnabled == true) {
                                    setState(() {
                                      _modeChangeEnabled = false;
                                      assistmodeVolumeOn = !assistmodeVolumeOn;
                                      if (assistmodeVolumeOn == true) {
                                        vacvEnabled = true;
                                        vccmvEnabled = false;
                                      } else {
                                        vccmvEnabled = true;
                                        vacvEnabled = false;
                                      }
                                    });
                                  }
                                },
                                child: Card(
                                    color: assistmodeVolumeOn
                                        ? Color(0xFFE0E0E0)
                                        : Color(0xFF213855),
                                    child: Padding(
                                      padding: const EdgeInsets.all(22.0),
                                      child: Text(
                                        "Off",
                                        style: TextStyle(
                                          color: assistmodeVolumeOn
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0),
                                        ),
                                      ),
                                    )),
                              ),
                              SizedBox(height: 10),
                              InkWell(
                                onTap: () {
                                  if (_modeChangeEnabled == true) {
                                    setState(() {
                                      _modeChangeEnabled = false;
                                      assistmodeVolumeOn = !assistmodeVolumeOn;
                                      if (assistmodeVolumeOn == true) {
                                        vacvEnabled = true;
                                        vccmvEnabled = false;
                                      } else {
                                        vccmvEnabled = true;
                                        vacvEnabled = false;
                                      }
                                    });
                                  }
                                },
                                child: Card(
                                    color: assistmodeVolumeOn
                                        ? Colors.green
                                        : Color(0xFFE0E0E0),
                                    child: Padding(
                                      padding: const EdgeInsets.all(22.0),
                                      child: Text(
                                        "On",
                                        style: TextStyle(
                                          color: assistmodeVolumeOn
                                              ? Color(0xFFE0E0E0)
                                              : Color(0xFF213855),
                                        ),
                                      ),
                                    )),
                              ),
                            ],
                          ),
                        ],
                      )),
                ],
              )
            : Container(),
        SizedBox(width: 70),
        Column(
          children: [
            Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                height: 145,
                width: 400,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Text("Alarm Limit",
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 20)),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("RR"),
                                  Text("$minRrtotal-$maxRrtotal"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("Vte"),
                                    Text("$minvte-$maxvte"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Column(
                                children: [
                                  Text("Ppeak"),
                                  Text("$minppeak-$maxppeak"),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(top: 18.0),
                                child: Column(
                                  children: [
                                    Text("PEEP"),
                                    Text("$minpeep-$maxpeep"),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                )),
            SizedBox(
              height: 5,
            ),
            patientId != ""
                ? Container(
                    height: 40,
                    width: 400,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Color(0xFFE0E0E0)),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text("IBW : " + patientWeight.toString()),
                          Text("Ideal Vt : " +
                              (int.tryParse(patientWeight) * 6).toString() +
                              " - " +
                              (int.tryParse(patientWeight) * 8).toString())
                        ],
                      ),
                    ))
                : Container(),
            SizedBox(
              height: 5,
            ),
            _parameterChangeEnabled == false
                ? Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: Color(0xFFE0E0E0)),
                    width: 400,
                    height: 246,
                    child: Center(
                      child: Column(
                        children: [
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              IconButton(
                                icon: Icon(
                                  Icons.remove,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (vacvItrig == true &&
                                        vacvItrigValue != vacvminValue) {
                                      setState(() {
                                        vacvItrigValue = vacvItrigValue - 1;
                                      });
                                    }
                                    //  else if (vacvPeep == true &&
                                    //     vacvPeepValue != vacvminValue) {
                                    //   setState(() {
                                    //     vacvPeepValue = vacvPeepValue - 1;
                                    //     if (vacvItrigValue > 1 &&
                                    //         vacvItrigValue > vacvPeepValue) {
                                    //       vacvItrigValue = vacvPeepValue;
                                    //     }
                                    //   }); //peep negative
                                    // }
                                    else if (vacvPeep == true &&
                                        vacvPeepValue != vacvminValue) {
                                      setState(() {
                                        vacvPeepValue = vacvPeepValue - 1;
                                      }); //peep negative
                                    } else if (vacvRr == true &&
                                        vacvRrValue != vacvminValue) {
                                      setState(() {
                                        vacvRrValue = vacvRrValue - 1;
                                      });
                                    } else if (vacvIe == true &&
                                        vacvIeValue != vacvminValue) {
                                      setState(() {
                                        vacvIeValue = vacvIeValue - 1;
                                      });
                                    } else if (vacvVt == true &&
                                        vacvVtValue != vacvminValue) {
                                      setState(() {
                                        vacvVtValue = vacvVtValue - 1;
                                      });
                                    } else if (vacvPplateau == true &&
                                        vacvPplateauValue != vacvminValue) {
                                      setState(() {
                                        vacvPplateauValue =
                                            vacvPplateauValue - 1;
                                      });
                                    } else if (vacvPcMax == true &&
                                        vacvPcMaxValue != vacvminValue) {
                                      vacvPcMaxValue = vacvPcMaxValue - 1;
                                    } else if (vacvFio2 == true &&
                                        vacvFio2Value != vacvminValue) {
                                      setState(() {
                                        vacvFio2Value = vacvFio2Value - 1;
                                      });
                                    } else if (vacvFlow == true &&
                                        vacvFlowValue != vacvminValue) {
                                      setState(() {
                                        vacvFlowValue = vacvFlowValue - 1;
                                      });
                                    }
                                  });
                                },
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              Text(
                                vacvparameterName,
                                style: TextStyle(
                                    fontSize: 36,
                                    fontWeight: FontWeight.normal),
                              ),
                              SizedBox(
                                width: 60,
                              ),
                              IconButton(
                                icon: Icon(
                                  Icons.add,
                                  color: Colors.black,
                                  size: 45,
                                ),
                                onPressed: () {
                                  setState(() {
                                    if (vacvItrig == true &&
                                        vacvItrigValue != vacvmaxValue) {
                                      setState(() {
                                        vacvItrigValue = vacvItrigValue + 1;
                                      }); //itrig positive
                                    } else if (vacvPeep == true &&
                                        vacvPeepValue != vacvmaxValue) {
                                      setState(() {
                                        vacvPeepValue = vacvPeepValue + 1;
                                      });
                                    } else if (vacvRr == true &&
                                        vacvRrValue != vacvmaxValue) {
                                      setState(() {
                                        vacvRrValue = vacvRrValue + 1;
                                      });
                                    } else if (vacvIe == true &&
                                        vacvIeValue != vacvmaxValue) {
                                      setState(() {
                                        vacvIeValue = vacvIeValue + 1;
                                      });
                                    } else if (vacvVt == true &&
                                        vacvVtValue != vacvmaxValue) {
                                      setState(() {
                                        vacvVtValue = vacvVtValue + 1;
                                      });
                                    } else if (vacvPplateau == true &&
                                        vacvPplateauValue != vacvmaxValue) {
                                      setState(() {
                                        vacvPplateauValue =
                                            vacvPplateauValue + 1;
                                      });
                                    } else if (vacvPcMax == true &&
                                        vacvPcMaxValue != 100) {
                                      setState(() {
                                        vacvPcMaxValue = vacvPcMaxValue + 1;
                                      });
                                    } else if (vacvFio2 == true &&
                                        vacvFio2Value != vacvmaxValue) {
                                      setState(() {
                                        vacvFio2Value = vacvFio2Value + 1;
                                      });
                                    } else if (vacvFlow == true &&
                                        vacvFlowValue != vacvmaxValue) {
                                      setState(() {
                                        vacvFlowValue = vacvFlowValue + 1;
                                      });
                                    }
                                  });
                                },
                              ),
                            ],
                          ),
                          Center(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  vacvItrig
                                      ? pItrig
                                          ? "-$vacvItrigValue"
                                          : "$vacvItrigValue"
                                      : vacvPeep
                                          ? vacvPeepValue.toInt().toString()
                                          : vacvRr
                                              ? vacvRrValue.toInt().toString()
                                              : vacvIe
                                                  ? getIeData(vacvIeValue, 1)
                                                  : vacvVt
                                                      ? vacvVtValue
                                                          .toInt()
                                                          .toString()
                                                      : vacvPplateau
                                                          ? vacvPplateauValue
                                                              .toInt()
                                                              .toString()
                                                          : vacvPcMax
                                                              ? vacvPcMaxValue
                                                                  .toInt()
                                                                  .toString()
                                                              : vacvFio2
                                                                  ? vacvFio2Value
                                                                      .toInt()
                                                                      .toString()
                                                                  : vacvFlow
                                                                      ? vacvFlowValue
                                                                          .toInt()
                                                                          .toString()
                                                                      : "",
                                  style: TextStyle(
                                      fontSize: 40,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          // vacvFio2
                          //     ? Container()
                          //     :
                          Container(
                              width: 350,
                              child: Slider(
                                min: vacvminValue.toDouble(),
                                max: vacvmaxValue.toDouble(),
                                onChanged: (double value) {
                                  if (vacvItrig == true) {
                                    setState(() {
                                      vacvItrigValue = value.toInt();
                                    }); // slider itrig
                                  } else if (vacvPeep == true) {
                                    setState(() {
                                      vacvPeepValue = value.toInt();
                                    });
                                  } else if (vacvRr == true) {
                                    setState(() {
                                      vacvRrValue = value.toInt();
                                    });
                                  } else if (vacvIe == true) {
                                    setState(() {
                                      vacvIeValue = value.toInt();
                                    });
                                  } else if (vacvVt == true) {
                                    setState(() {
                                      vacvVtValue = value.toInt();
                                    });
                                  } else if (vacvPplateau == true) {
                                    vacvPplateauValue = value.toInt();
                                  } else if (vacvPcMax == true) {
                                    setState(() {
                                      vacvPcMaxValue = value.toInt();
                                    });
                                  } else if (vacvFio2 == true) {
                                    setState(() {
                                      vacvFio2Value = value.toInt();
                                    });
                                  } else if (vacvFlow == true) {
                                    setState(() {
                                      vacvFlowValue = value.toInt();
                                    });
                                  }
                                },
                                value: vacvItrig
                                    ? vacvItrigValue.toDouble()
                                    : vacvPeep
                                        ? vacvPeepValue.toDouble()
                                        : vacvRr
                                            ? vacvRrValue.toDouble()
                                            : vacvIe
                                                ? vacvIeValue.toDouble()
                                                : vacvVt
                                                    ? vacvVtValue.toDouble()
                                                    : vacvPplateau
                                                        ? vacvPplateauValue
                                                            .toDouble()
                                                        : vacvPcMax
                                                            ? vacvPcMaxValue
                                                                .toDouble()
                                                            : vacvFio2
                                                                ? vacvFio2Value
                                                                    .toDouble()
                                                                : vacvFlow
                                                                    ? vacvFlowValue
                                                                        .toDouble()
                                                                    : "",
                              )),
                          SizedBox(
                            height: 5,
                          ),
                          Padding(
                            padding:
                                const EdgeInsets.only(left: 45.0, right: 45.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(vacvIe
                                    ? getIeData(vacvminValue, 1)
                                    : vacvItrig
                                        ? pItrig
                                            ? "-$vacvminValue"
                                            : "$vacvminValue"
                                        : vacvminValue.toString()),
                                Text(
                                  vacvItrig
                                      ? pItrig ? vacvparameterUnits : "lpm"
                                      : vacvparameterUnits,
                                  style: TextStyle(fontSize: 16),
                                ),
                                Text(vacvIe
                                    ? getIeData(vacvmaxValue, 1)
                                    : vacvItrig
                                        ? pItrig
                                            ? "-$vacvmaxValue"
                                            : "$vacvmaxValue"
                                        : vacvmaxValue.toString())
                              ],
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              InkWell(
                                onTap: () {
                                  setState(() {
                                    _parameterChangeEnabled = true;
                                  });
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Card(
                                      color: Colors.grey,
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 18.0,
                                            bottom: 18,
                                            left: 45,
                                            right: 45),
                                        child: Center(
                                            child: Text("  OK  ",
                                                style: TextStyle(
                                                    color: Colors.black,
                                                    fontWeight:
                                                        FontWeight.bold))),
                                      )),
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ))
                : Container(),
          ],
        ),
      ],
    );
  }

  pressureVolumeLoop() {
    return Container(
      padding: EdgeInsets.only(left: 10, right: 2, top: 45),
      height: 413,
      width: 640,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: <Widget>[
         
           new Container(
             padding: EdgeInsets.only(left: 20, right: 0, top: 0),
              color: Color(0xFF171e27),
              child:new Plot(
                  height: 200.0,
                  data: _plotDataPv,
                  gridSize: new Offset(50.0, 400.0),
                  style: new PlotStyle(
                    axisStrokeWidth: 1.0,
                    pointRadius: 1.0,
                    outlineRadius: 1.0,
                    primary: Colors.red,
                    secondary: Colors.red,
                    trace: true,
                    traceStokeWidth: 4.0,
                    // traceColor: Colors.blueGrey,
                    // traceClose: true,
                    // showCoordinates: true,
                    textStyle: new TextStyle(
                      fontSize: 8.0,
                      color: Colors.grey,
                    ),
                    axis: Colors.blueGrey[600],
                    // gridline: Colors.blueGrey[100],
                  ),
                  padding: const EdgeInsets.fromLTRB(40.0, 12.0, 40.0, 40.0),
                  // xTitle: 'Pressure',
                  // yTitle: 'Volume',
                ),
              
            ),
          
        ],
      ),
    );
  }

  pressureFlowLoop() {
    return Container(
      padding: EdgeInsets.only(left: 10, right: 2, top: 45),
      height: 413,
      width: 640,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: <Widget>[
          new Container(
            padding: EdgeInsets.only(left: 20, right: 0, top: 0),
              color: Color(0xFF171e27),
              child:  Plot(
                  height: 200.0,
                  data: _plotDataPf,
                  gridSize: new Offset(200.0, 50.0),
                  style: new PlotStyle(
                    axisStrokeWidth: 1.0,
                    pointRadius: 1.0,
                    outlineRadius: 1.0,
                    primary: Colors.red,
                    secondary: Colors.red,
                    trace: true,
                    traceStokeWidth: 4.0,
                    // traceColor: Colors.blueGrey,
                    // traceClose: true,
                    // showCoordinates: true,
                    textStyle: new TextStyle(
                      fontSize: 8.0,
                      color: Colors.grey,
                    ),
                    axis: Colors.blueGrey[600],
                    // gridline: Colors.blueGrey[100],
                  ),
                  padding: const EdgeInsets.fromLTRB(40.0, 12.0, 40.0, 40.0),
                  // xTitle: 'Flow',
                  // yTitle: 'Pressure',
                ),
            ),
          
        ],
      ),
    );
  }

  volumeFlowLoop() {
    return Container(
      padding: EdgeInsets.only(left: 10, right: 2, top: 45),
      height: 413,
      width: 640,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: <Widget>[
          
          new Container(
              padding: EdgeInsets.only(left: 20, right: 0, top: 0),
              color: Color(0xFF171e27),
              child:Plot(
                  height: 200.0,
                  data: _plotDataVf,
                  gridSize: new Offset(500.0, 200.0),
                  style: new PlotStyle(
                    axisStrokeWidth: 1.0,
                    pointRadius: 1.0,
                    outlineRadius: 1.0,
                    primary: Colors.red,
                    secondary: Colors.red,
                    trace: true,
                    traceStokeWidth: 4.0,
                    // traceColor: Colors.blueGrey,
                    // traceClose: true,
                    // showCoordinates: true,
                    textStyle: new TextStyle(
                      fontSize: 8.0,
                      color: Colors.grey,
                    ),
                    axis: Colors.blueGrey[600],
                    // gridline: Colors.blueGrey[100],
                  ),
                  padding: const EdgeInsets.fromLTRB(40.0, 12.0, 40.0, 40.0),
                  // xTitle: 'Volume',
                  // yTitle: 'Flow',
                ),
              
            ),
          
        ],
      ),
    );
  }

  loopsGraphs() {
    return Container(
      margin: EdgeInsets.only(left: 174, right: 5, top: 40, bottom: 5),
      child: Column(
        children: <Widget>[
          Stack(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  _firstLoop != true
                      ? IconButton(
                          icon: Icon(Icons.arrow_back_ios,
                              size: 60, color: Colors.white),
                          onPressed: () {
                            setState(() {
                              if (_secondLoop == true) {
                                _secondLoop = false;
                                _firstLoop = true;
                              } else if (_thirdLoop == true) {
                                _thirdLoop = false;
                                _secondLoop = true;
                              }
                            });
                          })
                      : Container(width: 48),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: <Widget>[
                      _firstLoop
                          ? volumeFlowLoop()
                          : _secondLoop
                              ? pressureFlowLoop()
                              : _thirdLoop
                                  ? pressureVolumeLoop()
                                  : Container(
                                      padding: EdgeInsets.only(
                                          left: 10, right: 2, top: 45),
                                      height: 545,
                                      width: 644,
                                    ),
                    ],
                  ),
                  _thirdLoop != true
                      ? IconButton(
                          icon: Icon(Icons.arrow_forward_ios,
                              size: 60, color: Colors.white),
                          onPressed: () {
                            setState(() {
                              if (_firstLoop == true) {
                                _firstLoop = false;
                                _secondLoop = true;
                              } else if (_secondLoop == true) {
                                _secondLoop = false;
                                _thirdLoop = true;
                              }
                            });
                          })
                      : Container(width: 48),
                  SizedBox(width: 20),
                ],
              ),
              Container(
                  margin: EdgeInsets.only(top: 350),
                  height: 135,
                  width: 644,
                  child: Align(
                      alignment: Alignment.center,
                      child: Padding(
                        padding: const EdgeInsets.only(left: 10.0),
                        child: Text(
                            _firstLoop
                                ? "Volume"
                                : _secondLoop ? "Flow" : "Pressure",
                            style:
                                TextStyle(color: Colors.white, fontSize: 24)),
                      ))),
              RotatedBox(
                quarterTurns: 3,
                child: Container(
                    height: 150,
                    width: 300,
                    child: Align(
                      alignment: Alignment.center,
                      child: Text(
                          _firstLoop
                              ? "Flow"
                              : _secondLoop ? "Pressure" : "Volume",
                          style: TextStyle(color: Colors.white, fontSize: 24)),
                    )),
              ),
            ],
          ),
          SizedBox(height: 45),
          Center(
            child: Container(
              decoration:
                  BoxDecoration(borderRadius: BorderRadius.circular(10)),
              margin: EdgeInsets.only(
                left: 0,
              ),
              width: 675,
              height: 80,
              child: alarmActive == "1"
                  ? Card(
                      color:
                          alarmActive == "1" ? Colors.red : Color(0xFF171e27),
                      child: Center(
                          child: Align(
                        alignment: Alignment.centerLeft,
                        child: Center(
                          child: Text(
                            alarmActive == "1"
                                ? alarmMessage.toUpperCase()
                                : "",
                            style: TextStyle(color: Colors.white, fontSize: 15),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      )),
                    )
                  : Container(),
            ),
          ),
        ],
      ),
    );
  }

  // graphsScale(data, data1, data2, data3, params) {
  // graphsScale() {
  //   return Container(
  //     padding: EdgeInsets.only(left: 170, right: 0, top: 40),
  //     child: Column(
  //       children: [
  //         Container(
  //           width: 769,
  //           height: 160,
  //           child: Stack(
  //             children: [
  //               // Container(
  //               //   height: 108,
  //               //   width: 725,
  //               //   margin: EdgeInsets.only(
  //               //     left: 30,
  //               //     right: 2,
  //               //     top: 30,
  //               //   ),
  //               //   child: Sparkline(
  //               //     data: data ?? [0.0],
  //               //     lineColor: Colors.yellow,
  //               //     fillMode: FillMode.below,
  //               //     fillColor: Colors.yellow,
  //               //     pointsMode: PointsMode.none,
  //               //     pointSize: 5.0,
  //               //     pointColor: Colors.yellow,
  //               //   ),
  //               // ),
  //               Container(margin: EdgeInsets.only(
  //                               left: 20,
  //                               bottom: 10,
  //                               top: 10,
  //                               right: 10,
  //                             ),
  //                             child: scopeOne),
  //               // Container(
  //               //     height: 0,
  //               //     width: 0,
  //               //     child: GraphWidget(widgetKey: widgetKey, params: params)),
  //               Container(
  //                   margin: EdgeInsets.only(left: 10, top: 8),
  //                   child: Text(
  //                     pressureMax.toString() + " cmH\u2082O",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 15, top: 130),
  //                   child: Text(
  //                     "0",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 12, top: 99.5),
  //                   child: Text(
  //                     operatinModeR == 3 ? "10" : "",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 12, top: 69),
  //                   child: Text(
  //                     operatinModeR == 3 ? "20" : "",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 12, top: 38.5),
  //                   child: Text(
  //                     operatinModeR == 3 ? "30" : "",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                 margin: EdgeInsets.only(left: 28, top: 24),
  //                 width: 1,
  //                 color: Colors.grey,
  //                 height: 116,
  //               ),
  //               Container(
  //                 margin: EdgeInsets.only(
  //                   left: 28,
  //                   top: 138,
  //                 ),
  //                 color: Colors.grey,
  //                 height: 1,
  //                 width: 728,
  //               ),
  //               // Container(
  //               //   margin: EdgeInsets.only(left: 12, top: 35),
  //               //   child: RotatedBox(
  //               //       quarterTurns: 3,
  //               //       child: Text("Pressure",
  //               //           style: TextStyle(color: Colors.grey, fontSize: 10))),
  //               // ),
  //               Container(
  //                   margin: EdgeInsets.only(left: 758, top: 128),
  //                   child: Text(
  //                     "s",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //             ],
  //           ),
  //         ),
  //         Container(
  //           width: 769,
  //           height: 210,
  //           child: Stack(
  //             children: [
  //               Container(margin: EdgeInsets.only(
  //                               left: 20,
  //                               bottom: 10,
  //                               top: 10,
  //                               right: 10,
  //                             ),
  //                             child: scopeOne1),
  //               // Container(
  //               //   height: 120,
  //               //   width: 729,
  //               //   margin: EdgeInsets.only(
  //               //     left: 30,
  //               //     bottom: 10,
  //               //     top: 18,
  //               //     right: 2,
  //               //   ),
  //               //   child: Sparkline(
  //               //     data: data1 ?? [0.0],
  //               //     lineColor: Colors.green,
  //               //     fillMode: FillMode.below,
  //               //     fillColor: Colors.green,
  //               //     pointsMode: PointsMode.none,
  //               //     pointSize: 5.0,
  //               //     pointColor: Colors.green,
  //               //   ),
  //               // ),
  //               // Container(
  //               //   height: 60,
  //               //   width: 729,
  //               //   margin: EdgeInsets.only(
  //               //     left: 30,
  //               //     bottom: 10,
  //               //     top: 168,
  //               //     right: 2,
  //               //   ),
  //               //   child: Transform(
  //               //     transform: Matrix4.rotationX(pi),
  //               //     child: Container(
  //               //       child: Sparkline(
  //               //         data: data2 ?? [0.0],
  //               //         lineColor: Colors.green,
  //               //         fillMode: FillMode.below,
  //               //         fillColor: Colors.green,
  //               //         pointsMode: PointsMode.none,
  //               //         pointSize: 5.0,
  //               //         pointColor: Colors.green,
  //               //       ),
  //               //     ),
  //               //   ),
  //               // ),
  //               Container(
  //                   margin: EdgeInsets.only(left: 10, top: 5),
  //                   child: Text(
  //                     flowIMax.toString() + " Lpm",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 8, top: 195),
  //                   child: Text(
  //                     "-" + flowEMax.toString() + " Lpm",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 15, top: 128),
  //                   child: Text(
  //                     "0",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                 margin: EdgeInsets.only(left: 28, top: 20),
  //                 width: 1,
  //                 color: Colors.grey,
  //                 height: 185,
  //               ),
  //               Container(
  //                 margin: EdgeInsets.only(
  //                   left: 28,
  //                   top: 138,
  //                 ),
  //                 color: Colors.grey,
  //                 height: 1,
  //                 width: 728,
  //               ),
  //               Container(
  //                 margin: EdgeInsets.only(left: 12, top: 35),
  //                 child: RotatedBox(
  //                     quarterTurns: 3,
  //                     child: Text("Flow",
  //                         style: TextStyle(color: Colors.grey, fontSize: 10))),
  //               ),
  //               Container(
  //                   margin: EdgeInsets.only(left: 759, top: 124),
  //                   child: Text(
  //                     "s",
  //                     style: TextStyle(color: Colors.grey),
  //                   ))
  //             ],
  //           ),
  //         ),
  //         Container(
  //           width: 769,
  //           height: 160,
  //           child: Stack(
  //             children: [
  //               Container(
  //                  margin: EdgeInsets.only(
  //                               left: 20,
  //                               bottom: 10,
  //                               top: 10,
  //                               right: 10,),
  //                child: scopeOne2),
  //               // Container(
  //               //   height: 108,
  //               //   width: 725,
  //               //   margin: EdgeInsets.only(
  //               //     left: 30,
  //               //     right: 2,
  //               //     top: 30,
  //               //   ),
  //               //   child: Sparkline(
  //               //     data: data3 ?? [0.0],
  //               //     lineColor: Colors.blue,
  //               //     fillMode: FillMode.below,
  //               //     fillColor: Colors.blue,
  //               //     pointsMode: PointsMode.none,
  //               //     pointSize: 5.0,
  //               //     pointColor: Colors.blue,
  //               //   ),
  //               // ),
  //               Container(
  //                   margin: EdgeInsets.only(left: 10, top: 15),
  //                   child: Text(
  //                     volumeMax.toString() + " mL",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                   margin: EdgeInsets.only(left: 15, top: 130),
  //                   child: Text(
  //                     "0",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //               Container(
  //                 margin: EdgeInsets.only(left: 28, top: 24),
  //                 width: 1,
  //                 color: Colors.grey,
  //                 height: 116,
  //               ),
  //               Container(
  //                 margin: EdgeInsets.only(
  //                   left: 28,
  //                   top: 138,
  //                 ),
  //                 color: Colors.grey,
  //                 height: 1,
  //                 width: 728,
  //               ),
  //               Container(
  //                 margin: EdgeInsets.only(left: 12, top: 55),
  //                 child: RotatedBox(
  //                     quarterTurns: 3,
  //                     child: Text("Volume",
  //                         style: TextStyle(color: Colors.grey, fontSize: 10))),
  //               ),
  //               Container(
  //                   margin: EdgeInsets.only(left: 758, top: 128),
  //                   child: Text(
  //                     "s",
  //                     style: TextStyle(color: Colors.grey),
  //                   )),
  //             ],
  //           ),
  //         ),
  //         SizedBox(height: 5),
  //         Row(
  //           mainAxisAlignment: MainAxisAlignment.center,
  //           crossAxisAlignment: CrossAxisAlignment.center,
  //           children: <Widget>[
  //             Center(
  //               child: Container(
  //                 decoration:
  //                     BoxDecoration(borderRadius: BorderRadius.circular(10)),
  //                 margin: EdgeInsets.only(left: 40),
  //                 width: 675,
  //                 height: 80,
  //                 child: alarmActive == "1"
  //                     ? Card(
  //                         color: alarmActive == "1"
  //                             ? Colors.red
  //                             : Color(0xFF171e27),
  //                         child: Center(
  //                             child: Align(
  //                           alignment: Alignment.centerLeft,
  //                           child: Center(
  //                             child: Text(
  //                               alarmActive == "1"
  //                                   ? alarmMessage.toUpperCase()
  //                                   : "",
  //                               style: TextStyle(
  //                                   color: Colors.white, fontSize: 15),
  //                               textAlign: TextAlign.center,
  //                             ),
  //                           ),
  //                         )),
  //                       )
  //                     : Container(),
  //               ),
  //             ),
  //             // InkWell(
  //             //   onTap: () {
  //             //     setState(() {
  //             //       _isgraphFullScreen = !_isgraphFullScreen;
  //             //     });
  //             //   },
  //             //   child: Container(
  //             //       margin: EdgeInsets.only(left: 10),
  //             //       decoration: BoxDecoration(
  //             //           borderRadius: BorderRadius.circular(5),
  //             //           color: Colors.white),
  //             //       child: Icon(
  //             //           _isgraphFullScreen == false
  //             //               ? Icons.keyboard_arrow_right
  //             //               : Icons.keyboard_arrow_left,
  //             //           size: 40,
  //             //           color: Colors.black.withOpacity(0.9))),
  //             // )
  //           ],
  //         ),
  //       ],
  //     ),
  //   );
  // }

  graphs() {
    return Container(
      padding: EdgeInsets.only(left: 170, right: 0, top: 45),
      child: Column(
        children: [
          Container(
            width: 769,
            height: 150,
            child: Stack(
              children: [
                // Container(child:Sparkline(
                //   fillMode: FillMode.below,
                //   data: pressurePointsPsv
                //   ),),
                Container(
                    margin: EdgeInsets.only(left: 20, right: 2, top: 10),
                    child: scopeOne),
                Container(
                    margin: EdgeInsets.only(left: 10, top: 8),
                    child: Text(
                      "100" + " cmH\u2082O",
                      style: TextStyle(color: Colors.grey),
                    )),
                Container(
                    margin: EdgeInsets.only(left: 15, top: 130),
                    child: Text(
                      "0",
                      style: TextStyle(color: Colors.grey),
                    )),

                // Container(
                //     margin: EdgeInsets.only(left: 12, top: 99.5),
                //     child: Text(
                //       operatinModeR == 3 ? "10" : "",
                //       style: TextStyle(color: Colors.grey),
                //     )),
                // Container(
                //     margin: EdgeInsets.only(left: 12, top: 69),
                //     child: Text(
                //       operatinModeR == 3 ? "20" : "",
                //       style: TextStyle(color: Colors.grey),
                //     )),
                // Container(
                //     margin: EdgeInsets.only(left: 12, top: 38.5),
                //     child: Text(
                //       operatinModeR == 3 ? "30" : "",
                //       style: TextStyle(color: Colors.grey),
                //     )),
                Container(
                  margin: EdgeInsets.only(left: 28, top: 24),
                  width: 1,
                  color: Colors.grey,
                  height: 116,
                ),
                Container(
                  margin: EdgeInsets.only(
                    left: 28,
                    top: 138,
                  ),
                  color: Colors.grey,
                  height: 1,
                  width: 728,
                ),
                // Container(
                //   margin: EdgeInsets.only(left: 12, top: 35),
                //   child: RotatedBox(
                //       quarterTurns: 3,
                //       child: Text("Pressure",
                //           style: TextStyle(color: Colors.grey, fontSize: 10))),
                // ),
                Container(
                    margin: EdgeInsets.only(left: 758, top: 128),
                    child: Text(
                      "s",
                      style: TextStyle(color: Colors.grey),
                    )),
              ],
            ),
          ),
          Container(
            width: 769,
            height: 210,
            child: Stack(
              children: [
                Container(
                    margin: EdgeInsets.only(
                      left: 20,
                      bottom: 10,
                      top: 10,
                      right: 2,
                    ),
                    child: scopeOne1),
                Container(
                    margin: EdgeInsets.only(left: 10, top: 5),
                    child: Text(
                      "200 Lpm",
                      style: TextStyle(color: Colors.grey),
                    )),
                Container(
                    margin: EdgeInsets.only(left: 10, top: 195),
                    child: Text(
                      "-90 Lpm",
                      style: TextStyle(color: Colors.grey),
                    )),
                Container(
                    margin: EdgeInsets.only(left: 15, top: 128),
                    child: Text(
                      "0",
                      style: TextStyle(color: Colors.grey),
                    )),
                Container(
                  margin: EdgeInsets.only(left: 28, top: 20),
                  width: 1,
                  color: Colors.grey,
                  height: 185,
                ),
                Container(
                  margin: EdgeInsets.only(
                    left: 28,
                    top: 138,
                  ),
                  color: Colors.grey,
                  height: 1,
                  width: 728,
                ),
                Container(
                  margin: EdgeInsets.only(left: 12, top: 35),
                  child: RotatedBox(
                      quarterTurns: 3,
                      child: Text("Flow",
                          style: TextStyle(color: Colors.grey, fontSize: 10))),
                ),
                Container(
                    margin: EdgeInsets.only(left: 759, top: 124),
                    child: Text(
                      "s",
                      style: TextStyle(color: Colors.grey),
                    ))
              ],
            ),
          ),
          Container(
            width: 769,
            height: 150,
            child: Stack(
              children: [
                Container(
                    margin: EdgeInsets.only(left: 20, right: 2, top: 10),
                    child: scopeOne2),
                Container(
                    margin: EdgeInsets.only(left: 10, top: 8),
                    child: Text(
                      "3000" + " mL",
                      style: TextStyle(color: Colors.grey),
                    )),
                Container(
                    margin: EdgeInsets.only(left: 15, top: 130),
                    child: Text(
                      "0",
                      style: TextStyle(color: Colors.grey),
                    )),
                Container(
                  margin: EdgeInsets.only(left: 28, top: 24),
                  width: 1,
                  color: Colors.grey,
                  height: 116,
                ),
                Container(
                  margin: EdgeInsets.only(
                    left: 28,
                    top: 138,
                  ),
                  color: Colors.grey,
                  height: 1,
                  width: 728,
                ),
                Container(
                  margin: EdgeInsets.only(left: 12, top: 55),
                  child: RotatedBox(
                      quarterTurns: 3,
                      child: Text("Volume",
                          style: TextStyle(color: Colors.grey, fontSize: 10))),
                ),
                Container(
                    margin: EdgeInsets.only(left: 758, top: 128),
                    child: Text(
                      "s",
                      style: TextStyle(color: Colors.grey),
                    )),
              ],
            ),
          ),
          SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              Center(
                child: Container(
                  decoration:
                      BoxDecoration(borderRadius: BorderRadius.circular(10)),
                  margin: EdgeInsets.only(left: 40),
                  width: 675,
                  height: 80,
                  child: alarmActive == "1"
                      ? Card(
                          color: alarmActive == "1"
                              ? Colors.red
                              : Color(0xFF171e27),
                          child: Center(
                              child: Align(
                            alignment: Alignment.centerLeft,
                            child: Center(
                              child: Text(
                                alarmActive == "1"
                                    ? alarmMessage.toUpperCase()
                                    : "",
                                style: TextStyle(
                                    color: Colors.white, fontSize: 15),
                                textAlign: TextAlign.center,
                              ),
                            ),
                          )),
                        )
                      : Container(),
                ),
              ),
              // InkWell(
              //   onTap: () {
              //     setState(() {
              //       _isgraphFullScreen = !_isgraphFullScreen;
              //     });
              //   },
              //   child: Container(
              //       margin: EdgeInsets.only(left: 10),
              //       decoration: BoxDecoration(
              //           borderRadius: BorderRadius.circular(5),
              //           color: Colors.white),
              //       child: Icon(
              //           _isgraphFullScreen == false
              //               ? Icons.keyboard_arrow_right
              //               : Icons.keyboard_arrow_left,
              //           size: 40,
              //           color: Colors.black.withOpacity(0.9))),
              // )
            ],
          ),
        ],
      ),
    );
  }

  Future CommonClick(String value) async {
    var result = await showDialog(
        barrierDismissible: false,
        context: context,
        builder: (BuildContext context) {
          return CommonDialog(value, _status);
        });

    if (result != null) {
      preferences.setBool("play", false);
      getData();
    } else {
      setState(() {
        _setValuesonClick = true;
      });
    }

    if (result != null) {
      setState(() {
        _setValuesonClick = true;
      });
      int rrData = preferences.getInt("rr");
      int ieData = preferences.getInt("ie");

      var dataI = getIeData(ieData, 2);
      var dataI1 = double.tryParse(dataI);

      var dataE = getIeData(ieData, 3);
      var dataE1 = double.tryParse(dataE);

      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());

      calculateTiTeValue(rrData, dataI1, dataE1);
    }

    if (result != null) {
      var data = result.split("ab")[1];

      if (data == "peep") {
        sendDataPacket(data, result);
      } else if (data == "ps") {
        sendDataPacket(data, result);
      } else if (data == "ie") {
        sendDataPacket(data, result);
      } else if (data == "rr") {
        sendDataPacket(data, result);
      } else if (data == "fio2") {
        sendDataPacket(data, result);
      } else if (data == "pc") {
        sendDataPacket(data, result);
      } else if (data == "vt") {
        sendDataPacket(data, result);
      } else if (data == "itrig") {
        sendDataPacket(data, result);
      } else if (data == "atime") {
        sendDataPacket(data, result);
      } else if (data == "ti") {
        sendDataPacket(data, result);
      }
    }
  }

  calculateTiTeValue(int rr, double iValue, double eValue) {
    tiValue = (((iValue / (iValue + eValue)) * (60000 / rr) / 1000));
    // // // print(tiValue.toString());
    teValue = (((eValue / (iValue + eValue)) * (60000 / rr) / 1000));
  }

  sendDataPacket(String res, result) {
    List<String> lsaveListTemp = [];
    savedList.clear();
    lsaveListTemp = preferences.getStringList("saveList");
    if (lsaveListTemp != null) {
      savedList = lsaveListTemp.map((i) => int.parse(i)).toList();
      setState(() {
        modeWriteList = savedList;
      });
    }
    // print(modeWriteList.toString());
    if (res == "rr") {
      if (pccmvEnabled == true) {
        // // print("echo " + modeWriteList.toString());
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('pccmvRRValue', temp);
        pccmvRRValue = temp;
        getData();
        // // print("done " + modeWriteList.toString());

        sendDataUsbConnection(modeWriteList, 1);
      } else if (vccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);
        preferences.setInt('vccmvRRValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (pacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('pacvRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('vacvRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('psimvRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('vsimvRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[8] = ((temp & 0xFF00) >> 8);
        modeWriteList[9] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);

        preferences.setInt('psvBackupRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[6] = ((temp & 0xFF00) >> 8);
        modeWriteList[7] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('prvcRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (cpapEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[8] = ((temp & 0xFF00) >> 8);
        modeWriteList[9] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);

        preferences.setInt('cpapBackupRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[8] = ((temp & 0xFF00) >> 8);
        modeWriteList[9] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);

        preferences.setInt('autoBackupRrValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "peep") {
      //=============================
      if (pccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('pccmvPeepValue', temp);
        pccmvPeepValue = temp;
        getData();
        // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('vccmvPeepValue', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (pacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);
        preferences.setInt('pacvPeepValue', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('vacvPeepValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('psimvPeepValue', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('vsimvPeepValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);

        preferences.setInt('psvPeepValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('prvcPeepValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (cpapEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);

        preferences.setInt('cpapPeepValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[12] = ((temp & 0xFF00) >> 8);
        modeWriteList[13] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);

        preferences.setInt('autoPeepValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "fio2") {
      //=============================
      if (pccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (16);

        preferences.setInt('pccmvFio2Value', temp);
        pccmvFio2Value = temp;
        getData();
        // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (16);
        preferences.setInt('vccmvFio2Value', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (pacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);

        preferences.setInt('pacvFio2Value', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);

        preferences.setInt('vacvFio2Value', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);
        preferences.setInt('psimvFio2Value', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);

        preferences.setInt('vsimvFio2Value', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('psvFio2Value', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (128);
        preferences.setInt('prvcFio2Value', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (cpapEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('cpapFio2Value', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[28] = ((temp & 0xFF00) >> 8);
        modeWriteList[29] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('autoFio2Value', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "pc") {
      //=====================
      if (pccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[14] = ((temp & 0xFF00) >> 8);
        modeWriteList[15] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);
        preferences.setInt('pccmvPcValue', temp);
        pccmvPcValue = temp;
        getData();
        // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vccmvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[8]=((temp & 0xFF00) >> 8);
        // modeWriteList[9]=(temp & 0xFF);
        // modeWriteList[18]= (0);
        // modeWriteList[19]= (4);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      }
      if (pacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[14] = ((temp & 0xFF00) >> 8);
        modeWriteList[15] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (16);
        preferences.setInt('pacvPcValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vacvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[20]= (0);
        // modeWriteList[21]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[14] = ((temp & 0xFF00) >> 8);
        modeWriteList[15] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (16);
        preferences.setInt('psimvPcValue', temp);

        if (receivedps > temp) {
          modeWriteList[16] = ((temp & 0xFF00) >> 8);
          modeWriteList[17] = (temp & 0xFF);
          modeWriteList[41] = (1);
          preferences.setInt('psimvPsValue', temp);
        }
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[22]= (0);
        // modeWriteList[23]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[14] = ((temp & 0xFF00) >> 8);
        modeWriteList[15] = (temp & 0xFF);
        modeWriteList[41] = (8);
        modeWriteList[42] = (0);
        preferences.setInt('psvPcValue', temp);

        // if (receivedps > temp) {
        //   modeWriteList[16] = ((temp & 0xFF00) >> 8);
        //   modeWriteList[17] = (temp & 0xFF);
        //   modeWriteList[42] = (4);
        //   preferences.setInt('psvPsValue', temp);
        // }
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[20] = ((temp & 0xFF00) >> 8);
        modeWriteList[21] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (64);
        preferences.setInt('prvcPcMaxValue', temp);

        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (cpapEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[14] = ((temp & 0xFF00) >> 8);
        modeWriteList[15] = (temp & 0xFF);
        modeWriteList[41] = (8);
        modeWriteList[42] = (0);
        preferences.setInt('cpapPcValue', temp);

        // if (receivedps > temp) {
        //   modeWriteList[8] = ((temp & 0xFF00) >> 8);
        //   modeWriteList[9] = (temp & 0xFF);
        //   modeWriteList[36] = (4);
        //   preferences.setInt('psvPsValue', temp);
        // }
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[14] = ((temp & 0xFF00) >> 8);
        modeWriteList[15] = (temp & 0xFF);
        modeWriteList[41] = (8);
        modeWriteList[42] = (0);
        preferences.setInt('autoPcMaxValue', temp);

        // if (receivedps > temp) {
        //   modeWriteList[8] = ((temp & 0xFF00) >> 8);
        //   modeWriteList[9] = (temp & 0xFF);
        //   modeWriteList[36] = (4);
        //   preferences.setInt('psvPsValue', temp);
        // }
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "ie") {
      if (pccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('pccmvIeValue', temp);
        pccmvIeValue = temp;
        getData();
        // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (2);
        preferences.setInt('vccmvIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (pacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);
        preferences.setInt('pacvIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('vacvIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('psimvIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);
        preferences.setInt('vsimvIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (32);

        preferences.setInt('psvIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();""

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('prvcIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);

        var dataI = getIeData(temp, 2);
        var dataI1 = double.tryParse(dataI);
        var dataI2 = (dataI1 * 10).toInt();

        var dataE = getIeData(temp, 3);
        var dataE1 = double.tryParse(dataE);
        var dataE2 = (dataE1 * 10).toInt();

        preferences.setString("i", dataI1.toString());
        preferences.setString("e", dataE1.toString());
        // getData();

        modeWriteList[10] = (dataI2);
        modeWriteList[11] = (dataE2);
        modeWriteList[41] = (0);
        modeWriteList[42] = (32);

        preferences.setInt('autoIeValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "vt") {
      if (pccmvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[18]= (0);
        // modeWriteList[19]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (vccmvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[22] = ((temp & 0xFF00) >> 8);
        modeWriteList[23] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (8);

        preferences.setInt('vccmvVtValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (pacvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[12]=((temp & 0xFF00) >> 8);
        // modeWriteList[13]=(temp & 0xFF);
        // modeWriteList[20]= (0);
        // modeWriteList[21]= (16);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (vacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[22] = ((temp & 0xFF00) >> 8);
        modeWriteList[23] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (16);

        preferences.setInt('vacvVtValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psimvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[12]=((temp & 0xFF00) >> 8);
        // modeWriteList[13]=(temp & 0xFF);
        // modeWriteList[22]= (0);
        // modeWriteList[23]= (16);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[22] = ((temp & 0xFF00) >> 8);
        modeWriteList[23] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (64);

        preferences.setInt('vsimvVtValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[22] = ((temp & 0xFF00) >> 8);
        modeWriteList[23] = (temp & 0xFF);
        modeWriteList[41] = (16);
        modeWriteList[42] = (0);

        preferences.setInt('psvVtValue', temp);

        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[22] = ((temp & 0xFF00) >> 8);
        modeWriteList[23] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (16);

        preferences.setInt('prvcVtValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[22] = ((temp & 0xFF00) >> 8);
        modeWriteList[23] = (temp & 0xFF);
        modeWriteList[41] = (16);
        modeWriteList[42] = (0);
        preferences.setInt('autoVtValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "ps") {
      if (pccmvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[18]= (0);
        // modeWriteList[19]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (vccmvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[18]= (0);
        // modeWriteList[19]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (pacvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[12]=((temp & 0xFF00) >> 8);
        // modeWriteList[13]=(temp & 0xFF);
        // modeWriteList[20]= (0);
        // modeWriteList[21]= (16);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (vacvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[12]=((temp & 0xFF00) >> 8);
        // modeWriteList[13]=(temp & 0xFF);
        // modeWriteList[20]= (0);
        // modeWriteList[21]= (16);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[16] = ((temp & 0xFF00) >> 8);
        modeWriteList[17] = (temp & 0xFF);
        modeWriteList[41] = (1);
        modeWriteList[42] = (0);

        preferences.setInt('psimvPsValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[16] = ((temp & 0xFF00) >> 8);
        modeWriteList[17] = (temp & 0xFF);
        modeWriteList[41] = (1);
        modeWriteList[42] = (0);

        preferences.setInt('vsimvPsValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[16] = ((temp & 0xFF00) >> 8);
        modeWriteList[17] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('psvPsValue', temp);
        if (pControl == true) {
          modeWriteList[14] = ((temp & 0xFF00) >> 8);
          modeWriteList[15] = (temp & 0xFF);
          modeWriteList[41] = (8);
          preferences.setInt('psvPcValue', temp);
        }
        getData();
        // Fluttertoast.showToast(msg: modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[12] = ((temp & 0xFF00) >> 8);
        // modeWriteList[13] = (temp & 0xFF);
        // modeWriteList[22] = (0);
        // modeWriteList[23] = (16);
        // getData();
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[16] = ((temp & 0xFF00) >> 8);
        modeWriteList[17] = (temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (4);

        preferences.setInt('autoPsValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "itrig") {
      if (pccmvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[18]= (0);
        // modeWriteList[19]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (vccmvEnabled == true) {
        // int temp = int.tryParse(result.split("ab")[0]);
        // modeWriteList[10]=((temp & 0xFF00) >> 8);
        // modeWriteList[11]=(temp & 0xFF);
        // modeWriteList[18]= (0);
        // modeWriteList[19]= (8);
        // // // // print(modeWriteList.toString());
        // sendDataUsbConnection(modeWriteList,1);
      } else if (pacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);
        preferences.setInt('pacvItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vacvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);
        preferences.setInt('vacvItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('psimvItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (vsimvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('vsimvItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (psvEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('psvItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (prvcEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('prvcItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (cpapEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('cpapItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      } else if (autoEnabled == true) {
        int temp = int.tryParse(result.split("ab")[0]);
        modeWriteList[4] = ((-temp & 0xFF00) >> 8);
        modeWriteList[5] = (-temp & 0xFF);
        modeWriteList[41] = (0);
        modeWriteList[42] = (1);

        preferences.setInt('autoItrigValue', temp);
        getData();
        // // // print(modeWriteList.toString());
        sendDataUsbConnection(modeWriteList, 1);
      }
    } else if (res == "atime") {
      int temp = int.tryParse(result.split("ab")[0]);
      var atimeData = temp * 1000;

      modeWriteList[30] = ((atimeData & 0xFF00) >> 8);
      modeWriteList[31] = (atimeData & 0xFF);
      modeWriteList[41] = (0);
      modeWriteList[42] = (16);

      if (psvEnabled == true) {
        preferences.setInt('psvAtimeValue', temp);
      } else if (cpapEnabled == true) {
        preferences.setInt('cpappAtimeValue', temp);
      } else if (autoEnabled == true) {
        preferences.setInt('autoAtimeValue', temp);
      }
      getData();
      // // // print(modeWriteList.toString());
      sendDataUsbConnection(modeWriteList, 1);
    } else if (res == "ti") {
      int temp = int.tryParse(result.split("ab")[0]);
      var calTi = getTiValue(temp);
      var calTi1 = double.tryParse(calTi);
      var calTi2 = (calTi1 * 1000).toInt();
      modeWriteList[32] = ((calTi2 & 0xFF00) >> 8);
      modeWriteList[33] = (calTi2 & 0xFF);
      modeWriteList[41] = (0);
      modeWriteList[42] = (64);

      preferences.setInt('psvTiValue', temp);
      getData();
      // // // print(modeWriteList.toString());
      sendDataUsbConnection(modeWriteList, 1);
    }
  }

  getTiValueNumber(checkTi) {
    var data = checkTi == "0.5"
        ? 1
        : checkTi == "0.6"
            ? 2
            : checkTi == "0.7"
                ? 3
                : checkTi == "0.8"
                    ? 4
                    : checkTi == "0.9"
                        ? 5
                        : checkTi == "1.0"
                            ? 6
                            : checkTi == "1.1"
                                ? 7
                                : checkTi == "1.2"
                                    ? 8
                                    : checkTi == "1.3"
                                        ? 9
                                        : checkTi == "1.4"
                                            ? 10
                                            : checkTi == "1.5"
                                                ? 11
                                                : checkTi == "1.6"
                                                    ? 12
                                                    : checkTi == "1.7"
                                                        ? 13
                                                        : checkTi == "1.8"
                                                            ? 14
                                                            : checkTi == "1.9"
                                                                ? 15
                                                                : checkTi ==
                                                                        "2.0"
                                                                    ? 16
                                                                    : checkTi ==
                                                                            "2.1"
                                                                        ? 17
                                                                        : checkTi ==
                                                                                "2.2"
                                                                            ? 18
                                                                            : checkTi == "2.3"
                                                                                ? 19
                                                                                : checkTi == "2.4" ? 20 : checkTi == "2.5" ? 21 : checkTi == "2.6" ? 22 : checkTi == "2.7" ? 23 : checkTi == "2.8" ? 24 : checkTi == "2.9" ? 25 : checkTi == "3.0" ? 26 : checkTi == "3.1" ? 27 : checkTi == "3.2" ? 28 : checkTi == "3.3" ? 29 : checkTi == "3.4" ? 30 : checkTi == "3.5" ? 31 : checkTi == "3.6" ? 32 : checkTi == "3.7" ? 33 : checkTi == "3.8" ? 34 : checkTi == "3.9" ? 35 : checkTi == "4.0" ? 36 : checkTi == "4.1" ? 37 : checkTi == "4.2" ? 38 : checkTi == "4.3" ? 39 : checkTi == "4.4" ? 40 : checkTi == "4.5" ? 41 : checkTi == "4.6" ? 42 : checkTi == "4.7" ? 43 : checkTi == "4.8" ? 44 : checkTi == "4.9" ? 45 : checkTi == "5.0" ? 46 : "0.5";

    return data;
  }

  getTiValue(checkTi) {
    var data = checkTi == 1
        ? "0.5"
        : checkTi == 2
            ? "0.6"
            : checkTi == 3
                ? "0.7"
                : checkTi == 4
                    ? "0.8"
                    : checkTi == 5
                        ? "0.9"
                        : checkTi == 6
                            ? "1.0"
                            : checkTi == 7
                                ? "1.1"
                                : checkTi == 8
                                    ? "1.2"
                                    : checkTi == 9
                                        ? "1.3"
                                        : checkTi == 10
                                            ? "1.4"
                                            : checkTi == 11
                                                ? "1.5"
                                                : checkTi == 12
                                                    ? "1.6"
                                                    : checkTi == 13
                                                        ? "1.7"
                                                        : checkTi == 14
                                                            ? "1.8"
                                                            : checkTi == 15
                                                                ? "1.9"
                                                                : checkTi == 16
                                                                    ? "2.0"
                                                                    : checkTi ==
                                                                            17
                                                                        ? "2.1"
                                                                        : checkTi ==
                                                                                18
                                                                            ? "2.2"
                                                                            : checkTi == 19
                                                                                ? "2.3"
                                                                                : checkTi == 20 ? "2.4" : checkTi == 21 ? "2.5" : checkTi == 22 ? "2.6" : checkTi == 23 ? "2.7" : checkTi == 24 ? "2.8" : checkTi == 25 ? "2.9" : checkTi == 26 ? "3.0" : checkTi == 27 ? "3.1" : checkTi == 28 ? "3.2" : checkTi == 29 ? "3.3" : checkTi == 30 ? "3.4" : checkTi == 31 ? "3.5" : checkTi == 32 ? "3.6" : checkTi == 33 ? "3.7" : checkTi == 34 ? "3.8" : checkTi == 35 ? "3.9" : checkTi == 36 ? "4.0" : checkTi == 37 ? "4.1" : checkTi == 38 ? "4.2" : checkTi == 39 ? "4.3" : checkTi == 40 ? "4.4" : checkTi == 41 ? "4.5" : checkTi == 42 ? "4.6" : checkTi == 43 ? "4.7" : checkTi == 44 ? "4.8" : checkTi == 45 ? "4.9" : checkTi == 46 ? "5.0" : "0.5";

    return data;
  }

  getIeNumber(String ieDataValue) {
    var adata = ieDataValue == "4.0:1.0"
        ? 1
        : ieDataValue == "3.9:1.0"
            ? 2
            : ieDataValue == "3.8:1.0"
                ? 3
                : ieDataValue == "3.7:1.0"
                    ? 4
                    : ieDataValue == "3.6:1.0"
                        ? 5
                        : ieDataValue == "3.5:1.0"
                            ? 6
                            : ieDataValue == "3.4:1.0"
                                ? 7
                                : ieDataValue == "3.3:1.0"
                                    ? 8
                                    : ieDataValue == "3.2:1.0"
                                        ? 9
                                        : ieDataValue == "3.1:1.0"
                                            ? 10
                                            : ieDataValue == "3.0:1.0"
                                                ? 11
                                                : ieDataValue == "2.9:1.0"
                                                    ? 12
                                                    : ieDataValue == "2.8:1.0"
                                                        ? 13
                                                        : ieDataValue ==
                                                                "2.7:1.0"
                                                            ? 14
                                                            : ieDataValue ==
                                                                    "2.6:1.0"
                                                                ? 15
                                                                : ieDataValue ==
                                                                        "2.5:1"
                                                                    ? 16
                                                                    : ieDataValue ==
                                                                            "2.4:1.0"
                                                                        ? 17
                                                                        : ieDataValue ==
                                                                                "2.3:1.0"
                                                                            ? 18
                                                                            : ieDataValue == "2.2:1.0"
                                                                                ? 19
                                                                                : ieDataValue == "2.1:1.0" ? 20 : ieDataValue == "2.0:1.0" ? 21 : ieDataValue == "1.9:1.0" ? 22 : ieDataValue == "1.8:1.0" ? 23 : ieDataValue == "1.7:1.0" ? 24 : ieDataValue == "1.6:1.0" ? 25 : ieDataValue == "1.5:1.0" ? 26 : ieDataValue == "1.4:1.0" ? 27 : ieDataValue == "1.3:1.0" ? 28 : ieDataValue == "1.2:1.0" ? 29 : ieDataValue == "1.1:1.0" ? 30 : ieDataValue == "1.0:1.0" ? 31 : ieDataValue == "1.0:1.1" ? 32 : ieDataValue == "1.0:1.2" ? 33 : ieDataValue == "1.0:1.3" ? 34 : ieDataValue == "1.0:1.4" ? 35 : ieDataValue == "1.0:1.5" ? 36 : ieDataValue == "1.0:1.6" ? 37 : ieDataValue == "1.0:1.7" ? 38 : ieDataValue == "1.0:1.8" ? 39 : ieDataValue == "1.0:1.9" ? 40 : ieDataValue == "1.0:2.0" ? 41 : ieDataValue == "1.0:2.1" ? 42 : ieDataValue == "1.0:2.2" ? 43 : ieDataValue == "1.0:2.3" ? 44 : ieDataValue == "1.0:2.4" ? 45 : ieDataValue == "1.0:2.5" ? 46 : ieDataValue == "1.0:2.6" ? 47 : ieDataValue == "1.0:2.7" ? 48 : ieDataValue == "1.0:2.8" ? 49 : ieDataValue == "1.0:2.9" ? 50 : ieDataValue == "1.0:3.0" ? 51 : ieDataValue == "1.0:3.1" ? 52 : ieDataValue == "1.0:3.2" ? 53 : ieDataValue == "1.0:3.3" ? 54 : ieDataValue == "1.0:3.4" ? 55 : ieDataValue == "1.0:3.5" ? 56 : ieDataValue == "1.0:3.6" ? 57 : ieDataValue == "1.0:3.7" ? 58 : ieDataValue == "1.0:3.8" ? 59 : ieDataValue == "1.0:3.9" ? 60 : ieDataValue == "1.0:4.0" ? 61 : 0;
    return adata;
  }

  getIeData(pccmvIeValue, int res) {
    var data = pccmvIeValue == 1
        ? "4.0:1"
        : pccmvIeValue == 2
            ? "3.9:1"
            : pccmvIeValue == 3
                ? "3.8:1"
                : pccmvIeValue == 4
                    ? "3.7:1"
                    : pccmvIeValue == 5
                        ? "3.6:1"
                        : pccmvIeValue == 6
                            ? "3.5:1"
                            : pccmvIeValue == 7
                                ? "3.4:1"
                                : pccmvIeValue == 8
                                    ? "3.3:1"
                                    : pccmvIeValue == 9
                                        ? "3.2:1"
                                        : pccmvIeValue == 10
                                            ? "3.1:1"
                                            : pccmvIeValue == 11
                                                ? "3.0:1"
                                                : pccmvIeValue == 12
                                                    ? "2.9:1"
                                                    : pccmvIeValue == 13
                                                        ? "2.8:1"
                                                        : pccmvIeValue == 14
                                                            ? "2.7:1"
                                                            : pccmvIeValue == 15
                                                                ? "2.6:1"
                                                                : pccmvIeValue ==
                                                                        16
                                                                    ? "2.5:1"
                                                                    : pccmvIeValue ==
                                                                            17
                                                                        ? "2.4:1"
                                                                        : pccmvIeValue ==
                                                                                18
                                                                            ? "2.3:1"
                                                                            : pccmvIeValue == 19
                                                                                ? "2.2:1"
                                                                                : pccmvIeValue == 20 ? "2.1:1" : pccmvIeValue == 21 ? "2.0:1" : pccmvIeValue == 22 ? "1.9:1" : pccmvIeValue == 23 ? "1.8:1" : pccmvIeValue == 24 ? "1.7:1" : pccmvIeValue == 25 ? "1.6:1" : pccmvIeValue == 26 ? "1.5:1" : pccmvIeValue == 27 ? "1.4:1" : pccmvIeValue == 28 ? "1.3:1" : pccmvIeValue == 29 ? "1.2:1" : pccmvIeValue == 30 ? "1.1:1" : pccmvIeValue == 31 ? "1:1" : pccmvIeValue == 32 ? "1:1.1" : pccmvIeValue == 33 ? "1:1.2" : pccmvIeValue == 34 ? "1:1.3" : pccmvIeValue == 35 ? "1:1.4" : pccmvIeValue == 36 ? "1:1.5" : pccmvIeValue == 37 ? "1:1.6" : pccmvIeValue == 38 ? "1:1.7" : pccmvIeValue == 39 ? "1:1.8" : pccmvIeValue == 40 ? "1:1.9" : pccmvIeValue == 41 ? "1:2.0" : pccmvIeValue == 42 ? "1:2.1" : pccmvIeValue == 43 ? "1:2.2" : pccmvIeValue == 44 ? "1:2.3" : pccmvIeValue == 45 ? "1:2.4" : pccmvIeValue == 46 ? "1:2.5" : pccmvIeValue == 47 ? "1:2.6" : pccmvIeValue == 48 ? "1:2.7" : pccmvIeValue == 49 ? "1:2.8" : pccmvIeValue == 50 ? "1:2.9" : pccmvIeValue == 51 ? "1:3.0" : pccmvIeValue == 52 ? "1:3.1" : pccmvIeValue == 53 ? "1:3.2" : pccmvIeValue == 54 ? "1:3.3" : pccmvIeValue == 55 ? "1:3.4" : pccmvIeValue == 56 ? "1:3.5" : pccmvIeValue == 57 ? "1:3.6" : pccmvIeValue == 58 ? "1:3.7" : pccmvIeValue == 59 ? "1:3.8" : pccmvIeValue == 60 ? "1:3.9" : pccmvIeValue == 61 ? "1:4.0" : "0".toString();

    var dataI = data.split(":")[0];
    var dataE = data.split(":")[1];
    if (res == 1) {
      return data;
    } else if (res == 2) {
      // // // print(dataI);
      return dataI;
    } else if (res == 3) {
      // // // print(dataE);
      return dataE;
    }
  }

  modeSetCheck() async {
    setState(() {
      modeWriteList = [];
    });

    if (pccmvEnabled == true) {
      var dataI = getIeData(pccmvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(pccmvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();

      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0); //0
        modeWriteList.add(20); //1
        modeWriteList.add(0); //2
        modeWriteList.add(6); //3

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add((pccmvRRValue & 0xFF00) >> 8); //4
        modeWriteList.add((pccmvRRValue & 0x00FF)); //5

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add((dataI2 & 0x00FF)); //6
        modeWriteList.add((dataE2 & 0x00FF)); //7

        modeWriteList.add((pccmvPeepValue & 0xFF00) >> 8); //8
        modeWriteList.add((pccmvPeepValue & 0x00FF)); //9

        modeWriteList.add((pccmvPcValue & 0xFF00) >> 8); //10
        modeWriteList.add((pccmvPcValue & 0x00FF)); //11

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add((0 & 0xFF00) >> 8); //14
        modeWriteList.add((0 & 0x00FF)); //15

        modeWriteList.add((2400 & 0xFF00) >> 8); //16
        modeWriteList.add((2400 & 0x00FF)); //17

        modeWriteList.add((pccmvFio2Value & 0xFF00) >> 8); //12
        modeWriteList.add((pccmvFio2Value & 0x00FF)); //13

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19
        modeWriteList.add(0); //20
        modeWriteList.add(0); //21

        modeWriteList.add(0); //18

        modeWriteList.add(1); //22 val
        modeWriteList.add(255); //23

        modeWriteList.add((pccmvPplateauValue & 0xFF00) >> 8);
        modeWriteList.add((pccmvPplateauValue & 0x00FF));

        modeWriteList.add((pccmvFlowValue & 0xFF00) >> 8);
        modeWriteList.add((pccmvFlowValue & 0x00FF));

        _isdatasendSuccess = false;
        // modeWriteList.add((pccmvFlowValue & 0xFF00) >> 8);
        // modeWriteList.add((pccmvFlowValue & 0x00FF));
        // modeWriteList.add(0x7F);
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "PC-CMV");
      preferences.setString("checkMode", "pccmv");
      preferences.setInt("rr", pccmvRRValue);
      preferences.setInt("ie", pccmvIeValue);
      // Fluttertoast.showToast(msg:pccmvIeValue.toString());
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", pccmvPeepValue);
      preferences.setInt("fio2", pccmvFio2Value);
      preferences.setInt("pc", pccmvPcValue);
      preferences.setBool("flag", assistmodePressureOn);
      preferences.setBool('calli', false);

      preferences.setInt('pccmvRRValue', pccmvRRValue);
      preferences.setInt('pccmvIeValue', pccmvIeValue);
      preferences.setInt('pccmvPeepValue', pccmvPeepValue);
      preferences.setInt('pccmvPcValue', pccmvPcValue);
      preferences.setInt('pccmvFio2Value', pccmvFio2Value);
      preferences.setInt('pccmvVtminValue', pccmvVtminValue);
      preferences.setInt('pccmvPplateauValue', pccmvPplateauValue);
      preferences.setInt('pccmvTihValue', pccmvTihValue);
      preferences.setInt('pccmvFlowValue', pccmvFlowValue);
      preferences.setInt('pccmvdefaultValue', pccmvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        sendDataUsbConnection(modeWriteList, 2);
        calculateTiTeValue(pccmvRRValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (vccmvEnabled == true) {
      var dataI = getIeData(vccmvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(vccmvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();

      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0); //1
        modeWriteList.add(20); //2
        modeWriteList.add(0); //3
        modeWriteList.add(7); //4

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add((vccmvRRValue & 0xFF00) >> 8); //5
        modeWriteList.add((vccmvRRValue & 0x00FF)); //6

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add((dataI2 & 0x00FF)); //7
        modeWriteList.add((dataE2 & 0x00FF)); //8

        modeWriteList.add((vccmvPeepValue & 0xFF00) >> 8); //9
        modeWriteList.add((vccmvPeepValue & 0x00FF));

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //18
        modeWriteList.add(0); //19

        modeWriteList.add(0); //15
        modeWriteList.add(0);

        modeWriteList.add((vccmvPcMaxValue & 0xFF00) >> 8); //17
        modeWriteList.add((vccmvPcMaxValue & 0x00FF));

        modeWriteList.add((vccmvVtValue & 0xFF00) >> 8); //11
        modeWriteList.add((vccmvVtValue & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add((vccmvFio2Value & 0xFF00) >> 8); //13
        modeWriteList.add((vccmvFio2Value & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //
        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add(0); //19

        modeWriteList.add(1); //23
        modeWriteList.add(255);

        modeWriteList.add((vccmvPplateauValue & 0xFF00) >> 8); //13
        modeWriteList.add((vccmvPplateauValue & 0x00FF));

        modeWriteList.add((vccmvFlowValue & 0xFF00) >> 8); //13
        modeWriteList.add((vccmvFlowValue & 0x00FF));

        _isdatasendSuccess = false;
        // modeWriteList.add((vccmvFlowValue & 0xFF00) >> 8);
        // modeWriteList.add((vccmvFlowValue & 0x00FF));
        // modeWriteList.add(0x7F);
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "VC-CMV");
      preferences.setString("checkMode", "vccmv");
      preferences.setInt("rr", vccmvRRValue);
      preferences.setInt("ie", vccmvIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", vccmvPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", vccmvFio2Value);
      preferences.setInt("vt", vccmvVtValue);
      preferences.setBool("flag1", assistmodeVolumeOn);

      preferences.setInt('vccmvRRValue', vccmvRRValue);
      preferences.setInt('vccmvIeValue', vccmvIeValue);
      preferences.setInt('vccmvPeepValue', vccmvPeepValue);
      preferences.setInt('vccmvPplateauValue', vccmvPplateauValue);
      preferences.setInt('vccmvPcMaxValue', vccmvPcMaxValue);
      preferences.setInt('vccmvFio2Value', vccmvFio2Value);
      preferences.setInt('vccmvVtValue', vccmvVtValue);
      preferences.setInt('vccmvTihValue', vccmvTihValue);
      preferences.setInt('vccmvFlowValue', vccmvFlowValue);
      preferences.setInt('vccmvdefaultValue', vccmvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        sendDataUsbConnection(modeWriteList, 2);
        calculateTiTeValue(vccmvRRValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });
      // getData();
      newTreatEnabled = false;

      monitorEnabled = false;
    } else if (pacvEnabled == true) {
      var dataI = getIeData(pacvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(pacvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();

      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0); //1
        modeWriteList.add(20); //2
        modeWriteList.add(0);
        modeWriteList.add(2); //4

        modeWriteList.add((-pacvItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-pacvItrigValue & 0x00FF));

        modeWriteList.add((pacvRrValue & 0xFF00) >> 8); //7
        modeWriteList.add((pacvRrValue & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add((dataI2 & 0x00FF)); //8
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((pacvPeepValue & 0xFF00) >> 8); //11
        modeWriteList.add((pacvPeepValue & 0x00FF));

        modeWriteList.add((pacvPcValue & 0xFF00) >> 8); //13
        modeWriteList.add((pacvPcValue & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add((0 & 0xFF00) >> 8); //15
        modeWriteList.add((0 & 0x00FF));

        modeWriteList.add((2400 & 0xFF00) >> 8); //17
        modeWriteList.add((2400 & 0x00FF));

        modeWriteList.add((pacvFio2Value & 0xFF00) >> 8); //19
        modeWriteList.add((pacvFio2Value & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0); //
        modeWriteList.add(0); //23
        modeWriteList.add(0); //

        modeWriteList.add(0); //19

        modeWriteList.add(3); //25
        modeWriteList.add(255);

        modeWriteList.add((pacvPplateauValue & 0xFF00) >> 8); //19
        modeWriteList.add((pacvPplateauValue & 0x00FF));

        modeWriteList.add((pacvFlowValue & 0xFF00) >> 8); //19
        modeWriteList.add((pacvFlowValue & 0x00FF));
        _isdatasendSuccess = false;
        // modeWriteList.add((pacvFlowRampValue & 0xFF00) >> 8);
        // modeWriteList.add((pacvFlowRampValue & 0x00FF));

        // modeWriteList.add(0x7F);
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "PACV");
      preferences.setString("checkMode", "pacv");
      preferences.setInt("rr", pacvRrValue);
      preferences.setInt("ie", pacvIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", pacvPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", pacvFio2Value);
      preferences.setInt("pc", pacvPcValue);
      preferences.setInt("itrig", pacvItrigValue);
      preferences.setBool("flag", assistmodePressureOn);
      preferences.setBool('calli', false);

      //==
      preferences.setInt('pacvItrigValue', pacvItrigValue);
      preferences.setInt('pacvRrValue', pacvRrValue);
      preferences.setInt('pacvIeValue', pacvIeValue);
      preferences.setInt('pacvPeepValue', pacvPeepValue);
      preferences.setInt('pacvPcValue', pacvPcValue);
      preferences.setInt('pacvPplateauValue', pacvPplateauValue);
      preferences.setInt('pacvFlowValue', pacvFlowValue);
      preferences.setInt('pacvFio2Value', pacvFio2Value);
      preferences.setInt('pacvFlowRampValue', pacvFlowRampValue);
      preferences.setInt('pacvdefaultValue', pacvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        sendDataUsbConnection(modeWriteList, 2);
        calculateTiTeValue(pacvRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (vacvEnabled == true) {
      var dataI = getIeData(vacvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(vacvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();
      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0); //1
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(1); //4

        modeWriteList.add((-vacvItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-vacvItrigValue & 0x00FF));

        modeWriteList.add((vacvRrValue & 0xFF00) >> 8); //7
        modeWriteList.add((vacvRrValue & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add((dataI2 & 0x00FF)); //9
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((vacvPeepValue & 0xFF00) >> 8); //11
        modeWriteList.add((vacvPeepValue & 0x00FF));

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add(0); //19
        modeWriteList.add(0); //

        modeWriteList.add((0 & 0xFF00) >> 8); //15
        modeWriteList.add((0 & 0x00FF));

        modeWriteList.add((vacvPcMaxValue & 0xFF00) >> 8); //17
        modeWriteList.add((vacvPcMaxValue & 0x00FF));

        modeWriteList.add((vacvVtValue & 0xFF00) >> 8); //13
        modeWriteList.add((vacvVtValue & 0x00FF));

        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add((vacvFio2Value & 0xFF00) >> 8); //19
        modeWriteList.add((vacvFio2Value & 0x00FF));

        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0); //
        modeWriteList.add(0); //23
        modeWriteList.add(0); //

        modeWriteList.add(0); //21

        modeWriteList.add(3); //25
        modeWriteList.add(255);

        modeWriteList.add((vacvPplateauValue & 0xFF00) >> 8); //19
        modeWriteList.add((vacvPplateauValue & 0x00FF));

        modeWriteList.add((vacvFlowValue & 0xFF00) >> 8); //19
        modeWriteList.add((vacvFlowValue & 0x00FF));
        _isdatasendSuccess = false;
        // modeWriteList.add((vacvFlowValue & 0xFF00) >> 8);
        // modeWriteList.add((vacvFlowValue & 0x00FF));

        // modeWriteList.add(0x7F);
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "VACV");
      preferences.setString("checkMode", "vacv");
      preferences.setInt("rr", vacvRrValue);
      preferences.setInt("ie", vacvIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", vacvPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", vacvFio2Value);
      preferences.setInt("vt", vacvVtValue);
      preferences.setInt("itrig", vacvItrigValue);
      preferences.setBool("flag1", assistmodeVolumeOn);
      preferences.setBool('calli', false);

      preferences.setInt('vacvItrigValue', vacvItrigValue);
      preferences.setInt('vacvRrValue', vacvRrValue);
      preferences.setInt('vacvIeValue', vacvIeValue);
      preferences.setInt('vacvPeepValue', vacvPeepValue);
      preferences.setInt('vacvVtValue', vacvVtValue);
      preferences.setInt('vacvPplateauValue', vacvPplateauValue);
      preferences.setInt('vacvPcMaxValue', vacvPcMaxValue);
      preferences.setInt('vacvFio2Value', vacvFio2Value);
      preferences.setInt('vacvFlowValue', vacvFlowValue);
      preferences.setInt('vacvdefaultValue', vacvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        await sendDataUsbConnection(modeWriteList, 2);
        await calculateTiTeValue(vacvRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (psimvEnabled == true) {
      var dataI = getIeData(psimvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(psimvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();
      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0); //0
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(4);

        modeWriteList.add((-psimvItrigValue & 0xFF00) >> 8); //4
        modeWriteList.add((-psimvItrigValue & 0x00FF));

        modeWriteList.add((psimvRrValue & 0xFF00) >> 8); //6
        modeWriteList.add((psimvRrValue & 0x00FF));

        modeWriteList.add(0); //21
        modeWriteList.add(0); //

        modeWriteList.add((dataI2 & 0x00FF)); //8
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((psimvPeepValue & 0xFF00) >> 8); //10
        modeWriteList.add((psimvPeepValue & 0x00FF));

        modeWriteList.add((psimvPcValue & 0xFF00) >> 8); //12
        modeWriteList.add((psimvPcValue & 0x00FF));

        modeWriteList.add((psimvPsValue & 0xFF00) >> 8); //20
        modeWriteList.add((psimvPsValue & 0x00FF));

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add((0 & 0xFF00) >> 8); //14
        modeWriteList.add((0 & 0x00FF));

        modeWriteList.add((psimvVtMaxValue & 0xFF00) >> 8); //16
        modeWriteList.add((psimvVtMaxValue & 0x00FF));

        modeWriteList.add((psimvFio2Value & 0xFF00) >> 8); //18
        modeWriteList.add((psimvFio2Value & 0x00FF));

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //
        modeWriteList.add(0); //24
        modeWriteList.add(0); //

        modeWriteList.add(0); //22

        modeWriteList.add(7); //26
        modeWriteList.add(255); //27

        modeWriteList.add((psimvPplateauValue & 0xFF00) >> 8); //18
        modeWriteList.add((psimvPplateauValue & 0x00FF));

        modeWriteList.add((psimvFlowValue & 0xFF00) >> 8); //18
        modeWriteList.add((psimvFlowValue & 0x00FF));
        _isdatasendSuccess = false;
        // modeWriteList.add(0x7F);
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "PSIMV");
      preferences.setString("checkMode", "psimv");
      preferences.setInt("rr", psimvRrValue);
      preferences.setInt("ie", psimvIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", psimvPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", psimvFio2Value);
      preferences.setInt("ps", psimvPsValue);
      preferences.setInt("pc", psimvPcValue);
      preferences.setInt("itrig", psimvItrigValue);
      preferences.setBool('calli', false);

      preferences.setInt('psimvItrigValue', psimvItrigValue);

      preferences.setInt('psimvPplateauValue', psimvPplateauValue);
      preferences.setInt('psimvVtMaxValue', psimvVtMaxValue);
      preferences.setInt('psimvRrValue', psimvRrValue);
      preferences.setInt('psimvPsValue', psimvPsValue);
      preferences.setInt('psimvIeValue', psimvIeValue);
      preferences.setInt('psimvPeepValue', psimvPeepValue);
      preferences.setInt('psimvPcValue', psimvPcValue);
      preferences.setInt('psimvFio2Value', psimvFio2Value);
      preferences.setInt('psimvFlowValue', psimvFlowValue);
      preferences.setInt('psimvdefaultValue', psimvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        await sendDataUsbConnection(modeWriteList, 2);
        await calculateTiTeValue(psimvRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (vsimvEnabled == true) {
      var dataI = getIeData(vsimvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(vsimvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();
      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0);
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(5);

        modeWriteList.add((-vsimvItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-vsimvItrigValue & 0x00FF)); //6

        modeWriteList.add((vsimvRrValue & 0xFF00) >> 8); //7
        modeWriteList.add((vsimvRrValue & 0x00FF)); //8

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add((dataI2 & 0x00FF)); //9
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((vsimvPeepValue & 0xFF00) >> 8); //11
        modeWriteList.add((vsimvPeepValue & 0x00FF)); //12

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add((vsimvPsValue & 0xFF00) >> 8); //21
        modeWriteList.add((vsimvPsValue & 0x00FF));

        modeWriteList.add((0 & 0xFF00) >> 8); //13
        modeWriteList.add((0 & 0x00FF));

        modeWriteList.add((vsimvPcMaxValue & 0xFF00) >> 8); //15
        modeWriteList.add((vsimvPcMaxValue & 0x00FF));

        modeWriteList.add((vsimvVtValue & 0xFF00) >> 8); //17
        modeWriteList.add((vsimvVtValue & 0x00FF));

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add((vsimvFio2Value & 0xFF00) >> 8); //19
        modeWriteList.add((vsimvFio2Value & 0x00FF));

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //23
        modeWriteList.add(0); //
        modeWriteList.add(0); //25
        modeWriteList.add(0); //

        modeWriteList.add(0); //22

        modeWriteList.add(7); //27
        modeWriteList.add(255);

        modeWriteList.add((vsimvPlateauValue & 0xFF00) >> 8); //15
        modeWriteList.add((vsimvPlateauValue & 0x00FF));

        modeWriteList.add((vsimvFlowValue & 0xFF00) >> 8); //15
        modeWriteList.add((vsimvFlowValue & 0x00FF));
        _isdatasendSuccess = false;
        // modeWriteList.add(0x7F); //23
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "VSIMV");
      preferences.setString("checkMode", "vsimv");
      preferences.setInt("rr", vsimvRrValue);
      preferences.setInt("ie", vsimvIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", vsimvPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", vsimvFio2Value);
      preferences.setInt("vt", vsimvVtValue);
      preferences.setInt("ps", vsimvPsValue);
      preferences.setInt("pc", vsimvPcMaxValue);
      preferences.setInt("itrig", vsimvItrigValue);
      preferences.setBool('calli', false);

      preferences.setInt('vsimvItrigValue', vsimvItrigValue);

      preferences.setInt('vsimvPlateauValue', vsimvPlateauValue);
      preferences.setInt('vsimvPcMaxValue', vsimvPcMaxValue);
      preferences.setInt('vsimvRrValue', vsimvRrValue);
      preferences.setInt('vsimvIeValue', vsimvIeValue);
      preferences.setInt('vsimvPeepValue', vsimvPeepValue);
      preferences.setInt('vsimvVtValue', vsimvVtValue);
      preferences.setInt('vsimvPsValue', vsimvPsValue);
      preferences.setInt('vsimvFio2Value', vsimvFio2Value);
      preferences.setInt('vsimvFlowValue', vsimvFlowValue);
      preferences.setInt('vsimvdefaultValue', vsimvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        await sendDataUsbConnection(modeWriteList, 2);
        await calculateTiTeValue(vsimvRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (psvEnabled == true) {
      var dataI = getIeData(psvIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(psvIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();

      var calTi = getTiValue(psvTiValue);
      var calTi1 = double.tryParse(calTi);
      var calTi2 = (calTi1 * 1000).toInt();

      // var calTi = (double.tryParse(getTiValue(psvTiValue)) * 1000).toInt();

      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0);
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(3);

        modeWriteList.add((-psvItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-psvItrigValue & 0x00FF)); //6

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add((psvBackupRrValue & 0xFF00) >> 8); //19
        modeWriteList.add((psvBackupRrValue & 0x00FF));

        modeWriteList.add((dataI2 & 0x00FF)); //15
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((psvPeepValue & 0xFF00) >> 8); //7
        modeWriteList.add((psvPeepValue & 0x00FF)); //8

        if (pControl == true) {
          modeWriteList.add((psvPcValue & 0xFF00) >> 8); //27
          modeWriteList.add((psvPcValue & 0x00FF));
        } else {
          modeWriteList.add(0); //27
          modeWriteList.add(0);
        }

        modeWriteList.add((psvPsValue & 0xFF00) >> 8); //9
        modeWriteList.add((psvPsValue & 0x00FF)); //10

        modeWriteList.add(0);
        modeWriteList.add(0);

        modeWriteList.add(0);
        modeWriteList.add(0);

        if (pControl == false) {
          modeWriteList.add((psvVtValue & 0xFF00) >> 8);
          modeWriteList.add((psvVtValue & 0x00FF));
        } else {
          modeWriteList.add(0);
          modeWriteList.add(0);
        }

        modeWriteList.add((0 & 0xFF00) >> 8); //21
        modeWriteList.add((0 & 0x00FF));

        modeWriteList.add((2400 & 0xFF00) >> 8); //23
        modeWriteList.add((2400 & 0x00FF));

        modeWriteList.add((psvFio2Value & 0xFF00) >> 8); //11
        modeWriteList.add((psvFio2Value & 0x00FF));

        var calAtime = psvAtimeValue * 1000;

        modeWriteList.add((calAtime & 0xFF00) >> 8); //13
        modeWriteList.add((calAtime & 0x00FF));

        modeWriteList.add((calTi2 & 0xFF00) >> 8); //17
        modeWriteList.add((calTi2 & 0x00FF)); //12

        modeWriteList.add((psvMinTeValue & 0xFF00) >> 8); //25
        modeWriteList.add((psvMinTeValue & 0x00FF));

        modeWriteList.add(0); //29
        modeWriteList.add(0); //
        modeWriteList.add(0); //31
        modeWriteList.add(0); //

        if (pControl == true) {
          modeWriteList.add(1);
        } else {
          modeWriteList.add(2);
        }

        modeWriteList.add(255); //33
        modeWriteList.add(255);

        modeWriteList.add((psvPlateauValue & 0xFF00) >> 8); //11
        modeWriteList.add((psvPlateauValue & 0x00FF));

        modeWriteList.add((psvFlowValue & 0xFF00) >> 8); //11
        modeWriteList.add((psvFlowValue & 0x00FF));
        _isdatasendSuccess = false;
        // modeWriteList.add(0x7F); //23
        // Fluttertoast.showToast(msg: modeWriteList.toString());
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "PSV");
      preferences.setString("checkMode", "psv");
      if (pControl == true) {
        preferences.setBool("pControl", true);
      } else {
        preferences.setBool("pControl", false);
      }
      preferences.setInt("rr", psvBackupRrValue);
      preferences.setInt("ie", psvIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", psvPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", psvFio2Value);
      preferences.setInt("ps", psvPsValue);
      preferences.setInt("pc", psvPcValue);
      preferences.setInt("itrig", psvItrigValue); //atime ti
      preferences.setInt("atime", psvAtimeValue);
      preferences.setInt("ti", psvTiValue);
      preferences.setInt("vt", psvVtValue);
      preferences.setBool('calli', false);
      // Fluttertoast.showToast(msg:psvPsValue.toString() +" pc "+psvPcValue.toString());

      preferences.setInt('psvItrigValue', psvItrigValue);

      preferences.setInt('psvPlateauValue', psvPlateauValue);
      preferences.setInt('psvFlowValue', psvFlowValue);
      preferences.setInt('psvVtValue', psvVtValue);

      preferences.setInt('psvTiValue', psvTiValue);
      preferences.setInt('psvPeepValue', psvPeepValue);
      preferences.setInt('psvIeValue', psvIeValue);
      preferences.setInt('psvPsValue', psvPsValue);
      preferences.setInt('psvFio2Value', psvFio2Value);
      preferences.setInt('psvBackupRrValue', psvBackupRrValue);
      preferences.setInt('psvPcValue', psvPcValue);
      preferences.setInt('psvAtimeValue', psvAtimeValue);
      preferences.setInt('psvEtrigValue', psvEtrigValue);
      preferences.setInt('psvMinTeValue', psvMinTeValue);
      preferences.setInt('psvdefaultValue', psvdefaultValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        await sendDataUsbConnection(modeWriteList, 2);
        await calculateTiTeValue(psvBackupRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (prvcEnabled == true) {
      var dataI = getIeData(prvcIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(prvcIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();
      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0); //1
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(14);

        modeWriteList.add((-prvcItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-prvcItrigValue & 0x00FF));

        modeWriteList.add((prvcRrValue & 0xFF00) >> 8); //7
        modeWriteList.add((prvcRrValue & 0x00FF));

        modeWriteList.add(0); //9
        modeWriteList.add(0);

        modeWriteList.add((dataI2 & 0x00FF)); //11
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((prvcPeepValue & 0xFF00) >> 8); //13
        modeWriteList.add((prvcPeepValue & 0x00FF));

        modeWriteList.add(0); //15
        modeWriteList.add(0);

        modeWriteList.add(0); //17
        modeWriteList.add(0);

        modeWriteList.add(0); //19
        modeWriteList.add(0);

        modeWriteList.add((prvcPcMaxValue & 0xFF00) >> 8); //21
        modeWriteList.add((prvcPcMaxValue & 0x00FF));

        modeWriteList.add((prvcVtValue & 0xFF00) >> 8); //23
        modeWriteList.add((prvcVtValue & 0x00FF));

        modeWriteList.add(0); //25
        modeWriteList.add(0);

        modeWriteList.add(0); //27
        modeWriteList.add(0);

        modeWriteList.add((prvcFio2Value & 0xFF00) >> 8); //29
        modeWriteList.add((prvcFio2Value & 0x00FF));

        modeWriteList.add(0); //31
        modeWriteList.add(0);

        modeWriteList.add(0); //33
        modeWriteList.add(0);

        modeWriteList.add(0); //35
        modeWriteList.add(0);

        modeWriteList.add(0); //37
        modeWriteList.add(0);
        modeWriteList.add(0); //39
        modeWriteList.add(0);

        modeWriteList.add(1); //41

        modeWriteList.add(3); //42
        modeWriteList.add(255); //43

        modeWriteList.add((prvcPlateauValue & 0xFF00) >> 8); //29
        modeWriteList.add((prvcPlateauValue & 0x00FF));

        modeWriteList.add((prvcFlowValue & 0xFF00) >> 8); //29
        modeWriteList.add((prvcFlowValue & 0x00FF));
        _isdatasendSuccess = false;
        // modeWriteList.add((prvcFlowValue & 0xFF00) >> 8);
        // modeWriteList.add((prvcFlowValue & 0x00FF));

        // modeWriteList.add(0x7F);
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "PRVC");
      preferences.setString("checkMode", "prvc");
      preferences.setInt("rr", prvcRrValue);
      preferences.setInt("ie", prvcIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", prvcPeepValue);
      preferences.setInt("pc", prvcPcMaxValue);
      preferences.setInt("fio2", prvcFio2Value);
      preferences.setInt("vt", prvcVtValue);
      preferences.setInt("itrig", prvcItrigValue);
      preferences.setBool('calli', false);

      preferences.setInt('prvcItrigValue', prvcItrigValue);

      preferences.setInt('prvcPlateauValue', prvcPlateauValue);
      preferences.setInt('prvcPcMaxValue', prvcPcMaxValue);
      preferences.setInt('prvcRrValue', prvcRrValue);
      preferences.setInt('prvcIeValue', prvcIeValue);
      preferences.setInt('prvcPeepValue', prvcPeepValue);
      preferences.setInt('prvcVtValue', prvcVtValue);
      preferences.setInt('prvcFio2Value', prvcFio2Value);
      preferences.setInt('prvcFlowValue', prvcFlowValue);
      preferences.setInt('prvcdefaultValue', prvcdefaultValue);

      // sendDataUsbConnection(modeWriteList, 2);
      if (_status == "Connected") {
        preferences.setBool("play", false);
        await sendDataUsbConnection(modeWriteList, 2);
        await calculateTiTeValue(prvcRrValue, dataI1, dataE1);
        // modesEnabled = false;
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (cpapEnabled == true) {
      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0);
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(3);

        modeWriteList.add((-cpappItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-cpappItrigValue & 0x00FF)); //6

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add((cpappBackupRrValue & 0xFF00) >> 8); //19
        modeWriteList.add((cpappBackupRrValue & 0x00FF));

        modeWriteList.add(10); //15
        modeWriteList.add(30);

        modeWriteList.add((cpappPeepValue & 0xFF00) >> 8); //7
        modeWriteList.add((cpappPeepValue & 0x00FF)); //8

        modeWriteList.add((cpappPcValue & 0xFF00) >> 8); //19
        modeWriteList.add((cpappPcValue & 0x00FF));

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add(0); //9
        modeWriteList.add(0); //10

        modeWriteList.add((cpappFio2Value & 0xFF00) >> 8); //11
        modeWriteList.add((cpappFio2Value & 0x00FF));

        var calAtime = cpappAtimeValue * 1000;

        modeWriteList.add((calAtime & 0xFF00) >> 8); //13
        modeWriteList.add((calAtime & 0x00FF));

        modeWriteList.add(0); //17
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0);

        modeWriteList.add(0); //25
        modeWriteList.add(0);
        modeWriteList.add(0); //29
        modeWriteList.add(0); //

        modeWriteList.add(1); //31

        modeWriteList.add(255); //33
        modeWriteList.add(255);
        _isdatasendSuccess = false;
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "CPAP");
      preferences.setString("checkMode", "cpap");
      preferences.setInt("rr", cpappBackupRrValue);
      preferences.setInt("peep", cpappPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", cpappFio2Value);
      preferences.setInt("pc", cpappPcValue);
      preferences.setInt("itrig", cpappItrigValue); //atime ti
      preferences.setInt("atime", cpappAtimeValue);

      // Fluttertoast.showToast(msg:cpappcpappalue.toString() +" pc "+cpappPcValue.toString());

      preferences.setInt('cpappItrigValue', cpappItrigValue);
      preferences.setInt('cpappPeepValue', cpappPeepValue);
      preferences.setInt('cpappFio2Value', cpappFio2Value);
      preferences.setInt('cpappBackupRrValue', cpappBackupRrValue);
      preferences.setInt('cpappPcValue', cpappPcValue);
      preferences.setInt('cpappAtimeValue', cpappAtimeValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        await sendDataUsbConnection(modeWriteList, 2);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (autoEnabled == true) {
      var dataI = getIeData(autoIeValue, 2);
      var dataI1 = double.tryParse(dataI);
      var dataI2 = (dataI1 * 10).toInt();

      var dataE = getIeData(autoIeValue, 3);
      var dataE1 = double.tryParse(dataE);
      var dataE2 = (dataE1 * 10).toInt();

      var calTi = getTiValue(autoTiValue);
      var calTi1 = double.tryParse(calTi);
      var calTi2 = (calTi1 * 1000).toInt();

      // var calTi = (double.tryParse(getTiValue(autoTiValue)) * 1000).toInt();

      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0);
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(21);

        modeWriteList.add((-autoItrigValue & 0xFF00) >> 8); //5
        modeWriteList.add((-autoItrigValue & 0x00FF)); //6

        modeWriteList.add(0); //7
        modeWriteList.add(0); //8

        modeWriteList.add((autoBackupRrValue & 0xFF00) >> 8); //9
        modeWriteList.add((autoBackupRrValue & 0x00FF));

        modeWriteList.add((dataI2 & 0x00FF)); //11
        modeWriteList.add((dataE2 & 0x00FF));

        modeWriteList.add((autoPeepValue & 0xFF00) >> 8); //13
        modeWriteList.add((autoPeepValue & 0x00FF)); //8

        modeWriteList.add((autoPcMaxValue & 0xFF00) >> 8); //15
        modeWriteList.add((autoPcMaxValue & 0x00FF));

        modeWriteList.add((autoautoalue & 0xFF00) >> 8); //17
        modeWriteList.add((autoautoalue & 0x00FF)); //10 //8

        modeWriteList.add(0); //19
        modeWriteList.add(0); //10

        modeWriteList.add(0); //21
        modeWriteList.add(0);

        modeWriteList.add((autoVtValue & 0xFF00) >> 8); //23
        modeWriteList.add((autoVtValue & 0x00FF));

        modeWriteList.add(0); //25
        modeWriteList.add(0); //10

        modeWriteList.add(0); //27
        modeWriteList.add(0); //10

        modeWriteList.add((autoFio2Value & 0xFF00) >> 8); //29
        modeWriteList.add((autoFio2Value & 0x00FF));

        var calAtime = autoAtimeValue * 1000;

        modeWriteList.add((calAtime & 0xFF00) >> 8); //31
        modeWriteList.add((calAtime & 0x00FF));

        modeWriteList.add((calTi2 & 0xFF00) >> 8); //33
        modeWriteList.add((calTi2 & 0x00FF)); //12

        modeWriteList.add(0); //35
        modeWriteList.add(0);

        modeWriteList.add(0); //37
        modeWriteList.add(0);

        modeWriteList.add(0); //39
        modeWriteList.add(0);

        modeWriteList.add(3); //41

        modeWriteList.add(255); //42
        modeWriteList.add(255); //43
        // modeWriteList.add(0x7F); //23
        _isdatasendSuccess = false;
        // Fluttertoast.showToast(msg: modeWriteList.toString());
      });

      preferences = await SharedPreferences.getInstance();
      preferences.setString("mode", "AUTO");

      preferences.setString("checkMode", "auto");

      preferences.setInt("rr", autoBackupRrValue);
      preferences.setInt("ie", autoIeValue);
      preferences.setString("i", dataI1.toString());
      preferences.setString("e", dataE1.toString());
      preferences.setInt("peep", autoPeepValue);
      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", autoFio2Value);
      preferences.setInt("ps", autoautoalue);
      preferences.setInt("pc", autoPcMaxValue);
      preferences.setInt("itrig", autoItrigValue); //atime ti
      preferences.setInt("atime", autoAtimeValue);
      preferences.setInt("ti", autoTiValue);
      preferences.setInt("vt", autoVtValue);
      preferences.setInt("pcmax", autoPcMaxValue);
      // Fluttertoast.showToast(msg:autoautoalue.toString() +" pc "+autoPcValue.toString());

      preferences.setInt('autoItrigValue', autoItrigValue);

      preferences.setInt('autoVtMinValue', autoVtMinValue);
      preferences.setInt('autoVtMaxValue', autoVtMaxValue);
      preferences.setInt('autoVtValue', autoVtValue);

      preferences.setInt('autoTiValue', autoTiValue);
      preferences.setInt('autoPeepValue', autoPeepValue);
      preferences.setInt('autoIeValue', autoIeValue);
      preferences.setInt('autoautoalue', autoautoalue);
      preferences.setInt('autoFio2Value', autoFio2Value);
      preferences.setInt('autoBackupRrValue', autoBackupRrValue);
      preferences.setInt('autoPcValue', autoPcMaxValue);
      preferences.setInt('autoAtimeValue', autoAtimeValue);
      preferences.setInt('autoEtrigValue', autoEtrigValue);
      preferences.setInt('autoMinTeValue', autoMinTeValue);
      preferences.setInt('autodefaultValue', autodefaultValue);
      preferences.setInt('autoPcMaxValue', autoPcMaxValue);

      // sendDataUsbConnection(modeWriteList, 2);
      if (_status == "Connected") {
        preferences.setBool("play", false);
        sendDataUsbConnection(modeWriteList, 2);
        calculateTiTeValue(autoBackupRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    } else if (hfnoEnabled == true) {
      setState(() {
        // modeWriteList.add(0x7E);
        modeWriteList.add(0);
        modeWriteList.add(20);
        modeWriteList.add(0);
        modeWriteList.add(22);

        modeWriteList.add(0); //5
        modeWriteList.add(0); //6

        modeWriteList.add(0); //7
        modeWriteList.add(0); //8

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //9
        modeWriteList.add(0);

        modeWriteList.add(0); //11
        modeWriteList.add(0); //12

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //21
        modeWriteList.add(0);

        modeWriteList.add(0); //13
        modeWriteList.add(0);

        modeWriteList.add(0); //15
        modeWriteList.add(0);

        modeWriteList.add(0); //17
        modeWriteList.add(0);

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add((hfnoFio2Value & 0xFF00) >> 8); //19
        modeWriteList.add((hfnoFio2Value & 0x00FF));

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //22
        modeWriteList.add(0); //

        modeWriteList.add(0); //23
        modeWriteList.add(0); //
        modeWriteList.add((hfnoFlowValue & 0xFF00) >> 8); //19
        modeWriteList.add((hfnoFlowValue & 0x00FF));

        modeWriteList.add(0); //22

        modeWriteList.add(255); //27
        modeWriteList.add(255);
        _isdatasendSuccess = false;
        // modeWriteList.add(0x7F); //23
      });

      preferences = await SharedPreferences.getInstance();
      // preferences.setString("mode", "VSIMV");
      preferences.setString("checkMode", "hfno");
      preferences.setInt("flow", hfnoFlowValue);

      // preferences.setInt("ps", 40);
      preferences.setInt("fio2", vsimvFio2Value);
      preferences.setBool('calli', false);

      preferences.setInt('hfnoFio2Value', hfnoFio2Value);
      preferences.setInt('hfnoFlowValue', hfnoFlowValue);

      if (_status == "Connected") {
        preferences.setBool("play", false);
        sendDataUsbConnection(modeWriteList, 2);
        // calculateTiTeValue(vsimvRrValue, dataI1, dataE1);
        // writeAlarmsData();
        // modesEnabled = false;
      } else {
        Fluttertoast.showToast(msg: "No Communication");
      }
      setState(() {
        playOnEnabled = false;
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });

      // getData();
      newTreatEnabled = false;
      monitorEnabled = false;
    }
  }

  writeDataPlay() async {
    audioEnable = true;
    // sendSoundOn();
    setState(() {
      writePlay = [];
      writePlay.add(0);
      writePlay.add(20);
      writePlay.add(0);
      writePlay.add(31);
      playOnEnabled = false;
    });
    await sendDataUsbConnection(writePlay, 2);
    preferences.setBool('play', false);
    setState(() {
      playOnEnabled = false;
      playOnEnabled = false;
    });
  }

  writeDataPause() async {
    audioEnable = false;
    sendSoundOff();
    setState(() {
      writePlay = [];
      writePlay.add(0);
      writePlay.add(20);
      writePlay.add(0);
      writePlay.add(30);
      playOnEnabled = true;
    });
    await sendDataUsbConnection(writePlay, 2);
    preferences.setBool('play', true);
    setState(() {
      playOnEnabled = true;
      playOnEnabled = true;
    });
  }

  Future sendDataUsbConnection(
      List<int> samplemodeWriteList, checkValue) async {
    var modeNumber = samplemodeWriteList[3];
    // print(samplemodeWriteList);

    List<int> listCrcData = [];
    listCrcData.addAll(samplemodeWriteList);

    if (modeNumber == 1 ||
        modeNumber == 2 ||
        modeNumber == 3 ||
        modeNumber == 4 ||
        modeNumber == 5 ||
        modeNumber == 6 ||
        modeNumber == 7 ||
        modeNumber == 14 ||
        modeNumber == 21) {
      setState(() {
        playpauseButtonEnabled = true;
        preferences.setBool('playpauseButtonEnabled', true);
      });
      List<String> strList =
          samplemodeWriteList.map((i) => i.toString()).toList();
      preferences.setStringList("saveList", strList);
    }

    int returnDataCrc =
        await getCrc(samplemodeWriteList, samplemodeWriteList.length);
    listCrcData.add((returnDataCrc & 0x00FF));
    listCrcData.add((returnDataCrc & 0xFF00) >> 8);

    list = [];
    List<int> listTempF = [];
    int cIndex = 0;
    for (int i = 0; i < listCrcData.length; i++) {
      if (listCrcData[i] == 0x7F) {
        listTempF.insert(cIndex, 0X7D);
        cIndex = cIndex + 1;
        listTempF.insert(cIndex, 0X5F);
      } else if (listCrcData[i] == 0x7E) {
        listTempF.insert(cIndex, 0X7D);
        cIndex = cIndex + 1;
        listTempF.insert(cIndex, 0X5E);
      } else if (listCrcData[i] == 0x7D) {
        listTempF.insert(cIndex, 0X7D);
        cIndex = cIndex + 1;
        listTempF.insert(cIndex, 0X5D);
      } else {
        listTempF.insert(cIndex, listCrcData[i]);
      }
      cIndex = cIndex + 1;
    }
    await sendData(listTempF, checkValue);
  }

  showDialogPause() {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) => CupertinoAlertDialog(
              title: new Text("Confirm Standby Mode"),
              actions: <Widget>[
                CupertinoDialogAction(
                  child: Text("Confirm"),
                  onPressed: () {
                    writeDataPause();

                    sleep(Duration(milliseconds: 1));
                    Navigator.pop(context);
                  },
                ),
                CupertinoDialogAction(
                  child: Text("Cancel"),
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
              ],
            ));
  }

  showDialogPlay() {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) => CupertinoAlertDialog(
              title: new Text("Confirm Start of Treatment"),
              actions: <Widget>[
                CupertinoDialogAction(
                  child: Text("Confirm"),
                  onPressed: () {
                    writeDataPlay();
                    // preferences.setBool("play", false);
                    sleep(Duration(milliseconds: 1));
                    Navigator.pop(context);
                  },
                ),
                CupertinoDialogAction(
                  child: Text("Cancel"),
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
              ],
            ));
  }

  void setData() {
    if (pacvEnabled == true) {
      setState(() {
        pacvItrig = false;
        pacvRr = true;
        pacvIe = false;
        pacvPeep = false;
        pacvPc = false;
        pacvPplateau = false;
        pacvFlow = false;
        pacvFio2 = false;
        pacvFlowRamp = false;
        pacvItrigValue = 3;
        pacvRrValue = 20;
        pacvIeValue = 51;
        pacvPeepValue = 10;
        pacvPcValue = 25;
        pacvPplateauValue = 20;
        pacvFlowValue = 100;
        // pacvFio2Value = 21;
        pacvFlowRampValue = 3;
        pacvmaxValue = 60;
        pacvminValue = 1;
        pacvdefaultValue = 20;
        pacvparameterName = "RR";
        pacvparameterUnits = "bpm";
      });
    } else if (pccmvEnabled == true) {
      setState(() {
        pccmvRR = true;
        pccmvIe = false;
        pccmvPeep = false;
        pccmvPc = false;
        pccmvFio2 = false;
        pccmvVtmin = false;
        pccmvPplateau = false;
        pccmvFlow = false;
        pccmvTih = false;
        pccmvRRValue = 20;
        pccmvIeValue = 51;
        pccmvPeepValue = 10;
        pccmvPcValue = 25;
        // pccmvFio2Value = 21;
        pccmvVtminValue = 0;
        pccmvPplateauValue = 20;
        pccmvTihValue = 50;
        pccmvRRValueTemp = 20;
        pccmvIeValueTemp = 51;
        pccmvPeepValueTemp = 10;
        pccmvPcValueTemp = 30;
        // pccmvFio2ValueTemp = 21;
        pccmvVtminValueTemp = 100;
        pccmvTihValueTemp = 50;
        pccmvFlowValue = 100;
        pccmvmaxValue = 60;
        pccmvminValue = 1;
        pccmvdefaultValue = 12;
        pccmvparameterName = "RR";
        pccmvparameterUnits = "bpm";
      });
    } else if (vccmvEnabled == true) {
      setState(() {
        vccmvRR = true;
        vccmvIe = false;
        vccmvPeep = false;
        vccmvPplateau = false;
        vccmvPcMax = false;
        vccmvFio2 = false;
        vccmvVt = false;
        vccmvFlow = false;
        vccmvTih = false;
        vccmvRRValue = 20;
        vccmvIeValue = 51;
        vccmvPeepValue = 10;
        vccmvPplateauValue = 20;
        vccmvPcMaxValue = 100;
        // vccmvFio2Value = 21;
        vccmvVtValue = 300;
        vccmvTihValue = 50;
        vccmvFlowValue = 100;
        vccmvmaxValue = 60;
        vccmvminValue = 1;
        vccmvdefaultValue = 20;
        vccmvparameterName = "RR";
        vccmvparameterUnits = "bpm";
      });
    } else if (vacvEnabled == true) {
      setState(() {
        vacvItrig = false;
        vacvRr = true;
        vacvIe = false;
        vacvPeep = false;
        vacvVt = false;
        vacvPplateau = false;
        vacvPcMax = false;
        vacvFio2 = false;
        vacvFlow = false;
        vacvItrigValue = 3;
        vacvRrValue = 20;
        vacvIeValue = 51;
        vacvPeepValue = 10;
        vacvVtValue = 300;
        vacvPplateauValue = 20;
        vacvPcMaxValue = 100;
        // vacvFio2Value = 21;
        vacvFlowValue = 100;
        vacvmaxValue = 60;
        vacvminValue = 1;
        vacvdefaultValue = 20;
        vacvparameterName = "RR";
        vacvparameterUnits = "bpm";
      });
    } else if (psvEnabled == true) {
      setState(() {
        psvItrig = false;
        psvPeep = false;
        psvIe = false;
        psvPs = true;
        psvTi = false;
        psvPlateau = false;
        psvFlow = false;
        psvFio2 = false;
        psvAtime = false;
        psvEtrig = false;
        psvBackupRr = false;
        // psvMe = false;
        psvPc = false;
        pControl = true;

        psvItrigValue = 3;
        psvPeepValue = 10;
        psvIeValue = 51;
        psvPsValue = 25;
        psvTiValue = 6;
        psvPlateauValue = 20;
        psvFlowValue = 100;
        // psvFio2Value = 21;
        psvAtimeValue = 10;
        psvEtrigValue = 10;
        psvBackupRrValue = 20;
        // psvMeValue = 1;
        psvPcValue = 25;
        psvVtValue = 300;

        psvmaxValue = 65;
        psvmaxValue = 65;
        psvminValue = 0;
        psvdefaultValue = 25;
        psvparameterName = "PS";
        psvparameterUnits = "cmH\u2082O  Below PEEP";
      });
    } else if (vsimvEnabled == true) {
      setState(() {
        vsimvItrig = false;
        vsimvRr = true;
        vsimvIe = false;
        vsimvPeep = false;
        vsimvVt = false;
        vsimvPs = false;
        vsimvPlateau = false;
        vsimvPcMax = false;
        vsimvFio2 = false;
        vsimvFlow = false;

        vsimvItrigValue = 3;
        vsimvRrValue = 20;
        vsimvIeValue = 51;
        vsimvPeepValue = 10;
        vsimvVtValue = 300;
        vsimvPsValue = 25;
        vsimvPlateauValue = 20;
        vsimvPcMaxValue = 100;
        // vsimvFio2Value = 21;
        vsimvFlowValue = 100;

        vsimvmaxValue = 30;
        vsimvminValue = 1;
        vsimvdefaultValue = 20;
        vsimvparameterName = "RR";
        vsimvparameterUnits = "bpm";
      });
    } else if (psimvEnabled == true) {
      setState(() {
        psimvItrig = false;
        psimvRr = true;
        psimvIe = false;
        psimvPeep = false;
        psimvPc = false;
        psimvPs = false;
        psimvPplateau = false;
        psimvVtMax = false;
        psimvFio2 = false;
        psimvFlow = false;

        psimvItrigValue = 3;
        psimvRrValue = 20;
        psimvPsValue = 25;
        psimvIeValue = 51;
        psimvPeepValue = 10;
        psimvPcValue = 25;
        psimvPplateauValue = 20;
        psimvVtMaxValue = 2400;
        // psimvFio2Value = 21;
        psimvFlowValue = 100;

        psimvmaxValue = 30;
        psimvminValue = 1;
        psimvdefaultValue = 20;
        psimvparameterName = "RR";
        psimvparameterUnits = "bpm";
      });
    } else if (prvcEnabled == true) {
      prvcItrig = false;
      prvcRr = true;
      prvcIe = false;
      prvcPeep = false;
      prvcVt = false;
      prvcPlateau = false;
      prvcPcMax = false;
      prvcFio2 = false;
      prvcFlow = false;

      prvcItrigValue = 3;
      prvcRrValue = 20;
      prvcIeValue = 51;
      prvcPeepValue = 10;
      prvcVtValue = 300;
      prvcPlateauValue = 20;
      prvcPcMaxValue = 60;
      // prvcFio2Value = 21;
      prvcFlowValue = 100;

      prvcmaxValue = 30;
      prvcminValue = 1;
      prvcdefaultValue = 20;
      prvcparameterName = "RR";
      prvcparameterUnits = "bpm";
    } else if (cpapEnabled == true) {
      cpappItrig = false;
      cpappPeep = true;
      cpappFio2 = false;
      cpappAtime = false;
      cpappBackupRr = false;
      cpappPc = false;

      cpappItrigValue = 3;
      cpappPeepValue = 10;
      cpappcpappalue = 25;
      // cpappFio2Value = 21;
      cpappBackupRrValue = 20;
      cpappAtimeValue = 10;
      cpappPcValue = 25;

      cpappmaxValue = 45;
      cpappminValue = 0;
      cpappdefaultValue = 10;
      cpappparameterName = "CPAP";
      cpappparameterUnits = pItrig ? "cmH\u2082O" : "lpm";
    } else if (autoEnabled = true) {
      autoItrig = false;
      autoPeep = false;
      autoIe = false;
      autoPs = true;
      autoTi = false;
      autoVtMin = false;
      autoVtMax = false;
      autoFio2 = false;
      autoAtime = false;
      autoEtrig = false;
      autoBackupRr = false;
      autoMinTe = false;
      autoPc = false;
      autoVt = false;
      autoPcMax = false;
      autoItrigValue = 3;
      autoPeepValue = 10;
      autoIeValue = 51;
      autoautoalue = 25;
      autoTiValue = 1;
      autoVtMinValue = 0;
      autoVtMaxValue = 2400;
      // autoFio2Value = 21;
      autoAtimeValue = 10;
      autoEtrigValue = 10;
      autoBackupRrValue = 20;
      autoPcMaxValue = 100;
      // autoMeValue = 1;
      autoPcValue = 25;
      autoVtValue = 300;

      automaxValue = 60;
      autominValue = 0;
      autodefaultValue = 25;
      autoparameterName = "PS";
      autoparameterUnits = "cmH\u2082O  Below PEEP";
    } else if (hfnoEnabled == true) {
      hfnoFlow = true;
      hfnoFio2 = false;
      hfnoFlowValue = 5;
      // hfnoFio2Value = 21;
      hfnoparameterName = "lpm";
      hfnoparameterUnits = "%";
      hfnomaxValue = 100;
      hfnominValue = 1;
    }
  }

  writeAlarmsData() async {
    List<int> alarmList = [];
    setState(() {
      alarmList.add(0);
      alarmList.add(20);
      alarmList.add(0);
      alarmList.add(10);

      alarmList.add((minRrtotal & 0xFF00) >> 8); //4
      alarmList.add((minRrtotal & 0x00FF));
      alarmList.add((maxRrtotal & 0xFF00) >> 8);
      alarmList.add((maxRrtotal & 0x00FF));

      alarmList.add((minvte & 0xFF00) >> 8);
      alarmList.add((minvte & 0x00FF));
      alarmList.add((maxvte & 0xFF00) >> 8);
      alarmList.add((maxvte & 0x00FF));

      alarmList.add((minmv & 0xFF00) >> 8);
      alarmList.add((minmv & 0x00FF));
      alarmList.add((maxmv & 0xFF00) >> 8);
      alarmList.add((maxmv & 0x00FF));

      alarmList.add((minppeak & 0xFF00) >> 8);
      alarmList.add((minppeak & 0x00FF));
      alarmList.add((maxppeak & 0xFF00) >> 8);
      alarmList.add((maxppeak & 0x00FF));

      alarmList.add((minpeep & 0xFF00) >> 8);
      alarmList.add((minpeep & 0x00FF));
      alarmList.add((maxpeep & 0xFF00) >> 8);
      alarmList.add((maxpeep & 0x00FF));

      alarmList.add((minfio2 & 0xFF00) >> 8);
      alarmList.add((minfio2 & 0x00FF));
      alarmList.add((maxfio2 & 0xFF00) >> 8);
      alarmList.add((maxfio2 & 0x00FF));

      if (_isTab10 == true) {
        alarmList.add((maxlv & 0xFF00) >> 8);
        alarmList.add((maxlv & 0x00FF));
      }
    });

    // print(alarmList.toString());

    preferences = await SharedPreferences.getInstance();
    preferences.setInt("minrr", minRrtotal);
    preferences.setInt("maxrr", maxRrtotal);
    preferences.setInt("minvte", minvte);
    preferences.setInt("maxvte", maxvte);
    preferences.setInt("minppeak", minppeak);
    preferences.setInt("maxppeak", maxppeak);
    preferences.setInt("minpeep", minpeep);
    preferences.setInt("maxpeep", maxpeep);
    preferences.setInt("minlv", minlv);
    preferences.setInt("maxlv", maxlv);
    preferences.setInt("minfio2", minfio2);
    preferences.setInt("maxfio2", maxfio2);
    preferences.setInt("minmv", minmv);
    preferences.setInt("maxmv", maxmv);
    await sendDataUsbConnection(alarmList, 2);
    setState(() {
      alarmConfirmed = true;
    });
  }

  //ui
  alarmsComponents() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(width: 30),
        Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InkWell(
              onTap: () {
                setState(() {
                  alarmmaxValue = 70;
                  alarmminValue = 1;
                  alarmparameterName = "RR Total";

                  alarmRRchanged = true;
                  alarmRR = true;
                  alarmVte = false;
                  alarmPpeak = false;
                  alarmpeep = false;
                  alarmFio2 = false;
                  alarmConfirmed = false;
                  alarmmv = false;
                  alarmlv = false;
                });
                checkData();
              },
              child: Center(
                child: Container(
                  color: alarmRRchanged ? Color(0xFFB0BEC5) : Color(0xFF213855),
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: alarmRR ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "RR Total",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: alarmRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "bpm",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: alarmRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "70",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "1",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmRR
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                "$minRrtotal - $maxRrtotal",
                                style: TextStyle(
                                    fontSize: 20,
                                    color: alarmRR
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  alarmmaxValue = _isTab10 ? 3000 : 2400;
                  alarmminValue = 0;
                  alarmparameterName = "VTe";
                  alarmRR = false;
                  alarmVte = true;
                  alarmVtechanged = true;
                  alarmPpeak = false;
                  alarmpeep = false;
                  alarmFio2 = false;
                  alarmConfirmed = false;
                  alarmmv = false;
                  alarmlv = false;
                });
                checkData();
              },
              child: Center(
                child: Container(
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  color:
                      alarmVtechanged ? Color(0xFFB0BEC5) : Color(0xFF213855),
                  child: Card(
                    elevation: 40,
                    color: alarmVte ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "VTe",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: alarmVte
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "mL",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: alarmVte
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              _isTab10 ? "3000" : "2400",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmVte
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmVte
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                "$minvte - $maxvte",
                                style: TextStyle(
                                    fontSize: 20,
                                    color: alarmVte
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        Column(
          children: [
            // InkWell(
            //   onTap: () {
            //     setState(() {
            //       alarmmaxValue = 100;
            //       alarmminValue = 21;
            //       alarmparameterName = "FiO\u2082";
            //       alarmFio2changed = true;
            //       alarmRR = false;
            //       alarmVte = false;
            //       alarmPpeak = false;
            //       alarmpeep = false;
            //       alarmFio2 = true;
            //       alarmConfirmed = false;
            //     });
            //   },
            //   child: Center(
            //     child: Container(
            //       color:
            // alarmFio2changed ? Color(0xFFB0BEC5) : Color(0xFF213855),
            //       width: 146,
            //       height: 130,
            //       child: Card(
            //         elevation: 40,
            //         color: alarmFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
            //         child: Padding(
            // padding: const EdgeInsets.all(6.0),
            // child: Center(
            //     child: Stack(
            //   children: [
            //     Align(
            //       alignment: Alignment.topLeft,
            //       child: Text(
            //         "FiO\u2082",
            //         style: TextStyle(
            //   fontSize: 15,
            //   fontWeight: FontWeight.bold,
            //   color: alarmFio2
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.topRight,
            //       child: Text(
            //         "",
            //         style: TextStyle(
            //   fontSize: 9,
            //   color: alarmFio2
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.bottomRight,
            //       child: Text(
            //         "100",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: alarmFio2
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.bottomLeft,
            //       child: Text(
            //         "21",
            //         style: TextStyle(
            //   fontSize: 12,
            //   color: alarmFio2
            //       ? Color(0xFF213855)
            //       : Color(0xFFE0E0E0)),
            //       ),
            //     ),
            //     Align(
            //       alignment: Alignment.center,
            //       child: Padding(
            //         padding: const EdgeInsets.only(top: 1.0),
            //         child: Text(
            // "$minfio2 - $maxfio2",
            // style: TextStyle(
            //     fontSize: 20,
            //     color: alarmFio2
            //         ? Color(0xFF213855)
            //         : Color(0xFFE0E0E0)),
            //         ),
            //       ),
            //     ),
            //   ],
            // )),
            //         ),
            //       ),
            //     ),
            //   ),
            // ),
            InkWell(
              onTap: () {
                setState(() {
                  alarmmaxValue = 40;
                  alarmminValue = 0;
                  alarmparameterName = "PEEP";
                  alarmpeepchanged = true;
                  alarmRR = false;
                  alarmVte = false;
                  alarmPpeak = false;
                  alarmpeep = true;
                  alarmFio2 = false;
                  alarmConfirmed = false;
                  alarmmv = false;
                  alarmlv = false;
                });
                checkData();
              },
              child: Center(
                child: Container(
                  color:
                      alarmpeepchanged ? Color(0xFFB0BEC5) : Color(0xFF213855),
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: alarmpeep ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "PEEP",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: alarmpeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: alarmpeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "40",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmpeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmpeep
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                "$minpeep - $maxpeep",
                                style: TextStyle(
                                    fontSize: 20,
                                    color: alarmpeep
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  alarmmaxValue = 100;
                  alarmminValue = 0;
                  alarmparameterName = "Ppeak";
                  alarmRR = false;
                  alarmVte = false;
                  alarmPpeakchanged = true;
                  alarmPpeak = true;
                  alarmpeep = false;
                  alarmFio2 = false;
                  alarmConfirmed = false;
                  alarmmv = false;
                  alarmlv = false;
                });
                checkData();
              },
              child: Center(
                child: Container(
                  color:
                      alarmPpeakchanged ? Color(0xFFB0BEC5) : Color(0xFF213855),
                  width: _isTab10 ? 176 : 146,
                  height: _isTab10 ? 160 : 130,
                  child: Card(
                    elevation: 40,
                    color: alarmPpeak ? Color(0xFFE0E0E0) : Color(0xFF213855),
                    child: Padding(
                      padding: const EdgeInsets.all(6.0),
                      child: Center(
                          child: Stack(
                        children: [
                          Align(
                            alignment: Alignment.topLeft,
                            child: Text(
                              "Ppeak",
                              style: TextStyle(
                                  fontSize: 15,
                                  fontWeight: FontWeight.bold,
                                  color: alarmPpeak
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.topRight,
                            child: Text(
                              "cmH\u2082O",
                              style: TextStyle(
                                  fontSize: 9,
                                  color: alarmPpeak
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomRight,
                            child: Text(
                              "100",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmPpeak
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.bottomLeft,
                            child: Text(
                              "0",
                              style: TextStyle(
                                  fontSize: 12,
                                  color: alarmPpeak
                                      ? Color(0xFF213855)
                                      : Color(0xFFE0E0E0)),
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Padding(
                              padding: const EdgeInsets.only(top: 1.0),
                              child: Text(
                                "$minppeak - $maxppeak",
                                style: TextStyle(
                                    fontSize: 20,
                                    color: alarmPpeak
                                        ? Color(0xFF213855)
                                        : Color(0xFFE0E0E0)),
                              ),
                            ),
                          ),
                        ],
                      )),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        _isTab10
            ? Column(
                children: [
                  InkWell(
                    onTap: () {
                      setState(() {
                        alarmmaxValue = 100;
                        alarmminValue = 21;
                        alarmparameterName = "FiO\u2082";
                        alarmFio2changed = true;
                        alarmRR = false;
                        alarmVte = false;
                        alarmPpeak = false;
                        alarmpeep = false;
                        alarmFio2 = true;
                        alarmConfirmed = false;
                        alarmmv = false;
                        alarmlv = false;
                      });
                    },
                    child: Center(
                      child: Container(
                        color: alarmFio2changed
                            ? Color(0xFFB0BEC5)
                            : Color(0xFF213855),
                        width: _isTab10 ? 176 : 146,
                        height: _isTab10 ? 160 : 130,
                        child: Card(
                          elevation: 40,
                          color:
                              alarmFio2 ? Color(0xFFE0E0E0) : Color(0xFF213855),
                          child: Padding(
                            padding: const EdgeInsets.all(6.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "FiO\u2082",
                                    style: TextStyle(
                                        fontSize: 15,
                                        fontWeight: FontWeight.bold,
                                        color: alarmFio2
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "",
                                    style: TextStyle(
                                        fontSize: 9,
                                        color: alarmFio2
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomRight,
                                  child: Text(
                                    "100",
                                    style: TextStyle(
                                        fontSize: 12,
                                        color: alarmFio2
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomLeft,
                                  child: Text(
                                    "21",
                                    style: TextStyle(
                                        fontSize: 12,
                                        color: alarmFio2
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 1.0),
                                    child: Text(
                                      "$minfio2 - $maxfio2",
                                      style: TextStyle(
                                          fontSize: 20,
                                          color: alarmFio2
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  ),
                  InkWell(
                    onTap: () {
                      setState(() {
                        alarmmaxValue = 25;
                        alarmminValue = 0;
                        alarmparameterName = "Mv";
                        alarmRR = false;
                        alarmVte = false;
                        alarmvchanged = true;
                        alarmPpeak = false;
                        alarmpeep = false;
                        alarmFio2 = false;
                        alarmConfirmed = false;
                        alarmmv = true;
                        alarmlv = false;
                      });
                      checkData();
                    },
                    child: Center(
                      child: Container(
                        color: alarmvchanged
                            ? Color(0xFFB0BEC5)
                            : Color(0xFF213855),
                        width: _isTab10 ? 176 : 146,
                        height: _isTab10 ? 160 : 130,
                        child: Card(
                          elevation: 40,
                          color:
                              alarmmv ? Color(0xFFE0E0E0) : Color(0xFF213855),
                          child: Padding(
                            padding: const EdgeInsets.all(6.0),
                            child: Center(
                                child: Stack(
                              children: [
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Text(
                                    "Mv",
                                    style: TextStyle(
                                        fontSize: 15,
                                        fontWeight: FontWeight.bold,
                                        color: alarmmv
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topRight,
                                  child: Text(
                                    "L",
                                    style: TextStyle(
                                        fontSize: 9,
                                        color: alarmmv
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomRight,
                                  child: Text(
                                    "25",
                                    style: TextStyle(
                                        fontSize: 12,
                                        color: alarmmv
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.bottomLeft,
                                  child: Text(
                                    "0",
                                    style: TextStyle(
                                        fontSize: 12,
                                        color: alarmmv
                                            ? Color(0xFF213855)
                                            : Color(0xFFE0E0E0)),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.center,
                                  child: Padding(
                                    padding: const EdgeInsets.only(top: 1.0),
                                    child: Text(
                                      "$minmv - $maxmv",
                                      style: TextStyle(
                                          fontSize: 20,
                                          color: alarmmv
                                              ? Color(0xFF213855)
                                              : Color(0xFFE0E0E0)),
                                    ),
                                  ),
                                ),
                              ],
                            )),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              )
            : Container(),
        // _isTab10
        //     ? Column(
        //         mainAxisAlignment: MainAxisAlignment.start,
        //         crossAxisAlignment: CrossAxisAlignment.start,
        //         children: [],
        //       )
        //     : Container(),
        SizedBox(width: _isTab10 ? 100 : 0),
        alarmConfirmed == false
            ? Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: Color(0xFFE0E0E0)),
                width: 550,
                height: 380,
                child: Center(
                  child: Column(
                    children: [
                      SizedBox(
                        height: 10,
                      ),
                      Text(
                        alarmparameterName,
                        style: TextStyle(fontSize: 36),
                      ),
                      SizedBox(
                        height: 10,
                      ),
                      Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: <Widget>[
                                GestureDetector(
                                  child: Container(
                                    width: 80.0,
                                    height: 80.0,
                                    child: Icon(Icons.keyboard_arrow_up,
                                        color: Colors.black, size: 105),
                                  ),
                                  onTapDown: (TapDownDetails details) {
                                    _timera1 = Timer.periodic(
                                        Duration(milliseconds: 100), (t) {
                                      setState(() {
                                        alarmConfirmed = false;
                                        if (alarmRR == true &&
                                            minRrtotal <= maxRrtotal - 1) {
                                          setState(() {
                                            minRrtotal = minRrtotal + 1;
                                          });
                                        } else if (alarmVte == true &&
                                            minvte <= maxvte - 1) {
                                          setState(() {
                                            minvte = minvte + 1;
                                          });
                                        } else if (alarmPpeak == true &&
                                            minppeak <= maxppeak - 1) {
                                          setState(() {
                                            minppeak = minppeak + 1;
                                          });
                                        } else if (alarmpeep == true &&
                                            minpeep <= maxpeep - 1) {
                                          setState(() {
                                            minpeep = minpeep + 1;
                                          });
                                        } else if (alarmFio2 == true &&
                                            minfio2 <= maxfio2 - 1) {
                                          setState(() {
                                            minfio2 = minfio2 + 1;
                                          });
                                        } else if (alarmlv == true &&
                                            minlv <= maxlv - 1) {
                                          setState(() {
                                            minlv = minlv + 1;
                                          });
                                        } else if (alarmmv == true &&
                                            minmv <= maxmv - 1) {
                                          setState(() {
                                            minmv = minmv + 1;
                                          });
                                        }
                                      });
                                      checkData();
                                    });
                                  },
                                  onTapUp: (TapUpDetails details) {
                                    setState(() {
                                      _timera1.cancel();
                                    });
                                  },
                                  onTapCancel: () {
                                    _timera1.cancel();
                                  },
                                  onTap: () {
                                    setState(() {
                                      alarmConfirmed = false;
                                      if (alarmRR == true &&
                                          minRrtotal <= maxRrtotal - 1) {
                                        setState(() {
                                          minRrtotal = minRrtotal + 1;
                                        });
                                      } else if (alarmVte == true &&
                                          minvte <= maxvte - 1) {
                                        setState(() {
                                          minvte = minvte + 1;
                                        });
                                      } else if (alarmPpeak == true &&
                                          minppeak <= maxppeak - 1) {
                                        setState(() {
                                          minppeak = minppeak + 1;
                                        });
                                      } else if (alarmpeep == true &&
                                          minpeep <= maxpeep - 1) {
                                        setState(() {
                                          minpeep = minpeep + 1;
                                        });
                                      } else if (alarmFio2 == true &&
                                          minfio2 <= maxfio2 - 1) {
                                        setState(() {
                                          minfio2 = minfio2 + 1;
                                        });
                                      } else if (alarmlv == true &&
                                          minlv <= maxlv - 1) {
                                        setState(() {
                                          minlv = minlv + 1;
                                        });
                                      } else if (alarmmv == true &&
                                          minmv <= maxmv - 1) {
                                        setState(() {
                                          minmv = minmv + 1;
                                        });
                                      }
                                    });
                                    checkData();
                                  },
                                ),
                                SizedBox(height: 20),
                                SizedBox(height: 100),
                                GestureDetector(
                                  child: Container(
                                    width: 80.0,
                                    height: 80.0,
                                    child: Icon(Icons.keyboard_arrow_down,
                                        color: Colors.black, size: 105),
                                  ),
                                  onTapDown: (TapDownDetails details) {
                                    _timera2 = Timer.periodic(
                                        Duration(milliseconds: 100), (t) {
                                      setState(() {
                                        alarmConfirmed = false;
                                        if (alarmRR == true &&
                                            minRrtotal != 1) {
                                          setState(() {
                                            minRrtotal = minRrtotal - 1;
                                          });
                                        } else if (alarmVte == true &&
                                            minvte != 0) {
                                          setState(() {
                                            minvte = minvte - 1;
                                          });
                                        } else if (alarmPpeak == true &&
                                            minppeak != 0) {
                                          setState(() {
                                            minppeak = minppeak - 1;
                                          });
                                        } else if (alarmFio2 == true &&
                                            minfio2 != 21) {
                                          setState(() {
                                            minfio2 = minfio2 - 1;
                                          });
                                        } else if (alarmpeep == true &&
                                            minpeep != 0) {
                                          setState(() {
                                            minpeep = minpeep - 1;
                                          });
                                        } else if (alarmlv == true &&
                                            minlv != 0) {
                                          setState(() {
                                            minlv = minlv - 1;
                                          });
                                        } else if (alarmmv == true &&
                                            minmv != 0) {
                                          setState(() {
                                            minmv = minmv - 1;
                                          });
                                        }
                                      });
                                      checkData();
                                    });
                                  },
                                  onTapUp: (TapUpDetails details) {
                                    setState(() {
                                      _timera2.cancel();
                                    });
                                  },
                                  onTapCancel: () {
                                    _timera2.cancel();
                                  },
                                  onTap: () {
                                    setState(() {
                                      alarmConfirmed = false;
                                      if (alarmRR == true && minRrtotal != 1) {
                                        setState(() {
                                          minRrtotal = minRrtotal - 1;
                                        });
                                      } else if (alarmVte == true &&
                                          minvte != 0) {
                                        setState(() {
                                          minvte = minvte - 1;
                                        });
                                      } else if (alarmPpeak == true &&
                                          minppeak != 0) {
                                        setState(() {
                                          minppeak = minppeak - 1;
                                        });
                                      } else if (alarmFio2 == true &&
                                          minfio2 != 21) {
                                        setState(() {
                                          minfio2 = minfio2 - 1;
                                        });
                                      } else if (alarmpeep == true &&
                                          minpeep != 0) {
                                        setState(() {
                                          minpeep = minpeep - 1;
                                        });
                                      } else if (alarmlv == true &&
                                          minlv != 0) {
                                        setState(() {
                                          minlv = minlv - 1;
                                        });
                                      } else if (alarmmv == true &&
                                          minmv != 0) {
                                        setState(() {
                                          minmv = minmv - 1;
                                        });
                                      }
                                    });
                                    checkData();
                                  },
                                ),
                              ],
                            ),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: <Widget>[
                                Text(
                                  alarmRR
                                      ? "$minRrtotal - $maxRrtotal"
                                      : alarmVte
                                          ? "$minvte - $maxvte"
                                          : alarmPpeak
                                              ? "$minppeak - $maxppeak"
                                              : alarmFio2
                                                  ? "$minfio2 - $maxfio2"
                                                  : alarmpeep
                                                      ? "$minpeep - $maxpeep"
                                                      : alarmlv
                                                          ? "$minlv - $maxlv"
                                                          : alarmFio2
                                                              ? "$minfio2 - $maxfio2"
                                                              : alarmmv
                                                                  ? "$minmv - $maxmv"
                                                                  : "0",
                                  style: TextStyle(
                                    fontSize: 28,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Container(
                                  width: 350,
                                  child: CupertinoRangeSlider(
                                    minValue: alarmRR
                                        ? minRrtotal.toDouble()
                                        : alarmVte
                                            ? minvte.toDouble()
                                            : alarmPpeak
                                                ? minppeak.toDouble()
                                                : alarmFio2
                                                    ? minfio2.toDouble()
                                                    : alarmpeep
                                                        ? minpeep.toDouble()
                                                        : alarmlv
                                                            ? minlv.toDouble()
                                                            : alarmFio2
                                                                ? minfio2
                                                                    .toDouble()
                                                                : alarmmv
                                                                    ? minmv
                                                                        .toDouble()
                                                                    : 0.0, // Current min value
                                    maxValue: alarmRR
                                        ? maxRrtotal.toDouble()
                                        : alarmVte
                                            ? maxvte.toDouble()
                                            : alarmPpeak
                                                ? maxppeak.toDouble()
                                                : alarmFio2
                                                    ? maxfio2.toDouble()
                                                    : alarmpeep
                                                        ? maxpeep.toDouble()
                                                        : alarmlv
                                                            ? maxlv.toDouble()
                                                            : alarmFio2
                                                                ? maxfio2
                                                                    .toDouble()
                                                                : alarmmv
                                                                    ? maxmv
                                                                        .toDouble()
                                                                    : 0.0, // Current max value
                                    min: alarmRR
                                        ? 1
                                        : alarmVte
                                            ? 0
                                            : alarmPpeak
                                                ? 0
                                                : alarmFio2
                                                    ? 21
                                                    : alarmpeep
                                                        ? 0
                                                        : alarmlv
                                                            ? 0
                                                            : alarmFio2
                                                                ? 21
                                                                : alarmmv
                                                                    ? 0
                                                                    : 0.0, // Min range value
                                    max: alarmRR
                                        ? 70
                                        : alarmVte
                                            ? _isTab10 ? 3000 : 2400
                                            : alarmPpeak
                                                ? 100
                                                : alarmFio2
                                                    ? 100
                                                    : alarmpeep
                                                        ? 40
                                                        : alarmlv
                                                            ? 100
                                                            : alarmFio2
                                                                ? 100
                                                                : alarmmv
                                                                    ? 25
                                                                    : 0.0, // Max range value
                                    onMinChanged: (minVal) {
                                      setState(() {
                                        alarmConfirmed = false;
                                        alarmRR
                                            ? minRrtotal = minVal.toInt()
                                            : alarmVte
                                                ? minvte = minVal.toInt()
                                                : alarmPpeak
                                                    ? minppeak = minVal.toInt()
                                                    : alarmFio2
                                                        ? minfio2 =
                                                            minVal.toInt()
                                                        : alarmpeep
                                                            ? minpeep =
                                                                minVal.toInt()
                                                            : alarmlv
                                                                ? minlv = minVal
                                                                    .toInt()
                                                                : alarmmv
                                                                    ? minmv = minVal
                                                                        .toInt()
                                                                    : 0.toInt();
                                      });
                                      checkData();
                                    },
                                    onMaxChanged: (maxVal) {
                                      setState(() {
                                        alarmConfirmed = false;
                                        alarmRR
                                            ? maxRrtotal = maxVal.toInt()
                                            : alarmVte
                                                ? maxvte = maxVal.toInt()
                                                : alarmPpeak
                                                    ? maxppeak = maxVal.toInt()
                                                    : alarmFio2
                                                        ? maxfio2 =
                                                            maxVal.toInt()
                                                        : alarmpeep
                                                            ? maxpeep =
                                                                maxVal.toInt()
                                                            : alarmlv
                                                                ? maxlv = maxVal
                                                                    .toInt()
                                                                : alarmmv
                                                                    ? maxmv = maxVal
                                                                        .toInt()
                                                                    : 0.toInt();
                                      });
                                      checkData();
                                    },
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      left: 45.0, right: 45.0),
                                  child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    children: [
                                      Text(alarmminValue.toString()),
                                      SizedBox(width: 200),
                                      Text(alarmmaxValue.toString())
                                    ],
                                  ),
                                ),
                              ],
                            ),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: <Widget>[
                                GestureDetector(
                                  child: Container(
                                    width: 80.0,
                                    height: 80.0,
                                    child: Icon(Icons.keyboard_arrow_up,
                                        color: Colors.black, size: 105),
                                  ),
                                  onTapDown: (TapDownDetails details) {
                                    _timera3 = Timer.periodic(
                                        Duration(milliseconds: 100), (t) {
                                      setState(() {
                                        alarmConfirmed = false;
                                        int data = _isTab10 ? 3000 : 2400;
                                        if (alarmRR == true &&
                                            maxRrtotal != 70) {
                                          setState(() {
                                            maxRrtotal = maxRrtotal + 1;
                                          });
                                        } else if (alarmVte == true &&
                                            maxvte != data) {
                                          setState(() {
                                            maxvte = maxvte + 1;
                                          });
                                        } else if (alarmPpeak == true &&
                                            maxppeak != 100) {
                                          setState(() {
                                            maxppeak = maxppeak + 1;
                                          });
                                        } else if (alarmFio2 == true &&
                                            maxfio2 != 100) {
                                          setState(() {
                                            maxfio2 = maxfio2 + 1;
                                          });
                                        } else if (alarmpeep == true &&
                                            maxpeep != 40) {
                                          setState(() {
                                            maxpeep = maxpeep + 1;
                                          });
                                        } else if (alarmmv == true &&
                                            maxmv != 25) {
                                          setState(() {
                                            maxmv = maxmv + 1;
                                          });
                                        } else if (alarmlv == true &&
                                            maxlv != 100) {
                                          setState(() {
                                            maxlv = maxlv + 1;
                                          });
                                        }
                                      });
                                      checkData();
                                    });
                                  },
                                  onTapUp: (TapUpDetails details) {
                                    setState(() {
                                      _timera3.cancel();
                                    });
                                  },
                                  onTapCancel: () {
                                    _timera3.cancel();
                                  },
                                  onTap: () {
                                    setState(() {
                                      alarmConfirmed = false;
                                      int data = _isTab10 ? 3000 : 2400;
                                      if (alarmRR == true && maxRrtotal != 70) {
                                        setState(() {
                                          maxRrtotal = maxRrtotal + 1;
                                        });
                                      } else if (alarmVte == true &&
                                          maxvte != data) {
                                        setState(() {
                                          maxvte = maxvte + 1;
                                        });
                                      } else if (alarmPpeak == true &&
                                          maxppeak != 100) {
                                        setState(() {
                                          maxppeak = maxppeak + 1;
                                        });
                                      } else if (alarmFio2 == true &&
                                          maxfio2 != 100) {
                                        setState(() {
                                          maxfio2 = maxfio2 + 1;
                                        });
                                      } else if (alarmpeep == true &&
                                          maxpeep != 40) {
                                        setState(() {
                                          maxpeep = maxpeep + 1;
                                        });
                                      } else if (alarmmv == true &&
                                          maxmv != 25) {
                                        setState(() {
                                          maxmv = maxmv + 1;
                                        });
                                      } else if (alarmlv == true &&
                                          maxlv != 100) {
                                        setState(() {
                                          maxlv = maxlv + 1;
                                        });
                                      }
                                    });
                                    checkData();
                                  },
                                ),
                                SizedBox(height: 100),
                                SizedBox(height: 20),
                                GestureDetector(
                                  child: Container(
                                    width: 80.0,
                                    height: 80.0,
                                    child: Icon(Icons.keyboard_arrow_down,
                                        color: Colors.black, size: 105),
                                  ),
                                  onTapDown: (TapDownDetails details) {
                                    _timera4 = Timer.periodic(
                                        Duration(milliseconds: 100), (t) {
                                      setState(() {
                                        alarmConfirmed = false;
                                        if (alarmRR == true &&
                                            maxRrtotal >= minRrtotal + 1) {
                                          setState(() {
                                            maxRrtotal = maxRrtotal - 1;
                                          });
                                        } else if (alarmVte == true &&
                                            maxvte >= minvte + 1) {
                                          setState(() {
                                            maxvte = maxvte - 1;
                                          });
                                        } else if (alarmPpeak == true &&
                                            maxppeak >= minppeak + 1) {
                                          setState(() {
                                            maxppeak = maxppeak - 1;
                                          });
                                        } else if (alarmpeep == true &&
                                            maxpeep >= minpeep + 1) {
                                          setState(() {
                                            maxpeep = maxpeep - 1;
                                          });
                                        } else if (alarmFio2 == true &&
                                            maxfio2 >= minfio2 + 1) {
                                          setState(() {
                                            maxfio2 = maxfio2 - 1;
                                          });
                                        } else if (alarmlv == true &&
                                            maxlv >= minlv + 1) {
                                          setState(() {
                                            maxlv = maxlv - 1;
                                          });
                                        } else if (alarmmv == true &&
                                            maxmv >= minmv + 1) {
                                          setState(() {
                                            maxmv = maxmv - 1;
                                          });
                                        }
                                      });
                                      checkData();
                                    });
                                  },
                                  onTapUp: (TapUpDetails details) {
                                    setState(() {
                                      _timera4.cancel();
                                    });
                                  },
                                  onTapCancel: () {
                                    _timera4.cancel();
                                  },
                                  onTap: () {
                                    setState(() {
                                      alarmConfirmed = false;
                                      if (alarmRR == true &&
                                          maxRrtotal >= minRrtotal + 1) {
                                        setState(() {
                                          maxRrtotal = maxRrtotal - 1;
                                        });
                                      } else if (alarmVte == true &&
                                          maxvte >= minvte + 1) {
                                        setState(() {
                                          maxvte = maxvte - 1;
                                        });
                                      } else if (alarmPpeak == true &&
                                          maxppeak >= minppeak + 1) {
                                        setState(() {
                                          maxppeak = maxppeak - 1;
                                        });
                                      } else if (alarmpeep == true &&
                                          maxpeep >= minpeep + 1) {
                                        setState(() {
                                          maxpeep = maxpeep - 1;
                                        });
                                      } else if (alarmFio2 == true &&
                                          maxfio2 >= minfio2 + 1) {
                                        setState(() {
                                          maxfio2 = maxfio2 - 1;
                                        });
                                      } else if (alarmlv == true &&
                                          maxlv >= minlv + 1) {
                                        setState(() {
                                          maxlv = maxlv - 1;
                                        });
                                      } else if (alarmmv == true &&
                                          maxmv >= minmv + 1) {
                                        setState(() {
                                          maxmv = maxmv - 1;
                                        });
                                      }
                                    });
                                    checkData();
                                  },
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ))
            : Container(height: 380),
      ],
    );
  }

  checkData() {
    if (pccmvEnabled == true) {
      //RR
      if (alarmRR == true) {
        if (pccmvRRValue >= minRrtotal && pccmvRRValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > pccmvRRValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < pccmvRRValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        //PEEP
      } else if (alarmpeep == true) {
        if (pccmvPeepValue >= minpeep && pccmvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > pccmvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < pccmvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (pccmvPcValue >= minppeak && pccmvPcValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > pccmvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < pccmvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (vccmvEnabled == true) {
      if (alarmRR == true) {
        if (vccmvRRValue >= minRrtotal && vccmvRRValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > vccmvRRValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < vccmvRRValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        if (vccmvVtValue >= minvte && vccmvVtValue <= maxvte) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minvte > vccmvVtValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxvte < vccmvVtValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }

        //PEEP
      } else if (alarmpeep == true) {
        if (vccmvPeepValue >= minpeep && vccmvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > vccmvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < vccmvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (vccmvPcMaxValue >= minppeak && vccmvPcMaxValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > vccmvPcMaxValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < vccmvPcMaxValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (pacvEnabled == true) {
      if (alarmRR == true) {
        if (pacvRrValue >= minRrtotal && pacvRrValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > pacvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < pacvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        //PEEP
      } else if (alarmpeep == true) {
        if (pacvPeepValue >= minpeep && pacvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > pacvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < pacvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (pacvPcValue >= minppeak && pacvPcValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > pacvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < pacvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (vacvEnabled == true) {
      if (alarmRR == true) {
        if (vacvRrValue >= minRrtotal && vacvRrValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > vacvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < vacvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        if (vacvVtValue >= minvte && vacvVtValue <= maxvte) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minvte > vacvVtValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxvte < vacvVtValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
        //PEEP
      } else if (alarmpeep == true) {
        if (vacvPeepValue >= minpeep && vacvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > vacvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < vacvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (pacvPcValue >= minppeak && vacvPcMaxValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > vacvPcMaxValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < vacvPcMaxValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (psimvEnabled == true) {
      if (alarmRR == true) {
        if (psimvRrValue >= minRrtotal && psimvRrValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > psimvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < psimvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        //    if (psimvVtValue >= minvte && psimvVtValue <= maxvte) {
        //   setState(() {
        //     alarmDisplayErrorEnabled = false;
        //     alarmDisplayError = "";
        //   });
        // } else if (minvte > psimvVtValue) {
        //   setState(() {
        //     alarmDisplayErrorEnabled = true;
        //     alarmDisplayError =
        //         "Alarm limit is greater than the set operation value";
        //   });
        // } else if (maxvte < psimvVtValue) {
        //   setState(() {
        //   alarmDisplayErrorEnabled = true;
        //     alarmDisplayError =
        //         "Alarm limit is less than the set operation value";
        //   });
        // }
        //PEEP
      } else if (alarmpeep == true) {
        if (psimvPeepValue >= minpeep && psimvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > psimvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < psimvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (psimvPcValue >= minppeak && psimvPcValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > psimvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < psimvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (vsimvEnabled == true) {
      if (alarmRR == true) {
        if (vsimvRrValue >= minRrtotal && vsimvRrValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > vsimvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < vsimvRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        if (vsimvVtValue >= minvte && vsimvVtValue <= maxvte) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minvte > vsimvVtValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxvte < vsimvVtValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
        //PEEP
      } else if (alarmpeep == true) {
        if (vsimvPeepValue >= minpeep && vsimvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > vsimvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < vsimvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (vsimvPcMaxValue >= minppeak && vsimvPcMaxValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > vsimvPcMaxValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < vsimvPcMaxValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (psvEnabled == true) {
      if (alarmRR == true) {
        if (psvBackupRrValue >= minRrtotal && psvBackupRrValue <= maxRrtotal) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minRrtotal > psvBackupRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxRrtotal < psvBackupRrValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmVte == true) {
        //    if (psvVtValue >= minvte && psvVtValue <= maxvte) {
        //   setState(() {
        //     alarmDisplayErrorEnabled = false;
        //     alarmDisplayError = "";
        //   });
        // } else if (minvte > psvVtValue) {
        //   setState(() {
        //     alarmDisplayErrorEnabled = true;
        //     alarmDisplayError =
        //         "Alarm limit is greater than the set operation value";
        //   });
        // } else if (maxvte < psvVtValue) {
        //   setState(() {
        //   alarmDisplayErrorEnabled = true;
        //     alarmDisplayError =
        //         "Alarm limit is less than the set operation value";
        //   });
        // }
        //PEEP
      } else if (alarmpeep == true) {
        if (psvPeepValue >= minpeep && psvPeepValue <= maxpeep) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minpeep > psvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxpeep < psvPeepValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      } else if (alarmPpeak == true) {
        if (psvPcValue >= minppeak && psvPcValue <= maxppeak) {
          setState(() {
            alarmDisplayErrorEnabled = false;
            alarmDisplayError = "";
          });
        } else if (minppeak > psvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is greater than the set operation value";
          });
        } else if (maxppeak < psvPcValue) {
          setState(() {
            alarmDisplayErrorEnabled = true;
            alarmDisplayError =
                "Alarm limit is less than the set operation value";
          });
        }
      }
    } else if (prvcEnabled == true) {}
  }

  // showAlertDialog(BuildContext context) {
  //   showDialog(
  //       context: context,
  //       builder: (BuildContext context) => CupertinoAlertDialog(
  //             title: new Text("Enter Patient Data"),
  //             actions: <Widget>[
  //               CupertinoDialogAction(
  //                 child: Text("Ok"),
  //                 onPressed: () {
  //                   preferences.setBool('_isFlagTest', true);
  //                   Navigator.push(
  //                     context,
  //                     MaterialPageRoute(
  //                         builder: (context) => NewTreatmentScreen()),
  //                   );
  //                 },
  //               ),
  //             ],
  //           ));
  // }

  serializeEventData(Uint8List event) async {
    if (event != null) {
      setState(() {
        if (_isenableRespiratoryEnabled == true) {
          respiratoryEnable = true;
        } else {
          respiratoryEnable = false;
        }
        powerButtonEnabled = false;
      });

      if (event[0] == 126) {
        list = [];
        listTemp = [];
        int cIndex = 0;
        list.addAll(event);
        list.removeAt(0);

        for (int i = 0; i < list.length; i++) {
          if (list[i] == 125) {
            listTemp.insert(cIndex, list[i + 1] ^ 0x20);
            i = i + 1;
          } else {
            listTemp.insert(cIndex, list[i]);
          }
          cIndex = cIndex + 1;
        }
        await serialiseReceivedPacket(listTemp);
      } else {
        list = [];
      }
      // event.clear();
    } else {
      setState(() {
        respiratoryEnable = false;
      });
      list = [];
    }
  }

  Future serialiseReceivedPacket(List<int> finalList) async {
    if (finalList.length == 14) {
      await checkCrcGraphPoint(finalList, finalList.length);
    } else if (finalList.isNotEmpty && finalList.length == 170) {
      var now = new DateTime.now();
      lastRecordTime = DateFormat("yyyy-MM-dd HH:mm:ss").format(now).toString();
      preferences = await SharedPreferences.getInstance();
      preferences.setString("lastRecordTime", lastRecordTime);

      await checkCrc(finalList, finalList.length, 1);
      // extractingData(finalList);
    } else if (finalList.isNotEmpty &&
        ((finalList[2] << 8) + finalList[3]) == 17) {
      setState(() {
        acknowledgeData.addAll(finalList);
        acknowReceivedValue = acknowledgeData[4];
        ackPacket = acknowledgeData[5];
        finalList.clear();
        acknowledgeData.clear();
      });
    } else {
      // print(finalList);
      if (_isLoopGraph == true) {
        // checkCrc(finalList, finalList.length, 2);
      }
    }
  }

  Future checkCrcGraphPoint(List<int> obj, length) async {
    int index = length - 2;
    int i = 0;
    int crcData = 0;
    int uiCrc = 0, r = 0;
    int temp = 0;

    while (index-- > 0) {
      r = ulCrc16Table[uiCrc & 0xF];
      uiCrc = ((uiCrc >> 4) & 0x0FFF);
      temp = obj[i];
      uiCrc = (uiCrc ^ r ^ ulCrc16Table[temp & 0xF]);
      r = ulCrc16Table[uiCrc & 0xF];
      uiCrc = ((uiCrc >> 4) & 0x0FFF);
      uiCrc = (uiCrc ^ r ^ ulCrc16Table[(temp >> 4) & 0xF]);
      i++;
    }

    crcData = obj[length - 1] * 256 + obj[length - 2];
    if (crcData == uiCrc) {
      await extractingGraphData(obj);
    } else if (crcData != uiCrc) {
      obj.clear();
    }
  }

  Future extractingGraphData(List<int> fList) async {
    // Fluttertoast.showToast(msg:fList.toString());
    // pressure graph

    var dataOperatingMode = fList[1];
    if (dataOperatingMode >= 1 && dataOperatingMode <= 21) {
      setState(() {
        operatinModeR = fList[1];
        getOpertingMode = true;
      });
    } else {
      setState(() {
        getOpertingMode = false;
      });
    }

    if (operatinModeR == 1) {
      setState(() {
        modeName = "VACV";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 2) {
      setState(() {
        modeName = "PACV";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 3) {
      setState(() {
        modeName = "PSV/CPAP";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 4) {
      setState(() {
        modeName = "PSIMV";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 5) {
      setState(() {
        modeName = "VSIMV";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 6) {
      setState(() {
        modeName = "PC-CMV";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 7) {
      setState(() {
        modeName = "VC-CMV";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 14) {
      setState(() {
        modeName = "PRVC";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 20) {
      setState(() {
        modeName = "CPAP";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 21) {
      setState(() {
        modeName = "AUTO";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 22) {
      setState(() {
        modeName = "HFNO";
        selfTestingButtonEnabled = false;
      });
    } else if (operatinModeR == 0) {
      setState(() {
        ioreDisplayParamter = "";
        amsDisplayParamter = "";
      });
    }

    // if (_startRecordData == true) {
    // pressure graph
    tempPressure =
        (((fList[4] << 8) + fList[5])).toDouble(); // pressure points 35,36

    if (tempPressure > 40000) {
      setState(() {
        tempPressure = -((65535 - tempPressure) / 100);
      });
    } else {
      setState(() {
        tempPressure = tempPressure / 100;
      });
    }
    // pPoints.add(GraphPoint(x: 0.0, y: random.nextInt(5).toDouble()));
    temp1Volume =
        ((fList[10] << 8) + fList[11]).toDouble(); // volume points 59,60
    temp3Flow =
        ((((fList[6] << 8) + fList[7])) - (((fList[8] << 8) + fList[9])))
            .toDouble();
    temp3Flow = temp3Flow * 0.06;

    double temp3I = ((fList[6] << 8) + fList[7]).toDouble() * 0.06;
    double temp3E = ((fList[8] << 8) + fList[9]).toDouble() * 0.06;

    var brethI = fList[3];

    setState(() {
      tempfPressure = tempPressure;
      temp1fVolume = temp1Volume;
      temp3fFlow = temp3Flow;
    });

    // if (getOpertingMode == true) {
    //   if (pressurePoints.length >= 250) {
    //     setState(() {
    //       // if (temp > pressureMax) {
    //       //   // pressureMax = temp.toInt() + 5;
    //       //   pressureMax = 100;
    //       // }
    //       pressurePoints.removeAt(0);
    //       pressurePoints.add(temp);
    //       // Fluttertoast.showToast(msg: temp.toString());
    //     });
    //   } else {
    //     // if (temp > pressureMax) {
    //     //   pressureMax = 100;
    //     // }
    //     pressurePoints.add(temp);
    //   }

    //   if (volumePoints.length >= 250) {
    //     setState(() {
    //       // if (temp1 > volumeMax) {
    //       //   // volumeMax = temp1.toInt() + 5;
    //       //   volumeMax = 3000;
    //       // }
    //       volumePoints.removeAt(0);
    //       volumePoints.add(temp1);
    //     });
    //   } else {
    //     // if (temp1 > volumeMax) {
    //     //   volumeMax = 3000;
    //     // }
    //     volumePoints.add(temp1);
    //   }

    //   // if (flowiPoints.length >= 300) {
    //   //   setState(() {
    //   //     if (temp3I > flowIMax) {
    //   //       flowIMax = temp3I.toInt() + 5;
    //   //     }
    //   //     if (temp3E > flowEMax) {
    //   //       flowEMax = temp3E.toInt() + 5;
    //   //     }
    //   //     flowiPoints.removeAt(0);
    //   //     flowePoints.removeAt(0);
    //   //     flowiPoints.add(temp3I);
    //   //     flowePoints.add(temp3E);
    //   //   });
    //   // } else {
    //   //   if (temp3I > flowIMax) {
    //   //     flowIMax = temp3I.toInt() + 5;
    //   //   }
    //   //   if (temp3E > flowEMax) {
    //   //     flowEMax = temp3E.toInt() + 5;
    //   //   }
    //   //   flowiPoints.add(temp3I);
    //   //   flowePoints.add(temp3E);
    //   // }

    //   if (flowPoints.length >= 250) {
    //     setState(() {
    //       // if (temp3 > volumeMax) {
    //       //   // flowIMax = temp3I.toInt() + 5;
    //       //   flowIMax =200;
    //       // }
    //       flowPoints.removeAt(0);
    //       flowPoints.add(temp3);
    //     });
    //   } else {
    //     // if (temp3 > volumeMax) {
    //     //   // flowEMax = temp3E.toInt() + 5;
    //     //   flowEMax = 90;
    //     // }
    //     flowPoints.add(temp3);
    //   }
    // }

    if (fList[3] == 1) {
      ioreDisplayParamter = "I";
    } else if (fList[3] == 2) {
      ioreDisplayParamter = "E";
    }

    if (fList[3] == 1 && getOpertingMode == true) {
      //temp p temp1 v temp3 f
      setState(() {
        if (inhalationFlag == true) {
          // datapv.clear();
          datapf.clear();
          datavf.clear();
          inhalationFlag = false;
          preferences.setBool('inhalationFlag', false);
        }
        // datapv.add(Point(tempPressure, temp1Volume));
        datapf.add(Point(temp3Flow.round(), tempPressure.round()));
        datavf.add(Point(temp1Volume.round(), temp3Flow.round()));
        breathCycle = true;
      });
    } else if (fList[3] == 2 &&
        // _isLoopGraph == true &&
        getOpertingMode == true) {
      setState(() {
        if (breathCycle == true) {
          // if (datapv.length > 16 && datapv.length != 0) {
          //   // re-insti
          //   _plotDataPv.clear();
          //   _plotDataPv.addAll(datapv);
          //   _plotDataPv.add(datapv[0]);
          // } else {
          //   datapv.clear();
          // }

          // pressure flow
          if (datapf.length > 16 && datapf.length != 0) {
            _plotDataPf.clear();
            _plotDataPf.addAll(datapf);
            // _plotDataPf.add(datapf[0]);
          } else {
            datapf.clear();
          }

          // volume flow
          if (datavf.length > 16 && datavf.length != 0) {
            _plotDataVf.clear();
            _plotDataVf.addAll(datavf);
            // _plotDataVf.add(datavf[0]);
            print("vf graph" + _plotDataVf.toString());
            _writeStringToTextFile(_plotDataVf.toString());
          } else {
            datavf.clear();
          }

          datavf.clear();
          // datapv.clear();
          datapf.clear();
          breathCycle = false;
        }
        // datapv.add(Point(tempPressure, temp1Volume));
        datapf.add(Point(temp3Flow.round(), tempPressure.round()));
        datavf.add(Point(temp1Volume.round(), temp3Flow.round()));
      });
    }

    //================================
  }

  getDateo2Time() {
    var otime = preferences.getString('o2time');
    if (otime == null) {
      o2Time = "--" + "/" + "--" + "/" + "----";
    } else {
      o2Time = otime;
    }
  }

  Future extractingData(List<int> finalList) async {
    setState(() {
      var now = new DateTime.now();

      vteValuea = ((finalList[4] << 8) + finalList[5]).toInt(); //5 6
      mvValuea = (((finalList[8] << 8) + finalList[9])).toInt();

      double pressurePLotData =
          (((finalList[44] << 8) + finalList[45]) / 100).toDouble();
      double volumePlotData =
          (((finalList[58] << 8) + finalList[59])).toDouble();

      if (finalList[84] == 1 && getOpertingMode == true) {
        //temp p temp1 v temp3 f
        setState(() {
          if (inhalationFlagP == true) {
            datapv.clear();
            inhalationFlagP = false;
            preferences.setBool('inhalationFlagP', false);
          }
          datapv.add(Point(pressurePLotData.round(), volumePlotData.round()));
          breathCycle1 = true;
        });
      } else if (finalList[84] == 2 &&
          // _isLoopGraph == true &&
          getOpertingMode == true) {
        setState(() {
          if (breathCycle1 == true) {
            if (datapv.length > 16 && datapv.length != 0) {
              // re-insti
              _plotDataPv = [];
              _plotDataPv.clear();
              _plotDataPv.addAll(datapv);
              _plotDataPv.add(datapv[0]);
            } else {
              datapv.clear();
            }

            datapv.clear();
            breathCycle1 = false;
          }
          datapv.add(Point(pressurePLotData.toInt(), volumePlotData.toInt()));
        });
      }

      leakVolumeDisplay = ((finalList[102] << 8) + finalList[103]); //103 104
      peakFlowDisplay = ((finalList[70] << 8) + finalList[71]); //71 72
      spontaneousDisplay = ((finalList[82] << 8) + finalList[83]); //83 84

      int rrtotalCheck = ((finalList[10] << 8) + finalList[11]).toInt(); //11,12

      // ignore: unrelated_type_equality_checks
      if (rrtotalCheck != "" &&
          rrtotalCheck.round() >= 0 &&
          rrtotalCheck.round() <= 100) {
        setState(() {
          rrDisplayValue = rrtotalCheck;
        });
      }
      int pipValueCheck = (((finalList[14] << 8) + finalList[15]) / 100)
          .round()
          .toInt(); //15 16

      if ((((finalList[16] << 8) + finalList[17]) / 100).round().toInt() >= 0 &&
          (((finalList[16] << 8) + finalList[17]) / 100).round().toInt() <=
              150) {
        peepDisplayValue = (((finalList[16] << 8) + finalList[17]) / 100)
            .round()
            .toInt(); //17 18
      }

      if (pipValueCheck != 0 &&
          pipValueCheck.round() >= 0 &&
          pipValueCheck.round() <= 150) {
        setState(() {
          pipValue = pipValueCheck;
        });
      }
      paw = (((finalList[34] << 8) + finalList[35]) ~/ 100).toInt();

      if (paw > 200) {
        setState(() {
          paw = 0;
        });
      }

      faultBatteryStatus = finalList[89];

      expiratoryPressureR =
          (((finalList[36] << 8) + finalList[37]) ~/ 100).toInt(); //37 38

      if (((finalList[38] << 8) + finalList[39]).round() >= 20 &&
          ((finalList[38] << 8) + finalList[39]).round() <= 100) {
        fio2DisplayParameter = ((finalList[38] << 8) + finalList[39]); // 39,40
      }

      // checkTempData = finalList[31].toString();
      setState(() {
        check1 = finalList[32];
        check2 = finalList[33];
        preferences.setInt('check1', check1);
        preferences.setInt('check2', check2);
      });

      var highPriorityAlarm = 0;
      var mediumPriorityAlarm = 0;
      var lowPriorityAlarm = 0;

      if (finalList[108] == 1) {
        presentCode = ((finalList[106] << 8) + finalList[107]);
        alarmCounter = finalList[90];

        if (presentCode != previousCode) {
          previousCode = presentCode;
          sendSoundOn();
          _stopMusic();
          var data = AlarmsList(
              presentCode.toString(), this.globalCounterNo.toString());
          dbHelpera.saveAlarm(data);
          // alarmPrevCounter = alarmCounter;
          if ((presentCode == 24 ||
                  presentCode == 17 ||
                  presentCode == 5 ||
                  presentCode == 10 ||
                  presentCode == 30 ||
                  presentCode == 31 ||
                  presentCode == 32 ||
                  presentCode == 11) &&
              highPriorityAlarm == 0) {
            setState(() {
              highPriorityAlarm = 1;
              mediumPriorityAlarm = 0;
              lowPriorityAlarm = 0;
            });
            _stopMusic();
            _playMusicHigh();
            sendSoundOn();
            audioEnable = true;
          } else if ((presentCode == 1 ||
                  presentCode == 2 ||
                  presentCode == 3 ||
                  presentCode == 4 ||
                  presentCode == 6 ||
                  presentCode == 8 ||
                  presentCode == 9 ||
                  presentCode == 12 ||
                  presentCode == 13 ||
                  presentCode == 14 ||
                  presentCode == 15 ||
                  presentCode == 16 ||
                  presentCode == 18 ||
                  presentCode == 19 ||
                  presentCode == 20 ||
                  presentCode == 21 ||
                  presentCode == 22 ||
                  presentCode == 25 ||
                  presentCode == 26 ||
                  presentCode == 27) &&
              mediumPriorityAlarm == 0) {
            setState(() {
              highPriorityAlarm = 0;
              mediumPriorityAlarm = 1;
              lowPriorityAlarm = 0;
            });
            _stopMusic();
            _playMusicMedium();
            sendSoundOn();
            audioEnable = true;
          } else if ((presentCode == 23 ||
                  presentCode == 28 ||
                  presentCode == 29 ||
                  presentCode == 7) &&
              lowPriorityAlarm == 0) {
            setState(() {
              highPriorityAlarm = 0;
              mediumPriorityAlarm = 0;
              lowPriorityAlarm = 1;
            });
            _stopMusic();
            _playMusicLower();
            sendSoundOn();
            audioEnable = true;
          }
        } else {
          if (alarmCounter != alarmPrevCounter) {
            alarmPrevCounter = alarmCounter;
            _stopMusic();
            var data = AlarmsList(
                presentCode.toString(), this.globalCounterNo.toString());
            dbHelpera.saveAlarm(data);

            if ((presentCode == 5 ||
                    presentCode == 10 ||
                    presentCode == 30 ||
                    presentCode == 31 ||
                    presentCode == 11 ||
                    presentCode == 24 ||
                    presentCode == 17 ||
                    presentCode == 32) &&
                highPriorityAlarm == 0) {
              setState(() {
                highPriorityAlarm = 1;
                mediumPriorityAlarm = 0;
                lowPriorityAlarm = 0;
              });
              _stopMusic();
              _playMusicHigh();
              sendSoundOn();
              audioEnable = true;
            } else if ((presentCode == 1 ||
                    presentCode == 2 ||
                    presentCode == 3 ||
                    presentCode == 4 ||
                    presentCode == 6 ||
                    presentCode == 8 ||
                    presentCode == 9 ||
                    presentCode == 12 ||
                    presentCode == 13 ||
                    presentCode == 14 ||
                    presentCode == 15 ||
                    presentCode == 16 ||
                    presentCode == 18 ||
                    presentCode == 19 ||
                    presentCode == 20 ||
                    presentCode == 21 ||
                    presentCode == 22 ||
                    presentCode == 25 ||
                    presentCode == 26 ||
                    presentCode == 27) &&
                mediumPriorityAlarm == 0) {
              setState(() {
                highPriorityAlarm = 0;
                mediumPriorityAlarm = 1;
                lowPriorityAlarm = 0;
              });
              _stopMusic();
              _playMusicMedium();
              sendSoundOn();
              audioEnable = true;
            } else if ((presentCode == 23 ||
                    presentCode == 28 ||
                    presentCode == 29 ||
                    presentCode == 7) &&
                lowPriorityAlarm == 0) {
              setState(() {
                highPriorityAlarm = 0;
                mediumPriorityAlarm = 0;
                lowPriorityAlarm = 1;
              });
              _stopMusic();
              _playMusicLower();
              sendSoundOn();
              audioEnable = true;
            }
          }
        }
      } else if (finalList[108] == 0) {
        setState(() {
          highPriorityAlarm = 0;
          mediumPriorityAlarm = 0;
          lowPriorityAlarm = 0;
        });
        sendSoundOff();
        _stopMusic();
      }

      var selfRun = finalList[92];

      if (selfRun == 1) {
        //  preferences.setBool("_isFlagTest", true);
        preferences.setBool("calli", false);
        //  _isFlagTest = true;
        // textText = "";
        selftestRun(1);
        preferences.setBool('first', false);
      } else if (selfRun == 2) {
        setState(() {
          selftestRun(1);
          selfTestingEnabled = true;
        });
      }

      if (vteValuea != null &&
          vteValuea != 0 &&
          pplateauDisplay != null &&
          pplateauDisplay != 0) {
        try {
          var dataC =
              (vteValuea ~/ (pipValue.toInt() - peepDisplayValue)).toInt();
          if (dataC < 0) {
          } else {
            cdisplayParameter = dataC;
          }
        } catch (e) {}
      }

      var apneaCheckvalue = finalList[66];

      if (apneaCheckvalue == 1) {
        setState(() {
          displayApneaTime = "Apnea";
        });
      } else {
        setState(() {
          displayApneaTime = "";
        });
      }

      if (finalList[108] == 1) {
        setState(() {
          if (finalList[109] == 0) {
            // vh
            ((finalList[106] << 8) + finalList[107]) == 29
                ? alarmMessage = "Critical Battery."
                : ((finalList[106] << 8) + finalList[107]) == 30
                    ? alarmMessage = "Critical battery. Ventilation Stopped"
                    : ((finalList[106] << 8) + finalList[107]) == 24
                        ? alarmMessage =
                            "Blender Malfunction. \nOxygen blending not possible."
                        : ((finalList[106] << 8) + finalList[107]) == 17
                            ? alarmMessage = "PATIENT DISCONNECTED"
                            : "";
          } else if (finalList[109] == 1) {
            //h
            ((finalList[106] << 8) + finalList[107]) == 5
                ? alarmMessage = "SYSTEM FAULT"
                : ((finalList[106] << 8) + finalList[107]) == 10
                    ? alarmMessage = "HIGH LEAKAGE"
                    : ((finalList[106] << 8) + finalList[107]) == 11
                        ? alarmMessage = "HIGH PRESSURE"
                        : ((finalList[106] << 8) + finalList[107]) == 31
                            ? alarmMessage = "Check Pressure Connection"
                            : alarmMessage = "";
          } else if (finalList[109] == 2) {
            ((finalList[106] << 8) + finalList[107]) == 1
                ? alarmMessage = "POWER SUPPLY DISCONNECTED"
                : ((finalList[106] << 8) + finalList[107]) == 2
                    ? alarmMessage = " LOW BATTERY"
                    : ((finalList[106] << 8) + finalList[107]) == 3
                        ? alarmMessage = "CALIBRATE FiO2"
                        : ((finalList[106] << 8) + finalList[107]) == 4
                            ? alarmMessage = "CALIBRATION FiO2 FAIL"
                            : ((finalList[106] << 8) + finalList[107]) == 6
                                ? alarmMessage = "SELF TEST FAIL"
                                : ((finalList[106] << 8) + finalList[107]) == 8
                                    ? alarmMessage = "HIGH FiO2"
                                    : ((finalList[106] << 8) + finalList[107]) == 9
                                        ? alarmMessage = "LOW FiO2"
                                        : ((finalList[106] << 8) + finalList[107]) == 12
                                            ? alarmMessage = "LOW PRESSURE"
                                            : ((finalList[106] << 8) +
                                                        finalList[107]) ==
                                                    13
                                                ? alarmMessage = "LOW VTE"
                                                : ((finalList[106] << 8) +
                                                            finalList[107]) ==
                                                        14
                                                    ? alarmMessage = "HIGH VTE"
                                                    : ((finalList[106] << 8) + finalList[107]) == 15
                                                        ? alarmMessage =
                                                            "LOW VTI"
                                                        : ((finalList[106] << 8) + finalList[107]) == 16
                                                            ? alarmMessage =
                                                                "HIGH VTI"
                                                            : ((finalList[106] << 8) + finalList[107]) == 18
                                                                ? alarmMessage =
                                                                    "LOW O2  Supply"
                                                                : ((finalList[106] << 8) + finalList[107]) == 19
                                                                    ? alarmMessage =
                                                                        "LOW RR"
                                                                    : ((finalList[106] << 8) + finalList[107]) ==
                                                                            20
                                                                        ? alarmMessage =
                                                                            "HIGH RR"
                                                                        : ((finalList[106] << 8) + finalList[107]) == 21
                                                                            ? alarmMessage = "HIGH PEEP"
                                                                            : ((finalList[106] << 8) + finalList[107]) == 22 ? alarmMessage = "LOW PEEP" : ((finalList[106] << 8) + finalList[107]) == 25 ? alarmMessage = "Low Minute Volume" : ((finalList[106] << 8) + finalList[107]) == 26 ? alarmMessage = "High Minute Volume" : ((finalList[106] << 8) + finalList[107]) == 27 ? alarmMessage = "High Leak Volume" : alarmMessage = "";
          } else if (finalList[109] == 3) {
            ((finalList[106] << 8) + finalList[107]) == 23
                ? alarmMessage = "Apnea backup"
                // : ((finalList[106] << 8) + finalList[107]) == 29
                //     ? alarmMessage = "Replace FiO\u2082 Sensor"
                : ((finalList[106] << 8) + finalList[107]) == 7
                    ? alarmMessage =
                        "FiO\u2082 Sensor Missing Blending Not Possible"
                    : ((finalList[106] << 8) + finalList[107]) == 28
                        ? alarmMessage =
                            "Set volume can't be reached. due to low PC Max"
                        : alarmMessage = "";
          }
        });
      }

      if (paw <= 10) {
        setState(() {
          lungImage = 1;
        });
      } else if (paw <= 20 && paw >= 11) {
        setState(() {
          lungImage = 2;
        });
      } else if (paw <= 30 && paw >= 21) {
        setState(() {
          lungImage = 3;
        });
      } else if (paw <= 40 && paw >= 31) {
        setState(() {
          lungImage = 4;
        });
      } else if (paw <= 100 && paw >= 41) {
        setState(() {
          lungImage = 5;
        });
      }

      String i = "", e = "", tempIe = "";
      i = finalList[12].toString();
      e = finalList[13].toString();
      tempIe = i + ":" + e;

      o2pressuresensor = ((list[26] & 0x3) >> 0);
      mtpressuresensor = ((list[26] & 0xC) >> 2);
      exhalationflowsensor = ((list[26] & 0x30) >> 4);
      inhalationflowsensor = ((list[26] & 0xC0) >> 6);

      exhalationpressure = ((list[27] & 0x3) >> 0);
      inhalationpressure = ((list[27] & 0xC) >> 2);
      o2sensor = ((list[27] & 0x30) >> 4);
      inhalationvalve = ((list[27] & 0xC0) >> 6);

      exhalationvalve = ((list[28] & 0x3) >> 0);
      ventvalue = ((list[28] & 0xC) >> 2);
      mainpower = ((list[28] & 0x30) >> 4);
      battery = ((list[28] & 0xC0) >> 6);

      communication = ((list[29] & 0x3) >> 0);
      compressor = ((list[29] & 0xC) >> 2);
      blender = ((list[29] & 0x30) >> 4);

      safetyvalue1 = (finalList[63] & 0x3);
      safetyvalue2 = ((finalList[63] & 0xC) >> 2);
      checkOfffset = ((list[29] & 0xC0) >> 6);

      checkO2CalibrationValue = finalList[30];

      if (callibrationEnabled == true) {
        if (checkO2CalibrationValue == 1) {
          setState(() {
            textText = "Lung Disconnected";
          });
        } else if (checkO2CalibrationValue == 2) {
          setState(() {
            textText = "Calibrating 0\u2082..";
          });
        } else if (checkO2CalibrationValue == 3) {
          setState(() {
            var now = new DateTime.now();
            var o2Time = DateFormat("dd/MM/yyyy").format(now);
            preferences.setString("o2time", o2Time.toString());
            getDateo2Time();
            textText = "0\u2082 Calibration Completed.";
          });
        } else if (checkO2CalibrationValue == 4) {
          setState(() {
            textText = "Low 0\u2082 Supply";
          });
        } else if (checkO2CalibrationValue == 0) {
          setState(() {
            checkO2CalibrationValue = "";
          });
        }
      }

      if ((((finalList[68] << 8) + finalList[69]) / 100).round().toInt() >= 0 &&
          (((finalList[68] << 8) + finalList[69]) / 100).round().toInt() <=
              150) {
        mapDisplayValue =
            (((finalList[68] << 8) + finalList[69]) ~/ 100).toInt();
      }

      if (finalList[91] == 1) {
        amsDisplayParamter = "A";
      } else if (finalList[91] == 2) {
        amsDisplayParamter = "M";
      } else if (finalList[91] == 3) {
        amsDisplayParamter = "S";
      }

      displayTemperature = finalList[88];

      if (finalList[108] != 0 &&
          ((finalList[106] << 8) + finalList[107]) != null &&
          ((finalList[106] << 8) + finalList[107]) >= 1 &&
          ((finalList[106] << 8) + finalList[107]) <= 32) {
        alarmActive = finalList[108].toString();
      } else {
        alarmActive = 0.toString();
      }

      if (_setValuesonClick == true &&
          operatinModeR != 0 &&
          ((finalList[112] << 8) + finalList[113]) == 35) {
        setState(() {
          receivedoperatingModeR = ((finalList[114] << 8) + finalList[115]);
          var receitrig = ((finalList[116] << 8) + finalList[117]);

          if (receitrig >= 1 && receitrig <= 10) {
            receivedItrig = receitrig;
          } else {
            receivedItrig = itrigValue;
          }

          var recpeep = ((finalList[118] << 8) + finalList[119]);
          if (recpeep >= 0 && recpeep <= 30) {
            receivedpeep = recpeep;
          } else {
            receivedpeep = peepValue;
          }
          var recps = ((finalList[120] << 8) + finalList[121]);
          if (recps >= 0 && recps <= 60) {
            receivedps = recps;
          } else {
            receivedps = psValue;
          }

          var recfio2 = ((finalList[122] << 8) + finalList[123]);
          if (recfio2 >= 21 && recfio2 <= 100) {
            receivedfio2 = recfio2;
          } else {
            receivedfio2 = fio2Value;
          }
          var recapenatime = ((finalList[124] << 8) + finalList[125]);
          if (recapenatime >= 5000 && recapenatime <= 55000) {
            receivedapneaTime = recapenatime;
          } else {
            receivedapneaTime = 5000;
          }
          var reci = finalList[126];
          if (reci >= 10 && reci <= 40) {
            receivedi = reci;
          } else {
            receivedi = 10;
          }
          i = (receivedi / 10).toString();

          var rece = finalList[127];
          if (rece >= 10 && rece <= 80) {
            receivede = rece;
          } else {
            receivede = 30;
          }
          e = (receivede / 10).toString();
          var receti = (((finalList[128] << 8) + finalList[129])).toInt();
          if (receti >= 500 && receti <= receti * 5500) {
            receivedti = receti;
          } else {
            // receivedti = tipsvValue;
          }
          var recebackrr = ((finalList[130] << 8) + finalList[131]);
          if (recebackrr >= 1 && recebackrr <= 60) {
            receivedbackuprr = recebackrr;
          } else {
            recebackrr = rrValue;
          }
          // receivedvvttmin = ((finalList[132] << 8) + finalList[132]);
          // receivedvtmax = ((finalList[134] << 8) + finalList[135]);
          // receivedminte = ((finalList[136] << 8) + finalList[137]);
          var recepc = ((finalList[138] << 8) + finalList[139]);
          if (recepc >= 0 && recepc <= 85) {
            receivedpc = recepc;
          } else {
            receivedpc = pcValue;
          }
          var recerr = ((finalList[140] << 8) + finalList[141]);
          if (recerr >= 1 && recerr <= 60) {
            receivedrr = recerr;
          } else {
            receivedrr = rrValue;
          }

          var recevt = ((finalList[142] << 8) + finalList[143]);
          if (recevt >= 50 && recevt <= 2500) {
            receivedvt = recevt;
          } else {
            receivedvt = vtValue;
          }
          // var recepcmin = ((finalList[144] << 8) + finalList[145]);
          // if(recepcmin>=)
          // receivedpcmin =

          var recepcmax = ((finalList[146] << 8) + finalList[147]);
          if (recepcmax >= 0 && recepcmax <= 100) {
            receivedpcmax = recepcmax;
          } else {
            receivedpcmax = pcValue;
          }

          receivedo2pressure = ((finalList[148] << 8) + finalList[149]);
          receivedtankpressure = ((finalList[150] << 8) + finalList[151]);
          receivedinhalationblowercommand =
              ((finalList[152] << 8) + finalList[153]);
          receivedexhalatioblowercommand =
              ((finalList[154] << 8) + finalList[155]);
          dreceivedfio2 = ((finalList[156] << 8) + finalList[157]);
          receivedvti = ((finalList[158] << 8) + finalList[159]);
          receivedvte = ((finalList[160] << 8) + finalList[161]);
          receivedflatprop = ((finalList[162] << 8) + finalList[163]);
          receivedo2voltage = ((finalList[164] << 8) + finalList[165]);
          receivedthold = ((finalList[166] << 8) + finalList[167]);

          if (operatinModeR == 3 && receivedoperatingModeR == 3) {
            tiValue = (((double.tryParse(i) /
                        (double.tryParse(i) + double.tryParse(e))) *
                    (60000 / receivedbackuprr)) /
                1000);
            // // // print(tiValue.toString());
            teValue = (((double.tryParse(e) /
                        (double.tryParse(i) + double.tryParse(e))) *
                    (60000 / receivedbackuprr)) /
                1000);
          } else {
            tiValue = (((double.tryParse(i) /
                        (double.tryParse(i) + double.tryParse(e))) *
                    (60000 / receivedrr)) /
                1000);
            // // // print(tiValue.toString());
            teValue = (((double.tryParse(e) /
                        (double.tryParse(i) + double.tryParse(e))) *
                    (60000 / receivedrr)) /
                1000);
          }
        });

        setState(() {
          if (operatinModeR == 6 && receivedoperatingModeR == 6) {
            preferences.setString("checkMode", "pccmv");
            preferences.setInt('pccmvRRValue', receivedrr);
            preferences.setInt(
                'pccmvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('pccmvPeepValue', receivedpeep);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);
            preferences.setInt('pccmvPcValue', receivedpc); //7

            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("pc", receivedpc);
            // pccmvEnabled = true;
            // getData();

          } else if (operatinModeR == 7 && receivedoperatingModeR == 7) {
            preferences.setString("checkMode", "vccmv");
            preferences.setInt('vccmvRRValue', receivedrr);
            preferences.setInt(
                'vccmvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('vccmvPeepValue', receivedpeep);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);
            preferences.setInt('vccmvVtValue', receivedvt); //7

            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("vt", receivedvt);
            // vccmvEnabled = true;
            // getData();
          } else if (operatinModeR == 2 && receivedoperatingModeR == 2) {
            preferences.setString("checkMode", "pacv");
            preferences.setInt('pacvItrigValue', receivedItrig);
            preferences.setInt('pacvRrValue', receivedrr);
            preferences.setInt(
                'pacvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('pacvPeepValue', receivedpeep);
            preferences.setInt('pacvPcValue', receivedpc);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);

            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("pc", receivedpc);
            preferences.setInt("itrig", receivedItrig);
            // pacvEnabled  = true;
            // getData();
          } else if (operatinModeR == 1 && receivedoperatingModeR == 1) {
            preferences.setString("checkMode", "vacv");
            preferences.setInt('vacvItrigValue', receivedItrig);
            preferences.setInt('vacvRrValue', receivedrr);
            preferences.setInt(
                'vacvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('vacvPeepValue', receivedpeep);
            preferences.setInt('vacvVtValue', receivedvt);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);

            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("vt", receivedvt);
            preferences.setInt("itrig", receivedItrig);
            // vacvEnabled = true;
            // getData();
          } else if (operatinModeR == 4 && receivedoperatingModeR == 4) {
            preferences.setString("checkMode", "psimv");
            preferences.setInt('psimvRrValue', receivedrr);
            preferences.setInt('psimvPsValue', receivedps);
            preferences.setInt(
                'psimvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('psimvPeepValue', receivedpeep);
            preferences.setInt('psimvPcValue', receivedpc);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);
            preferences.setInt('psimvItrigValue', receivedItrig);

            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("pc", receivedpc);
            preferences.setInt("ps", receivedps);
            preferences.setInt("itrig", receivedItrig);
            // psimvEnabled = true;
            // getData();
          } else if (operatinModeR == 5 && receivedoperatingModeR == 5) {
            preferences.setString("checkMode", "vsimv");
            preferences.setInt('vsimvRrValue', receivedrr);
            preferences.setInt(
                'vsimvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('vsimvPeepValue', receivedpeep);
            preferences.setInt('vsimvVtValue', receivedvt);
            preferences.setInt('vsimvPsValue', receivedps);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);
            preferences.setInt('vsimvItrigValue', receivedItrig);
            preferences.setInt('vsimvPcMaxValue', (receivedpcmax).toInt());

            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("ps", receivedps);
            preferences.setInt("vt", receivedvt);
            preferences.setInt("itrig", receivedItrig);
          } else if (operatinModeR == 3 && receivedoperatingModeR == 3) {
            var apneatimeCaal = (receivedapneaTime ~/ 1000).toInt();
            preferences.setString("checkMode", "psv");
            preferences.setInt('psvItrigValue', receivedItrig);
            // preferences.setInt('psvTiValue', psvTiValue);
            preferences.setInt('psvPeepValue', receivedpeep);
            preferences.setInt(
                'psvIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('psvPsValue', receivedps);
            preferences.setInt('psvVtValue', receivedvt);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);
            preferences.setInt('psvBackupRrValue', receivedbackuprr);
            preferences.setInt('psvPcValue', receivedpc);
            preferences.setInt('psvAtimeValue', apneatimeCaal); //3
            preferences.setInt('psvTiValue',
                getTiValueNumber(((receivedti / 1000).toDouble()).toString()));

            preferences.setInt("rr", receivedbackuprr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("pc", receivedpc);
            preferences.setInt("vt", receivedvt);
            preferences.setInt("ps", receivedps);
            preferences.setInt("itrig", receivedItrig);
            preferences.setInt("atime", apneatimeCaal);
            preferences.setInt("ti",
                getTiValueNumber(((receivedti / 1000).toDouble()).toString()));
          } else if (operatinModeR == 14 && receivedoperatingModeR == 14) {
            preferences.setString("checkMode", "prvc");
            preferences.setInt("rr", receivedrr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("vt", receivedvt);
            preferences.setInt("itrig", receivedItrig);
            preferences.setInt("pc", receivedpcmax);

            preferences.setInt('prvcItrigValue', receivedItrig);
            preferences.setInt('prvcRrValue', receivedrr);
            preferences.setInt(
                'prvcIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('prvcPeepValue', receivedpeep);
            preferences.setInt('prvcVtValue', receivedvt);
            preferences.setInt('pccmvFio2Value', receivedfio2);
            preferences.setInt('vccmvFio2Value', receivedfio2);
            preferences.setInt('pacvFio2Value', receivedfio2);
            preferences.setInt('vacvFio2Value', receivedfio2);
            preferences.setInt('psimvFio2Value', receivedfio2);
            preferences.setInt('vsimvFio2Value', receivedfio2);
            preferences.setInt('psvFio2Value', receivedfio2);
            preferences.setInt('prvcFio2Value', receivedfio2);
            preferences.setInt('prvcPcMaxValue', receivedpcmax);
          } else if (operatinModeR == 20 && receivedoperatingModeR == 20) {
            var apneatimeCaal = (receivedapneaTime ~/ 1000).toInt();
            preferences.setString("checkMode", "cpap");
            preferences.setInt('cpappItrigValue', receivedItrig);
            // preferences.setInt('psvTiValue', psvTiValue);
            preferences.setInt('cpappPeepValue', receivedpeep);
            preferences.setInt(
                'cpapIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('cpappPsValue', receivedps);
            preferences.setInt('cpappVtValue', receivedvt);
            preferences.setInt('cpappFio2Value', receivedfio2);
            preferences.setInt('cpappBackupRrValue', receivedbackuprr);
            preferences.setInt('cpappPcValue', receivedpc);
            preferences.setInt('cpappAtimeValue', apneatimeCaal); //3
            preferences.setInt('cpappTiValue',
                getTiValueNumber(((receivedti / 1000).toDouble()).toString()));

            preferences.setInt("rr", receivedbackuprr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("pc", receivedpc);
            preferences.setInt("vt", receivedvt);
            preferences.setInt("ps", receivedps);
            preferences.setInt("itrig", receivedItrig);
            preferences.setInt("atime", apneatimeCaal);
            preferences.setInt("ti",
                getTiValueNumber(((receivedti / 1000).toDouble()).toString()));
          } else if (operatinModeR == 21 && receivedoperatingModeR == 21) {
            var apneatimeCaal = (receivedapneaTime ~/ 1000).toInt();
            preferences.setString("checkMode", "auto");
            preferences.setInt('autoItrigValue', receivedItrig);
            // preferences.setInt('autoTiValue', autoTiValue);
            preferences.setInt('autoPeepValue', receivedpeep);
            preferences.setInt(
                'autoIeValue',
                getIeNumber((receivedi / 10).toString() +
                    ":" +
                    (receivede / 10).toString()));
            preferences.setInt('autoautoalue', receivedps);
            preferences.setInt('autoVtValue', receivedvt);
            preferences.setInt('autoFio2Value', receivedfio2);
            preferences.setInt('autoBackupRrValue', receivedbackuprr);
            preferences.setInt('autoPcMaxValue', receivedpcmax);
            preferences.setInt('autoAtimeValue', apneatimeCaal); //3
            preferences.setInt('autoTiValue',
                getTiValueNumber(((receivedti / 1000).toDouble()).toString()));

            preferences.setInt("rr", receivedbackuprr);
            preferences.setString("i", (receivedi / 10).toString());
            preferences.setString("e", (receivede / 10).toString());
            preferences.setInt("peep", receivedpeep);
            preferences.setInt("fio2", receivedfio2);
            preferences.setInt("pc", receivedpcmax);
            preferences.setInt("vt", receivedvt);
            preferences.setInt("ps", receivedps);
            preferences.setInt("itrig", receivedItrig);
            preferences.setInt("atime", apneatimeCaal);
            preferences.setInt("ti",
                getTiValueNumber(((receivedti / 1000).toDouble()).toString()));
          } else if (operatinModeR == 22 && receivedoperatingModeR == 22) {
            preferences.setString("checkMode", "hfno");

            preferences.setInt('hfnoFio2Value', receivedfio2);
            preferences.setInt('hfnoFlowValue', receivedrr);

            preferences.setInt("flow", receivedrr);
            preferences.setInt("fio2", receivedfio2);
          }
        });
      }

      setState(() {
        powerIndication = finalList[64];
        batteryPercentage = finalList[65];
        batteryStatus = finalList[78];
      });

      if (((finalList[60] << 8) + finalList[61]).toInt() >= 0 &&
          ((finalList[60] << 8) + finalList[61]).toInt() <= 150) {
        setState(() {
          double dataPlatea = ((finalList[60] << 8) + finalList[61]).toDouble();
          if (dataPlatea > pipValue.toDouble()) {
            pplateauDisplay = pipValue.toDouble() - 1.0;
          } else {
            pplateauDisplay = dataPlatea;
          }
        });
      }

      if (getOpertingMode != false) {
        if (patientId != "") {
          var data = VentilatorOMode(
              patientId,
              patientName.toString(),
              pipValue.toString(),
              vteValuea.toString(),
              peepDisplayValue.toString(),
              rrDisplayValue.toString(),
              fio2DisplayParameter.toString(),
              mapDisplayValue.toString(),
              mvValuea.toString(),
              cdisplayParameter.toString(),
              ieDisplayValue.toString(),
              rrValue.toString(),
              checkI(i) + ":" + checkE(e).toString(),
              peepValue.toString(),
              pcValue.toString(),
              psValue.toString(),
              itrigValue.toString(),
              fio2Value.toString(),
              vtValue.toString(),
              tiValue.toString(),
              teValue.toString(),
              atimeValue.toString(),
              tipsvValue.toString(),
              pplateauDisplay.toStringAsFixed(0),
              tempPressure,
              temp3Flow,
              temp1Volume,
              operatinModeR.toString(),
              lungImage.toString(),
              paw.toString(),
              globalCounterNo.toString(),
              ((finalList[106] << 8) + finalList[107]).toString(),
              finalList[109].toString(),
              alarmActive,
              amsDisplayParamter,
              leakVolumeDisplay.toString(),
              peakFlowDisplay.toString(),
              spontaneousDisplay.toString());
          saveData(data, patientId);
        } else {
          var data = VentilatorOMode(
              "SWASIT " + globalCounterNo.toString(),
              patientName,
              pipValue.toString(),
              vteValuea.toString(),
              peepDisplayValue.toString(),
              rrDisplayValue.toString(),
              fio2DisplayParameter.toString(),
              mapDisplayValue.toString(),
              mvValuea.toString(),
              cdisplayParameter.toString(),
              ieDisplayValue.toString(),
              rrValue.toString(),
              checkI(i) + ":" + checkE(e).toString(),
              peepValue.toString(),
              pcValue.toString(),
              psValue.toString(),
              itrigValue.toString(),
              fio2Value.toString(),
              vtValue.toString(),
              tiValue.toString(),
              teValue.toString(),
              atimeValue.toString(),
              tipsvValue.toString(),
              pplateauDisplay.toStringAsFixed(0),
              tempPressure,
              temp3Flow,
              temp1Volume,
              operatinModeR.toString(),
              lungImage.toString(),
              paw.toString(),
              globalCounterNo.toString(),
              ((finalList[106] << 8) + finalList[107]).toString(),
              finalList[109].toString(),
              alarmActive,
              amsDisplayParamter,
              leakVolumeDisplay.toString(),
              peakFlowDisplay.toString(),
              spontaneousDisplay.toString());
          saveData(data, patientId);
        }
      }
      finalList = [];
      list = [];
      listTemp = [];
    });
  }

  // extractingBreathData(List<int> breathList) {
  //   var index = 0;

  //   if (breathList[index++] == 2) {
  //     List<int> pressureB = [];
  //     List<int> flowB = [];
  //     List<int> volumeB = [];
  //     var lengthPacket = breathList[index++];
  //     var pressurePostiveLength = breathList[index++];

  //     var pressureNegativeLength;
  //     var flowPostiveLength;
  //     var flowNegativeLength;
  //     var volumePostiveLength;
  //     var volumeNegativeLength;

  //     for (int i = 0; i < pressurePostiveLength; i++) {
  //       pressureB.add(breathList[3 + i]);
  //     }

  //     index = index + pressurePostiveLength;
  //     pressureNegativeLength = breathList[index];
  //     // print(breathList);

  //     for (int i = index + 1; i < pressureNegativeLength + (index + 1); i++) {
  //       pressureB.add(breathList[i]);
  //     }

  //     index = index + pressureNegativeLength + 1;
  //     flowPostiveLength = breathList[index];
  //     // print(breathList);

  //     for (int i = index + 1; i < flowPostiveLength + (index + 1); i++) {
  //       flowB.add(breathList[i]);
  //     }

  //     index = index + flowPostiveLength + 1;
  //     flowNegativeLength = breathList[index];

  //     for (int i = index + 1; i < flowNegativeLength + (index + 1); i++) {
  //       flowB.add(-(breathList[i]));
  //     }

  //     index = index + flowNegativeLength + 1;
  //     volumePostiveLength = breathList[index];
  //     // print(breathList);

  //     for (int i = index + 1; i < volumePostiveLength + (index + 1); i++) {
  //       volumeB.add(breathList[i]);
  //     }

  //     index = index + volumePostiveLength + 1;
  //     volumeNegativeLength = breathList[index];

  //     for (int i = index + 1; i < volumeNegativeLength + (index + 1); i++) {
  //       volumeB.add(breathList[i]);
  //     }

  //     // print(pressureB.toString() + flowB.toString() + volumeB.toString());

  //     _plotDataPv = [Point(peepDisplayValue.toDouble(), 2.0)];

  //     ///pip,vti
  //     _plotDataPf = [Point(0.0, peepDisplayValue.toDouble())];
  //     _plotDataVf = [Point(0.0, 0.0)];

  //     for (int i = 0; i < pressureB.length; i++) {
  //       // datapv.add(Point(temp, temp1));
  //       //     datapf.add(Point(temp3, temp));
  //       //     datavf.add(Point(temp1, temp3));

  //       _plotDataPv.add(Point(
  //           ((((pressureB[i] << 8) + pressureB[i + 1]) / 100).toDouble()),
  //           (volumeB[i] << 8) + volumeB[i + 1].toDouble()));
  //       _plotDataPf.add(Point(
  //           ((((flowB[i] << 8) + flowB[i + 1]) * 0.06).toDouble()),
  //           (((pressureB[i] << 8) + pressureB[i + 1]) / 100).toDouble()));
  //       _plotDataVf.add(Point((volumeB[i] << 8) + volumeB[i + 1].toDouble(),
  //           (((flowB[i] << 8) + flowB[i + 1]) * 0.06).toDouble()));

  //       i = i + 1;
  //     }
  //   }
  // }

  Future sendData(List<int> listCrcDataC, checkValue) async {
    List<int> cfinalListSend = [];

    cfinalListSend.add(126);
    cfinalListSend.addAll(listCrcDataC);
    cfinalListSend.add(127);

    await _port.write(Uint8List.fromList(cfinalListSend));
    // Fluttertoast.showToast(msg: cfinalListSend.toString());

    sleep(Duration(milliseconds: 200));

    if (acknowReceivedValue == 1 && ackPacket == 6 ||
        acknowReceivedValue == 1 && ackPacket == 7 ||
        acknowReceivedValue == 1 && ackPacket == 2 ||
        acknowReceivedValue == 1 && ackPacket == 1 ||
        acknowReceivedValue == 1 && ackPacket == 3 ||
        acknowReceivedValue == 1 && ackPacket == 4 ||
        acknowReceivedValue == 1 && ackPacket == 5 ||
        acknowReceivedValue == 1 && ackPacket == 14 ||
        acknowReceivedValue == 1 && ackPacket == 20 ||
        acknowReceivedValue == 1 && ackPacket == 21) {
      if (checkValue == 1) {
        clearDialogData();
      } else if (checkValue == 2) {
        clearData();
      }
      setState(() {
        if (modesEnabled == true) {
          _setValuesonClick = false;
        } else {
          _setValuesonClick = true;
        }
      });
    } else if (acknowReceivedValue == 1 && ackPacket == 10) {
      clearAlarmData();
    } else if (acknowReceivedValue == 1 && ackPacket == 13) {
      setState(() {
        turnoffSendingboolI = true;
        turnoffSendingboolE = true;
      });
      clearRespiratoryData();
    } else if (acknowReceivedValue == 1 && ackPacket == 31) {
      clearPlay();
    } else if (acknowReceivedValue == 1 && ackPacket == 30) {
      clearPause();
    } else if (acknowReceivedValue == 1 && ackPacket == 16) {
      setState(() {
        preferences.setBool('_isFlagTest', true);
        _isFlagTest = true;
      });
    } else if (acknowReceivedValue == 1 && ackPacket == 19) {
      setState(() {
        oxygenSettingsEnabled = false;
        _odate = "";
        _osensorRange.text = "";
      });
    }
    if (_isdatasendSuccess == false) {
      sendData(listCrcDataC, 2);
    }
    // setState(() {
    //   if (modesEnabled == false) {
    //     _setValuesonClick = true;
    //   }
    // });
  }

  clearPause() {
    setState(() {
      acknowReceivedValue = 0;
      ackPacket = 0;
      finalListSend.clear();
    });
  }

  clearPlay() {
    setState(() {
      acknowReceivedValue = 0;
      ackPacket = 0;
      finalListSend.clear();
    });
  }

  clearData() {
    setState(() {
      _isdatasendSuccess = true;
      modesEnabled = false;
      if (modesEnabled == true) {
        _setValuesonClick = false;
      } else {
        _setValuesonClick = true;
      }
      playOnEnabled = false;
      acknowReceivedValue = 0;
      ackPacket = 0;
      finalListSend.clear();
    });
    writeAlarmsData();
  }

  clearAlarmData() {
    setState(() {
      // _setValuesonClick = true;
      alarmEnabled = false;
      // modesEnabled = false;
      acknowReceivedValue = 0;
      ackPacket = 0;
      finalListSend.clear();
    });
  }

  clearRespiratoryData() {
    setState(() {
      acknowReceivedValue = 0;
      ackPacket = 0;
      finalListSend.clear();
    });
  }

  void clearDialogData() {
    setState(() {
      _setValuesonClick = true;
      acknowReceivedValue = 0;
      ackPacket = 0;
      playOnEnabled = false;
      finalListSend.clear();
    });
  }
}
